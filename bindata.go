// Code generated by go-bindata.
// sources:
// data/index_handler.template
// data/node_handler.template
// data/report_handler.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndex_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x79\x73\xdb\xb8\x15\xff\xbb\xfe\x14\x6f\x91\xec\x4a\x9a\x98\xa4\xed\x1c\x4e\x14\x49\x33\x5e\x3b\x75\xd2\xe6\x3e\x36\xdd\xdd\xc9\x34\x10\xf1\x24\xc2\x06\x01\x1a\x00\x75\x54\xa3\x0f\xd4\xaf\xd1\x4f\xd6\x01\x2f\x91\x3a\x9c\x78\xd3\xe9\x1f\x4d\x93\x99\x08\xd7\xbb\x7f\x00\xde\x03\xd3\xfb\xe1\xec\xd5\xe9\xfb\x5f\x5f\x3f\x81\xc8\xc6\x62\xb0\xd7\x73\x3f\x20\xa8\x1c\xf7\x09\x4a\x32\xd8\x03\xe8\x45\x48\x99\x6b\x00\xf4\x2c\xb7\x02\x07\x2f\x15\x43\x78\xce\x8d\xed\x05\xf9\x40\x3e\x19\xa3\xa5\x10\x46\x54\x1b\xb4\x7d\x92\xda\x91\xf7\x90\xd4\xa7\x24\x8d\xb1\x4f\x26\x1c\xa7\x89\xd2\x96\x40\xa8\xa4\x45\x69\xfb\x64\xca\x99\x8d\xfa\x0c\x27\x3c\x44\x2f\xeb\xec\x03\x97\xdc\x72\x2a\x3c\x13\x52\x81\xfd\x43\xff\xa0\x64\x25\xb8\xbc\x84\x48\xe3\xa8\x4f\x22\x6b\x13\xd3\x0d\x82\x98\xce\x42\x26\xfd\xa1\x52\xd6\x58\x4d\x13\xd7\x09\x55\x1c\x54\x03\xc1\x5d\xff\xae\xff\x20\x08\x8d\x59\x8d\xf9\x31\x97\x7e\x68\x0c\x01\x8d\xa2\x4f\x8c\x9d\x0b\x34\x11\xa2\x2d\x05\x99\x50\xf3\xc4\x82\xd1\xe1\x4a\x52\xa8\x18\xfa\x17\x57\x29\xea\x79\x26\x21\x6f\x7a\x87\xfe\xe1\x91\x7f\x2f\xe3\x78\x61\x08\x70\x69\x71\xac\xb9\x9d\xf7\x89\x89\xe8\xdd\x87\xf7\x3c\x39\x39\xa1\x07\x77\x1e\xbc\x19\x3f\x0a\xc5\xf4\xd7\xd3\xf3\xf3\xd7\xc9\xd9\x9b\xe7\xbf\x24\xcf\x5f\xca\x83\xd1\x5b\xfa\xf6\xd5\xc5\xd3\x2b\x73\x78\xd7\xde\x3b\x1f\x5f\xdc\x7d\xf2\x8f\xfb\x07\x7f\x93\xe7\x6f\xae\xc2\x40\x3f\x7c\x11\xc9\xb7\x67\xbf\x11\x08\xb5\x32\x46\x69\x3e\xe6\xb2\x4f\xa8\x54\x72\x1e\xab\xd4\x90\x41\x2f\xc8\xf5\xbc\x46\xe9\xaf\x73\xcf\x71\x70\xb1\xee\x9d\xed\xb6\xbc\x0f\xef\x3f\x7b\xc3\x87\x07\x47\xc7\x57\x93\xf9\xc5\xbb\x17\xa3\xa7\x17\xaf\x5e\xd0\xe7\x97\xa3\xf4\xe3\x2f\xb3\xdf\x66\x1f\x5e\xcb\xd3\xbf\x9c\x1c\x8b\xa3\xf8\xf4\xe3\xcb\x67\xc9\xf9\xa3\xf8\xfc\xf4\xec\xe1\xf4\xfc\xe5\xb3\xf0\xf5\xd9\xf1\xfb\x19\xfd\x26\x5b\x42\x26\x2f\x8c\x1f\x0a\x95\xb2\x91\xa0\x1a\x33\x43\xe8\x05\x9d\x05\x82\x0f\x4d\x10\xab\x18\xa5\xf5\x2f\x4c\x70\xe4\x1f\x3e\xf4\x0f\xcb\x81\xc2\x9a\x9a\x84\x3f\x2c\xe2\x34\xa2\xba\x90\xf0\xc0\x3f\x28\xba\xc3\x54\x32\x81\x5b\xc4\xd4\xa5\xd8\x79\x82\x7d\x62\x71\x66\x83\x0b\x3a\xa1\xf9\x68\x81\x36\x98\x72\xc9\xd4\xd4\x57\x52\x28\xca\xa0\x0f\xa3\x54\x86\x96\x2b\x09\xed\x0e\x2c\xf6\x72\x75\x01\x20\x08\x56\x2d\xf8\x88\x90\xa8\x24\x15\xd4\x22\xd8\x08\xc1\xd2\xa1\x40\x03\x5c\x82\x4a\x35\x58\x8c\x13\x37\xe5\x8d\x51\xa2\xa6\x8e\x59\x8d\x56\x53\x1b\xa1\x06\x1b\x51\x09\x11\x9d\x70\x39\x06\xab\xe0\x12\x31\x01\x0a\x06\x13\xaa\x1d\xd7\x50\xa5\xd2\x42\x84\x1a\x6b\xa4\x53\x84\x90\x4a\x30\x88\x10\xa9\x29\xc4\x54\xce\x41\xab\xa9\x71\x3a\x68\x04\xaa\xd1\xa9\xb0\x52\xa8\x46\x4a\x25\x73\x22\x2d\x8c\xf9\x04\x0d\xa4\x26\xd3\x34\x97\xc2\x25\xe3\x1a\x43\x2b\xe6\xfe\xa6\xb5\x61\x44\xe5\x18\x19\x00\xf4\xe1\x76\xbb\x75\xab\xe8\xff\x3d\x93\x00\x56\xb7\x3a\xbe\x40\x39\xb6\x11\x78\x70\xf8\xb8\xa4\x4a\x65\x49\x97\x53\x55\xfd\x2f\xd0\x8d\x28\x17\x99\xb0\x82\x2e\xef\xef\x22\xda\x1a\x9b\x0f\x09\xab\x85\xc5\x73\x67\x28\x6a\x03\x23\xa5\xe1\x73\xa1\xc4\x67\xf8\x09\x3e\xe7\xac\x3f\x6f\x31\x99\x8f\xa0\x5d\xd9\x3d\x80\x03\xe8\xc0\xa2\x61\x7b\xe6\xb6\x56\xc7\x77\x47\xf6\x6a\x65\x07\x96\x0d\x0e\x85\x2d\x75\x06\x85\x39\x4d\xfa\x62\x5d\x07\x60\x59\x59\x34\xa1\x1a\x86\x54\x67\x18\x3f\xa3\x96\x42\x1f\x16\xe5\x1c\x80\xa0\x43\x14\xa6\x0b\xbf\xaf\x86\x00\x16\x0b\xed\xf4\x00\xff\x5c\xd3\x24\x82\xe5\xb2\x3e\x49\x16\x0b\xff\xcc\xb9\x65\xb9\x24\xfb\x4d\x2a\x94\xac\xbe\xf6\x53\x6d\x9a\x51\x4b\x0d\x5a\x27\x69\x51\x27\xca\xe4\x77\xa1\x75\x9a\x5b\xde\x6a\x70\x1c\xd2\xf0\x72\xac\x55\x2a\xd9\xa9\x12\x4a\x77\xa1\x75\x8b\x3d\x42\x36\x3a\x6e\x2e\x73\xbc\x6f\x6a\x41\x21\xef\xcb\x46\x00\x7c\x5a\x75\x96\xfb\xb0\x55\xfb\x0f\x25\x26\xbf\xa8\x3f\x1e\xbb\xbf\xdf\xae\x7f\x25\xf1\x3f\x64\x41\x8e\x9c\x2f\xaa\x3f\x3a\x62\xc8\xf0\xdb\xd5\xff\x73\x0e\xd4\x1b\xea\xfe\xa9\x02\xf5\xf2\x71\x1d\xde\xa1\x9d\x41\x1f\x98\x0a\xd3\xec\xa2\x18\xa3\x7d\x22\xd0\x35\x7f\x9e\x3f\x63\x6d\x12\x52\x39\xa1\x86\x74\xdc\xc4\xa9\xcb\x57\x66\xb6\x4d\x8e\x18\xe9\x54\x4c\x8a\x83\x3b\x9e\xff\x4c\x35\xf4\x41\xe2\x14\xb2\xfd\xd2\x0e\xed\xac\xe1\x30\x77\xfc\x77\xa1\x35\xa4\xba\xb5\x06\xee\x6e\x63\x93\xd5\x26\x55\xe2\x4e\x6d\xd3\x6d\xfa\x3d\xcb\xb9\xba\x8d\x21\x00\xc6\x4d\x22\xe8\xbc\x3b\xa2\xc2\xe0\x7e\x73\xce\x69\xdd\x25\xe5\xc5\x05\x4e\xd1\xac\x03\x1e\xbc\xb3\x34\xbc\x44\x46\xea\x04\xcb\x06\xb9\x55\x4a\x58\x9e\xac\x2b\x01\x10\x2b\xe6\xec\xe1\x92\xe1\xac\xb5\x26\xd1\x65\x0d\xda\x60\x68\xbb\x90\x29\xb4\x9b\xbd\x46\x93\x28\x69\xf8\x04\xbb\x60\x75\xda\x54\x3d\x4b\xfe\x36\x25\xcf\x4e\x66\xb8\x71\x1a\x64\xeb\x73\x6b\xb6\x70\x72\x08\x58\x1b\x98\x7f\x15\x97\x75\x26\x0d\x4b\xf6\x36\x9b\xcb\x4e\x79\x21\x2c\x8b\x46\x3d\x19\xe8\x05\x65\x32\xdd\x1b\x2a\x36\x2f\xf2\x03\x49\x27\x10\x0a\x6a\x4c\x9f\x48\x3a\x19\x52\x0d\xf9\x8f\xc7\x70\x44\x53\x61\x09\x68\x25\x30\x9b\xe4\xe3\xec\x22\x2f\xb3\x06\xe8\x31\x5e\xd1\xba\x7c\x9a\x72\x89\xda\x1b\x89\x94\xb3\x6a\x4d\x73\x55\xc1\x3a\xbf\x90\x6a\x6b\x9c\x4a\xa9\xb5\x4a\x16\x79\x4a\xde\x21\x6b\x64\x56\x8d\xc7\xc2\xe5\x05\x42\xd0\xc4\x20\x23\x19\x80\x8b\x61\xa7\x42\x3e\x5e\x0e\x53\x3d\x76\xb5\xc0\xad\x9c\x9a\x00\xd5\x9c\x7a\x38\x4b\xa8\x64\xc8\xfa\x24\xc3\x46\x31\xea\xb4\xd7\x4a\x54\xa2\x1a\xaa\xb9\x24\x2a\xa1\xb2\x54\xc6\x68\x4f\x49\x31\x27\x83\xf7\xb9\x3a\x2b\xc7\xf4\x02\xb7\xee\x1a\x52\x1e\x2a\xe9\x65\xec\xff\x5b\x4b\x7b\x41\xee\xca\xc6\x18\x5d\xf3\xeb\x50\x53\xc9\xc8\xe0\x27\x39\x34\xc9\xe3\xeb\xff\x7d\x9d\x26\x09\x5a\xef\x5d\x1a\xc7\x54\xcf\x7b\x01\xad\xc5\x39\x60\x7c\xb2\x16\x76\xce\x2a\x8f\xae\x80\x92\x47\xa9\x84\x59\x15\xb5\x86\x8a\xa9\xa8\xe9\x58\x2e\x95\x74\x42\x06\x7b\x7f\x82\xbc\x12\x1b\xf4\x68\x51\x8a\x05\x64\xd0\xf4\xc8\x58\xcc\x93\xc8\xb9\x05\xaa\x96\x17\xa9\xb8\x8c\x76\xc4\x19\x43\xd9\x27\x6e\x8b\x55\x4e\x83\xa7\x2a\x46\x67\x50\x2f\x10\xbc\xe9\xc2\x54\xec\xb0\xb2\xd6\xe9\x05\x92\x96\xcd\x6d\xdb\x82\x0c\xca\x3b\xa0\x17\x1d\xe6\x45\x6c\xe5\xc4\xe8\x70\x35\x99\x9f\xf9\x99\xe3\x8a\xe3\x1f\xb2\xea\xb0\x4f\x22\xe4\xe3\xc8\x76\xe1\xf0\xfe\x41\x32\x7b\x0c\x59\xa9\xda\x85\x47\x07\x3f\x3e\x86\x98\xea\x31\x97\x9e\xc0\x91\xed\xde\x5f\xf5\x75\x46\x70\xff\x47\x67\x63\xce\xac\xb1\x73\x9d\x8c\x51\x29\x64\xd0\x34\x2c\x29\xd0\xd0\x0b\x92\x95\x6e\x1b\x41\xf1\x2c\x1d\x9a\xfa\x56\x17\xbc\x5c\x41\x43\xcb\x27\xce\xbb\xb4\xb9\x49\x2d\x1d\x92\x22\x6c\xb7\xa8\x10\x64\x70\x22\xc4\xa6\xd7\x8b\xf0\xee\xa4\xcc\x6f\x7d\x32\x28\xae\xe3\x46\xf0\x87\x94\x8d\x91\xe4\xd6\xd5\x72\xcd\x2a\xd0\x37\x97\x56\x64\x2c\x64\x50\x26\x5f\xbb\xe4\x35\x92\xe3\x6f\x10\x58\x95\x0a\x64\x50\xe5\x4b\x15\x97\x75\x76\x39\x3e\xf7\xb6\x9c\xc9\x2e\xf7\x2f\xde\x39\xea\x41\xfa\xc1\xf3\xe0\x44\x08\xf0\xbc\x2d\xbb\xd5\xc5\xa4\x4e\x9f\x50\x89\x30\xa2\x2c\x2b\xab\xca\xa0\xd6\x77\x47\x5e\x97\x14\xa4\x79\x95\x52\x67\x20\x8a\x42\xcc\x1b\x2a\xcd\x50\x23\x2b\xba\xc6\x6a\x9e\x54\xbd\x50\x49\x86\xd2\x54\xfd\x48\x4d\x70\xe3\x10\xb6\x7a\xb0\x76\x5b\xf6\x6c\x94\x6d\xa5\x5e\x60\xa3\x6d\x73\xef\x2c\xb5\xbb\x27\x11\xe5\xe6\x5c\x2f\x58\x17\x53\xe5\x84\x4e\x92\x59\xcb\x09\x9d\x56\xeb\x57\x38\x2c\x16\x7c\x04\x78\x05\x7e\x26\x1f\x0a\x18\x12\x58\x2e\x4b\xc7\x30\xc7\x51\x13\x58\x2c\x00\x25\x5b\xe7\xb9\x8d\x47\x09\x88\x1a\x13\x2e\x47\x8a\xc0\x35\x3c\x32\x7c\x15\x47\xa4\x54\x0c\x03\x97\xc0\x5e\x31\xb9\x5c\x92\x4d\x87\xb0\x41\x35\xdb\x0b\x2c\xdb\xb1\x20\xd3\x66\xe7\x8a\x2a\xee\x3c\xce\x6f\x61\x74\xad\xbe\x4b\x9c\x4f\xac\x93\x5a\x34\x36\xc9\xb7\xb9\x7d\x3d\xa5\xee\x05\x19\x38\x36\xce\xe2\x26\xb2\x8b\x23\x61\x2b\xb8\xcb\x40\x6c\xc3\xf7\x2e\x54\xd7\xcb\xef\xef\x09\xd8\xbb\x41\xbc\xae\xfc\x3a\xa8\xff\xc7\x60\xf7\xc7\xa1\x58\x5e\x17\x5b\xb1\x58\x6d\xe8\x9b\x80\xb1\xf1\x82\xf4\x3d\xa3\xb1\x76\x1c\xee\x82\x63\x7e\x3c\xfe\x1f\x8c\x05\x18\x57\x0f\x2f\x5b\xe1\xb8\x4a\x39\x6e\x04\xc8\xb5\x47\xcd\xef\x19\x92\x35\x0f\x6e\x01\xe5\x77\x8c\xc3\x46\x67\x6b\x81\x71\xcd\x58\xa4\x21\xa8\x3a\x23\xa5\x2c\xea\xfc\x5a\xce\x9a\x3b\x9e\x19\xea\x55\x57\x4d\xbf\xc6\x0a\xe1\xc5\xac\xfa\x46\xb8\x45\xdf\x1d\x14\xf7\xd6\xb1\xd9\x2c\x8a\x36\x83\x59\x2f\x54\xcb\xaf\x3c\xc6\xe2\x04\xfd\x4b\x8c\x13\x7f\xc4\x03\x32\xf8\xd7\x3f\xe1\xe8\xe0\xf0\x38\x7b\x12\xc3\x09\xc2\x5f\x31\x4e\xb6\x95\xa2\xeb\xc5\xe8\x66\xd1\xdd\xf4\x78\xee\xa4\xaa\xff\x35\x9f\x82\x00\x6e\xb7\xcb\xcf\x3f\xed\x4e\xed\x79\xea\x76\xbb\xe5\x97\xdf\x20\x7e\xaf\xd0\xfc\xa9\xd5\xf1\x91\x86\xd1\x76\x1a\x47\x65\x23\x6e\x3a\x7e\x68\x4c\xbb\x15\xa6\xda\x28\xdd\xda\x6f\x25\x2a\x7b\xa3\x6b\x75\xfc\x6c\xbb\xb7\x9b\x3e\xdb\xc1\xaa\xce\x8e\x32\x76\xea\x9c\xde\x6e\xe5\x25\x49\x6b\xf5\x24\x9a\xff\x59\xee\xdf\x98\xa7\xc6\x58\x4d\xf0\x0b\x6c\x3b\x7e\x28\x78\x78\xd9\xbe\x8e\x61\xf5\x9e\x2b\x54\x98\xbd\x0b\x65\x1f\x72\x0a\xc5\xad\xd5\xed\x56\xe5\xbe\x4d\x01\xcd\x6e\x7d\x7a\xf5\xb8\x07\xc5\xf3\xb1\x54\x53\xe8\x43\xfe\x95\xb1\xdd\x98\xcd\x82\xc5\x63\xdc\x88\x0e\xdf\x07\xec\x34\x9f\x34\x1d\x27\xb7\x76\xc5\xea\x76\x1b\x6b\x9a\x62\xce\xa8\xa9\x69\xb6\x24\xfb\x76\xd3\xca\x8a\xe1\x41\x0b\xee\x64\x5c\xfc\x91\x56\x71\x5b\xaa\x69\x07\xee\x40\xab\xa8\x80\x5b\xeb\x76\x6c\x34\x9b\xef\x94\xf9\xf3\x64\x2f\xc8\xff\x5b\xc0\xbf\x03\x00\x00\xff\xff\x42\x2f\x21\x40\x27\x20\x00\x00"

func dataIndex_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataIndex_handlerTemplate,
		"data/index_handler.template",
	)
}

func dataIndex_handlerTemplate() (*asset, error) {
	bytes, err := dataIndex_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index_handler.template", size: 8231, mode: os.FileMode(420), modTime: time.Unix(1502252419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNode_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xfd\x72\xdb\xb8\x11\xff\x3b\x7e\x8a\x2d\x9a\xab\xe4\x89\x45\x4a\x4e\xee\xec\x53\x48\xcd\x64\xe4\x3b\x27\xd7\x7c\x38\xb1\x7b\x9f\x93\x3f\x20\x62\x25\x42\x01\x01\x1a\x00\x65\xab\x1c\x3d\x50\x5f\xa3\x4f\xd6\x01\xbf\x44\xca\x92\x9b\x69\x67\xce\x7f\x88\xc0\x7e\xe1\xb7\xbb\xc0\x62\xe1\xe0\x2f\x17\x1f\xa6\x37\xbf\x5d\xfd\x00\xb1\x4d\xc4\xe4\x28\x70\x1f\x10\x54\x2e\x42\x82\x92\x4c\x8e\x00\x82\x18\x29\x73\x03\x80\xc0\x72\x2b\x70\x92\xe7\xde\x8f\xb7\x4c\x6e\x36\x81\x5f\x12\x4a\x66\x82\x96\x42\x14\x53\x6d\xd0\x86\x24\xb3\xf3\xc1\x39\x69\xb3\x24\x4d\x30\x24\x2b\x8e\x77\xa9\xd2\x96\x40\xa4\xa4\x45\x69\x43\x72\xc7\x99\x8d\x43\x86\x2b\x1e\xe1\xa0\x98\x9c\x00\x97\xdc\x72\x2a\x06\x26\xa2\x02\xc3\x91\x37\xac\x4d\x09\x2e\xbf\x40\xac\x71\x1e\x92\xd8\xda\xd4\x8c\x7d\x3f\xa1\xf7\x11\x93\xde\x4c\x29\x6b\xac\xa6\xa9\x9b\x44\x2a\xf1\x1b\x82\xff\xdc\x7b\xee\x7d\xe7\x47\xc6\x6c\x69\x5e\xc2\xa5\x17\x19\x43\x40\xa3\x08\x89\xb1\x6b\x81\x26\x46\xb4\xf5\x42\x26\xd2\x3c\xb5\x60\x74\xb4\x5d\x29\x52\x0c\xbd\xe5\x6d\x86\x7a\x5d\xac\x50\x0e\x07\x23\x6f\x74\xea\xbd\x28\x2c\x2e\x0d\x01\x2e\x2d\x2e\x34\xb7\xeb\x90\x98\x98\x3e\x3f\x7f\x31\x90\xab\x57\x74\xf8\xec\xbb\x8f\x8b\xef\x23\x71\xf7\xdb\xf4\xf2\xf2\x2a\xbd\xf8\xf8\xf6\xe7\xf4\xed\x7b\x39\x9c\x7f\xa2\x9f\x3e\x2c\x5f\xdf\x9a\xd1\x73\xfb\xe2\x72\xb1\x7c\xfe\xc3\x3f\xbf\x1d\xfe\x2a\x2f\x3f\xde\x46\xbe\x3e\x7f\x17\xcb\x4f\x17\xbf\x13\x88\xb4\x32\x46\x69\xbe\xe0\x32\x24\x54\x2a\xb9\x4e\x54\x66\xc8\x24\xf0\x4b\x9c\x8f\x80\xfe\xba\xf0\x9c\xf9\xcb\xdd\xe8\xec\xf7\xe5\x26\xfa\xf6\xcd\x47\x3e\x1b\x9e\x9e\xdd\xae\xd6\xcb\xeb\x77\xf3\xd7\xcb\x0f\xef\xe8\xdb\x2f\xf3\xec\x97\x9f\xef\x7f\xbf\xff\xc7\x95\x9c\xfe\xf4\xea\x4c\x9c\x26\xd3\x5f\xde\xbf\x49\x2f\xbf\x4f\x2e\xa7\x17\xe7\x77\x97\xef\xdf\x44\x57\x17\x67\x37\xf7\xf4\xff\xf2\x25\xa2\x72\x45\xcd\xd2\x14\x0e\x50\x63\xd0\x9a\x4a\x69\xcb\xaa\xa0\x7f\x95\x39\x26\x9d\x2d\xa1\x32\x36\x17\x54\x63\x69\x76\x49\xef\x7d\xc1\x67\xc6\x4f\x54\x82\xd2\x7a\x4b\xe3\x9f\x7a\xa3\x73\x6f\x54\x13\x1e\x5f\xc1\xae\x53\x0c\x89\xc5\x7b\xeb\x2f\xe9\x8a\x96\xd4\x6a\x57\xc1\x1d\x97\x4c\xdd\x79\x4a\x0a\x45\x19\x84\x30\xcf\x64\x64\xb9\x92\xd0\x3f\x86\xbc\x14\x01\x58\x51\x5d\x1c\x24\x0b\x21\x48\xbc\x83\x69\xe1\xda\x4f\xd7\xde\xd4\x11\xfb\xa4\xe0\x4d\x95\xb4\x94\x4b\xd4\xe4\x04\xf2\xa3\x27\x50\x1c\xc5\xb1\x1b\x01\xb8\xc5\xc7\x40\x3e\x65\xd2\xf2\x04\xa1\x6f\x30\x52\x92\x99\x63\x72\xf4\x04\x36\x27\xf5\x32\x00\xf4\x9e\x9b\x5f\xc7\xf9\x96\x00\xa0\x71\x85\xda\x20\x1b\x03\x58\x9d\xe1\x96\xb5\x39\x39\x3a\x7a\x02\x8c\x5a\x3a\x86\x3f\x8a\x55\xca\xb5\xa0\x70\x78\x0c\x44\x70\x89\xe4\xa4\xa2\x39\xb9\x2b\xc5\xa5\x35\x4e\x1a\xba\x7f\x79\xae\xa9\x5c\x20\x78\xef\x15\x43\x03\x9b\x4d\xa5\x04\x90\x03\xc0\x7a\x0c\x79\xee\x55\xd8\x37\x1b\xe8\x20\xae\x0d\xa0\x64\x8d\xda\xe7\xe2\xeb\x66\x9f\x6b\xc1\xcd\xf1\xcb\x7a\x58\x04\xcb\xd3\x28\x19\xea\x7e\x4d\xde\x94\x19\x6b\xe5\x2f\xf0\xeb\x3a\x17\xcc\x14\x5b\x57\x29\x95\x74\x05\x91\xa0\xc6\x84\x44\xd2\xd5\x8c\x6a\x28\x3f\x03\x86\x73\x9a\x09\x4b\x40\x2b\x81\x05\x93\x2f\xa8\x4b\x64\x9d\x68\x08\x18\x6f\x74\xa3\x3a\x57\x83\xb9\xc8\x38\x6b\x64\xba\x52\x95\x69\x87\x03\x75\x4b\xc6\x41\xca\xac\x55\xb2\xda\x5a\xe5\x84\xec\xa8\x59\xb5\x58\x08\x84\x48\x09\x41\x53\x83\x8c\x14\x39\xa8\xc8\x0e\x42\x49\xaf\xc9\x54\x2f\x5c\x99\xfe\x6b\xa9\x4d\x80\x6a\x4e\x07\x78\x9f\x52\xc9\x90\x85\x64\x4e\x85\x93\x2d\xa8\x0e\xbd\x56\xa2\x59\xaa\x03\xcd\xed\xfb\x94\xca\x1a\x8c\xd1\x03\x25\xc5\x9a\x4c\x6e\x4a\x38\xdb\xc0\x04\xbe\x93\x7b\x44\x95\x47\x4a\x0e\x0a\xf3\x7f\x96\x68\xe0\x97\xa1\xec\xd0\xe8\x4e\x5c\x67\x9a\x4a\x46\x26\x7f\x93\x33\x93\xbe\x7c\xfc\xf7\x2a\x4b\x53\xb4\x83\xeb\x2c\x49\xa8\x5e\x07\x3e\x6d\xe5\xd9\x67\x7c\xb5\x93\x76\xce\x9a\x88\x6e\x37\x4a\x99\xa5\x7a\x9b\x35\x59\xeb\x40\xcc\x44\x0b\x63\x2d\x2a\xe9\x8a\x4c\xca\x13\x11\x08\x3e\x09\x68\x75\x4b\xfa\x64\xd2\x8d\xc8\x42\xac\xd3\xd8\x85\x05\x9a\xd1\x20\x56\x49\x9d\xed\x98\x33\x86\x32\x24\xee\xf4\x37\x41\x83\xd7\x2a\x41\xe7\x50\xe0\x0b\xde\x0d\x61\x26\x0e\x78\xd9\x9a\x04\xbe\xa4\xf5\x70\xdf\xb1\xd8\x1e\x1a\xd5\xb8\x36\xd3\x48\x59\xa4\xb3\x64\xd6\x3e\x2e\x82\x3f\xe4\x0f\xb8\xc5\x84\x74\x3c\xde\x0f\xf7\xb0\x36\xd0\xc8\xf2\x15\x92\x49\x9e\x43\xd1\xdc\x80\xeb\x6e\xb6\xba\x81\xaf\x1a\x37\x83\x78\xd4\x6e\x81\xe2\x51\xe7\xc4\xbb\xa4\xee\xd4\x67\x28\x9a\x8b\x90\xc4\xc8\x17\xb1\x1d\xc3\xe9\x70\x98\xde\xbf\x84\xa2\xd3\x19\xc3\xf9\xf0\x9b\x97\x90\x50\xbd\xe0\x72\x20\x70\x6e\xc7\xa3\x16\x41\x17\x1a\xa3\xe1\x37\x2e\x13\xed\xd8\xa6\xd5\x86\x0c\xfc\xb4\xa1\x59\x3a\x73\x05\xa0\x74\xb0\x9c\x14\xbf\x83\x99\xd2\x0c\x35\xb2\x6a\x6a\xac\xe6\x69\x33\x73\x37\x03\x4a\xd3\xcc\x63\xb5\xea\x54\x9f\xc0\xea\x4e\xc2\x6d\x3c\x71\x65\x3b\xf0\x6d\xbc\x4b\xbf\xb6\xd4\x66\x66\x1f\xe7\x86\x27\x7b\x35\x7e\xa4\x5c\x20\xdb\xc7\x99\xc6\xee\x8a\xd8\xcb\xba\x51\x96\x8a\x2e\x23\xf0\xdb\x28\xbb\xf7\xcb\x66\xd3\xf6\xa5\x53\x29\xf2\x9c\xcf\x01\x6f\xc1\x73\xc8\x11\xc8\xbc\x80\x43\x60\xb3\xa9\xc3\xc8\x9c\x21\x4d\x20\xcf\x01\x25\x83\x96\xad\x7d\xfa\x51\x09\xba\x6d\x80\xcb\xb9\x22\x70\x40\xbf\x28\xc5\xd5\xa6\xd5\xe8\xda\x62\x3f\xcf\xbd\x37\x4e\xae\x7b\xe2\x2d\x9b\xe4\xf9\xd3\x6d\xdb\xcd\x1e\x72\x4b\x0c\x7b\xb9\xcd\x9e\xe0\x49\x59\xff\xd1\x8d\x42\x92\xe7\xde\x2b\xeb\x96\xaa\x06\x07\x0c\x97\x49\x3a\xc8\xae\x32\x75\x90\x5f\xa4\x6b\x97\xbb\x9b\xb0\xf2\x3e\x6f\x78\x6e\x27\xd6\xa5\x63\x5b\x45\x1e\x6c\xfa\x3d\x94\x58\x83\x5f\x0d\xe7\x4a\x59\xd4\xc5\x89\x2c\x87\x8f\xdf\xcd\x07\x6e\xe5\x48\x89\x41\xc2\x9a\xb7\x0c\x1c\x28\xe6\x5d\xe9\x17\x8f\x15\xec\xdd\xfb\xb3\x5d\xad\xeb\xce\xd4\x58\x5c\xa1\xf7\x05\x93\xd4\x9b\x73\x9f\x4c\xfe\xfd\x2f\x38\x1d\x8e\xce\x60\x00\xd7\x8e\x03\x7f\xc7\x24\xfd\xdf\xeb\xf1\x57\x36\xab\x00\x4f\xfb\x75\x83\xda\x3f\x6e\xb5\x89\x4f\xfb\x3d\xaf\x2a\x30\xfa\x8f\x66\x13\x7f\xee\x1d\x7b\x48\xa3\x78\xbf\x8e\xd3\xb2\x31\x37\xc7\xee\xd5\xd5\xef\x45\x99\x36\x4a\xf7\x4e\x7a\xa9\xeb\x12\x51\xf7\x8e\xbd\xa2\xf2\xf4\xbb\xbd\xde\x01\x53\x6d\x73\x94\xb1\xa9\x0b\x6e\xbf\x57\x16\xf1\xde\xb6\xf7\x2b\xff\x76\xfb\xc7\xaf\xb0\xa9\x31\x51\x2b\xfc\x2f\x66\x8f\xbd\x48\xf0\xe8\x4b\xff\x31\x83\x4c\x45\x59\xf1\x66\x10\x2a\x2a\xda\x20\x08\xb7\xc0\xad\xd5\xfd\x5e\x13\xbe\x87\x0b\x74\xa7\x6d\xb6\xeb\x6f\x8f\xb6\x53\xf7\x60\x90\xea\x0e\x42\x28\x5f\x28\xae\xcf\xdd\xc9\x16\x4f\xf0\x41\x7a\xf8\x09\x60\xeb\xd9\x51\x5b\x2a\xde\x0c\x8d\xa9\xa7\x7d\x6c\x41\xc5\xd2\x50\x17\x6a\x21\x12\xdb\x44\xf4\x7b\x45\xa7\x31\xe9\xc1\xb3\xc2\x8a\x37\xd7\x2a\xe9\x4b\x75\x77\x0c\xcf\xa0\x57\xf5\x12\xbd\x5d\x47\x1e\x0c\x77\xde\x55\x7e\x79\x7a\xcb\x2e\xbd\x6c\xce\x03\xbf\xfc\x7f\xc5\x7f\x02\x00\x00\xff\xff\x21\x87\x13\xbe\xc0\x10\x00\x00"

func dataNode_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataNode_handlerTemplate,
		"data/node_handler.template",
	)
}

func dataNode_handlerTemplate() (*asset, error) {
	bytes, err := dataNode_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/node_handler.template", size: 4288, mode: os.FileMode(420), modTime: time.Unix(1502128329, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReport_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdd\x8e\xe4\x34\x13\xbd\xfe\xe6\x29\xea\x33\x12\x57\x24\xde\x66\x10\xac\x16\x27\x12\x5a\x58\x21\xb1\xb0\xab\x9d\xb9\xe1\x6a\x55\x1d\x57\x27\xd6\x38\x76\xb0\x9d\x9e\x6d\xb5\xfa\x81\x78\x0d\x9e\x0c\xb9\xf3\xd3\x49\xa6\xa7\xc5\x80\x00\xb1\x37\xdd\xae\xe3\x3a\x4e\xd5\xa9\xb8\x54\x11\xff\xff\xf6\xcd\xcb\xdb\x9f\xdf\x7e\x07\x55\xa8\x75\x7e\x25\xe2\x1f\x68\x34\x65\xc6\xc8\xb0\xfc\x0a\x40\x54\x84\x32\x2e\x00\x44\x50\x41\x53\xfe\xb6\x6d\x1a\x0a\xf0\x8e\x1a\xeb\x82\xe0\x1d\xd8\x39\xd4\x14\x10\x8a\x0a\x9d\xa7\x90\xb1\x36\x6c\x92\xe7\x6c\xba\x65\xb0\xa6\x8c\x6d\x15\xdd\x47\x2e\x83\xc2\x9a\x40\x26\x64\xec\x5e\xc9\x50\x65\x92\xb6\xaa\xa0\xe4\x68\x7c\x06\xca\xa8\xa0\x50\x27\xbe\x40\x4d\xd9\x2a\x7d\x36\x1c\xa5\x95\xb9\x83\xca\xd1\x26\x63\x55\x08\x8d\x7f\xc1\x79\x8d\x1f\x0a\x69\xd2\xb5\xb5\xc1\x07\x87\x4d\x34\x0a\x5b\xf3\x11\xe0\xd7\xe9\x75\xfa\x25\x2f\xbc\x3f\x61\x69\xad\x4c\x5a\x78\xcf\xc0\x91\xce\x98\x0f\x3b\x4d\xbe\x22\x0a\x5d\xe2\x7c\xc8\x5c\xac\xad\xdc\xf5\xcf\x36\xb8\x85\x42\xa3\xf7\x19\x33\xb8\x5d\xa3\x83\xee\x2f\x91\xb4\xc1\x56\x07\x06\xce\x6a\x3a\x6e\xaa\x12\x83\xb2\xa6\x8f\x1a\x40\x48\x35\x72\x63\xe2\xa8\x0c\xb9\x64\xa3\x5b\x25\x47\x9f\xb9\x57\x7f\x74\x8c\x83\xdc\xc4\x27\x86\xd4\x86\x60\x0d\x84\x5d\x43\x19\xeb\x0c\xb6\xa0\x05\x5b\x96\x9a\xa0\xb0\x5a\x63\xe3\x49\x32\x90\x18\xb0\x87\x63\x08\x1d\x3e\xc0\xe8\xca\x58\xb4\x4f\x3a\x36\x03\x74\x0a\x13\xfa\xd0\xa0\x91\x24\x33\xb6\x41\x1d\x7d\x8f\x68\x8c\xde\x59\x3d\x3e\x6a\x16\x1a\x80\xf0\x0d\x9a\x21\x18\xef\x12\x6b\xf4\x8e\xe5\xb7\x5d\x38\x27\x61\x04\x8f\x7e\x17\xa8\xaa\xb0\x26\x39\x1e\xff\x4f\xb9\x0a\xde\x49\x39\xc3\x70\xa1\xeb\xda\xa1\x91\x2c\xff\xd4\xac\x7d\xf3\xf5\xe5\xdf\xee\xaa\x24\x37\x6d\x5d\xa3\xdb\x09\x8e\x93\x3a\x73\xa9\xb6\x8b\xb2\x2b\x39\x2a\x7a\x7a\x51\xba\x2a\x0d\xaf\xd9\x58\xb5\x59\x88\xad\x9e\xc4\x38\xb8\x1a\xdc\xb2\xfc\xea\x7f\xfd\x95\xc9\x05\xf6\x77\x86\xb3\x7c\xae\x48\xa9\x77\x4d\x15\x65\x81\x71\x95\x54\xb6\x1e\xaa\x5d\x29\x29\xc9\x64\x2c\xb8\x96\x46\xd1\xe0\x7b\x5b\x53\x4c\x48\x70\xad\xe6\x12\xb6\xfa\x91\x2c\x27\x86\xe0\x06\x87\xe5\xb9\x6b\x71\xba\x34\x76\x4c\x6d\xed\x08\x65\xe1\xda\x7a\x3d\xbd\x2e\x5a\x3d\xdc\x4f\x54\xa0\x9a\xcd\x32\x3e\x1f\xee\x1f\x63\x1b\x2b\x89\xef\xf7\x90\xbe\xfa\x45\x1a\x38\x1c\x58\x3e\x31\x9e\x72\x28\x60\x11\xd4\x96\x58\x3e\xf4\xce\x13\x4d\x70\x3b\xca\x26\xaa\x55\xfe\x66\x4b\x2e\xf6\x49\xc1\xab\xd5\x88\x37\x3d\x11\xec\x06\x26\x21\xc0\x7d\xa5\x8a\x0a\x1c\x1a\xc0\x70\xdc\xf8\x26\xc0\xe1\xf0\x42\xf0\x66\xa4\x06\x5c\xc7\x5e\xd0\x85\xd5\x19\xc7\xdf\x64\x6d\x9d\x24\x47\xb2\x37\x7d\x70\xaa\x19\xad\xc2\x1a\x49\xc6\x8f\x76\x65\xb7\xb3\x46\x24\x82\xcb\x45\x90\xf9\xcb\x0a\x4d\x49\x12\x04\x0f\xf2\x08\xc4\x20\x06\x30\x6a\x14\x61\x1e\xdc\x43\xe6\xcd\x9d\x6a\x9a\x25\x73\x00\x2f\x32\x5f\xa1\xd2\x4b\x62\x8f\x5d\xe4\xdd\xda\x80\x7a\x4e\xeb\xa0\x33\x2c\xc1\x8f\x79\x9f\x0a\x73\x9d\xbf\xb6\xa5\x17\xbc\xba\xfe\xf3\x5d\xdd\xd9\xfb\xf9\xed\x9d\x9d\xa0\x13\x5f\x27\xab\xd8\xb5\x93\x5a\x26\xab\xb9\xe7\xbc\x67\x9c\xa7\x9e\xb8\xab\x45\x5f\xde\xef\x5d\xac\x08\xa4\xaf\x6d\xf9\xfe\x47\xf2\x1e\x4b\xf2\x87\xc3\xbc\x55\x36\xf9\x7e\x9f\x46\x29\x9a\x25\x99\xb4\xa7\x87\xde\x3f\xd9\x50\x29\x53\x82\x3b\xbe\x99\x24\xd3\x73\x4c\x23\x67\xc4\x65\xef\x3b\xd3\x24\xae\x06\xae\xda\x40\xfa\x8e\xbc\x6d\x5d\x41\xfe\xfd\x58\xe0\x49\x45\x3a\xec\xbf\x5e\x93\x65\x8e\x4f\xa8\xcb\xd3\xd5\x9d\x53\x1f\xd1\xfa\x74\x7f\x27\x62\xf7\xe0\xc7\xa3\x76\x9f\xd0\xbf\x2f\x77\xdf\xf4\x66\x6a\xf7\xd8\xc7\xa3\xf6\x32\xc9\xbf\x5f\xed\xc5\x86\x68\xfa\xc1\x6d\x7c\xd6\x19\xa4\x72\xc0\xfb\xe5\xc6\xda\x40\xee\x38\x99\x75\xcb\xcb\xe3\xfc\x23\x25\xe8\x15\x7a\xce\x2e\xcf\x7f\x73\xef\x2f\x2e\xcd\x78\xcb\x91\x7b\x3a\xe0\x0d\x1f\x45\x3e\xd0\x96\xd2\x3b\xaa\x9b\x74\xa3\x38\xcb\x7f\xfb\x15\x3e\x7f\xb6\xfa\x0a\x12\xb8\x89\x3b\xf0\x03\xd5\xcd\x5f\x19\xe1\x3a\x41\xba\x6f\xa5\xee\x13\x49\xf0\xee\x3b\xf2\xf7\x00\x00\x00\xff\xff\x84\x86\xc9\x1a\x58\x0e\x00\x00"

func dataReport_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataReport_handlerTemplate,
		"data/report_handler.template",
	)
}

func dataReport_handlerTemplate() (*asset, error) {
	bytes, err := dataReport_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/report_handler.template", size: 3672, mode: os.FileMode(420), modTime: time.Unix(1502125358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index_handler.template":  dataIndex_handlerTemplate,
	"data/node_handler.template":   dataNode_handlerTemplate,
	"data/report_handler.template": dataReport_handlerTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index_handler.template":  &bintree{dataIndex_handlerTemplate, map[string]*bintree{}},
		"node_handler.template":   &bintree{dataNode_handlerTemplate, map[string]*bintree{}},
		"report_handler.template": &bintree{dataReport_handlerTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
