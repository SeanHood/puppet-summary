// Code generated by go-bindata.
// sources:
// data/index_handler.template
// data/node_handler.template
// data/report_handler.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndex_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\xfd\x72\xd3\x48\x12\xff\x9b\x3c\x45\xef\xb0\xac\xed\xba\x48\x72\x08\x0b\x59\x23\xbb\x2a\x15\xd8\xc0\x5e\x80\x00\x61\xb9\xdd\x2d\xea\x18\x6b\xda\xd2\x84\xd1\x8c\x32\x33\xb2\xe3\x73\xf9\x81\xee\x35\xee\xc9\xae\xf4\x69\xd9\x96\x0d\xdc\x56\x5d\xd5\x1d\xa1\x8a\x68\x66\xfa\xbb\x7f\xdd\xf3\x11\xff\xbb\x27\xaf\xce\xae\x7e\xbb\x7c\x0a\x91\x8d\xc5\xe8\xc0\xcf\x7e\x81\xa0\x32\x1c\x12\x94\x64\x74\x00\xe0\x47\x48\x59\xf6\x01\xe0\x5b\x6e\x05\x8e\x5e\x2a\x86\x70\xc1\x8d\xf5\xbd\x62\xa2\x58\x8c\xd1\x52\x08\x22\xaa\x0d\xda\x21\x49\xed\xc4\x39\x21\xcd\x25\x49\x63\x1c\x92\x29\xc7\x59\xa2\xb4\x25\x10\x28\x69\x51\xda\x21\x99\x71\x66\xa3\x21\xc3\x29\x0f\xd0\xc9\x07\x87\xc0\x25\xb7\x9c\x0a\xc7\x04\x54\xe0\xf0\xc8\xed\x57\xa2\x04\x97\x9f\x20\xd2\x38\x19\x92\xc8\xda\x64\xe0\x79\x31\xbd\x0d\x98\x74\xc7\x4a\x59\x63\x35\x4d\xb2\x41\xa0\x62\xaf\x9e\xf0\x8e\xdd\x63\xf7\xa1\x17\x18\xb3\x9a\x73\x63\x2e\xdd\xc0\x18\x02\x1a\xc5\x90\x18\x3b\x17\x68\x22\x44\x5b\xe9\x31\x81\xe6\x89\x05\xa3\x83\x42\x91\x19\x78\x5e\xa0\x18\xba\xd7\x37\x29\xea\x79\xae\xa1\xf8\x74\x8e\xdc\xa3\xfb\xee\x83\x5c\xe2\xb5\x21\xc0\xa5\xc5\x50\x73\x3b\x1f\x12\x13\xd1\xe3\x93\x07\x8e\x9c\x9e\xd2\xfe\x5f\x1e\xbe\x0e\x7f\x0a\xc4\xec\xb7\xb3\xf3\xf3\xcb\xe4\xc9\xeb\x8b\x5f\x93\x8b\x97\xb2\x3f\x79\x43\xdf\xbc\xba\x7e\x76\x63\x8e\x8e\xed\x83\xf3\xf0\xfa\xf8\xe9\x3f\x7e\xec\xff\x4d\x9e\xbf\xbe\x09\x3c\x7d\xf2\x22\x92\x6f\x9e\xfc\x4e\x20\xd0\xca\x18\xa5\x79\xc8\xe5\x90\x50\xa9\xe4\x3c\x56\xa9\x21\x23\xdf\x2b\xec\xdc\x63\xf4\x97\x85\xe7\x91\x77\xbd\x19\x9d\x76\x5f\xae\x82\x1f\x9f\xbf\xe6\xe3\xfe\xfd\x47\x37\xd3\xf9\xf5\xdb\x17\x93\x67\xd7\xaf\x5e\xd0\x8b\x4f\x93\xf4\xfd\xaf\xb7\xbf\xdf\xbe\xbb\x94\x67\xbf\x9c\x3e\x12\xf7\xe3\xb3\xf7\x2f\x9f\x27\xe7\x3f\xc5\xe7\x67\x4f\x4e\x66\xe7\x2f\x9f\x07\x97\x4f\x1e\x5d\xdd\xd2\x3f\xe5\x4b\x40\xe5\x94\x9a\x6b\x93\x3b\x40\x8d\x41\x6b\x4a\xa6\xd5\x52\x69\xfa\x0e\x71\x76\x9e\xe0\x90\x58\xbc\xb5\xde\x35\x9d\xd2\x62\xb6\xcc\x39\xcc\xb8\x64\x6a\xe6\x2a\x29\x14\x65\x30\x84\x49\x2a\x03\xcb\x95\x84\x6e\x0f\x16\x07\x05\x0d\x80\xe7\xad\xbe\xe0\x3d\x42\xa2\x92\x54\x50\x8b\x60\x23\x04\x4b\xc7\x02\x0d\x70\x09\x2a\xd5\x60\x31\x4e\xb2\x25\x27\x44\x89\x9a\x66\xb2\x1a\xbc\x9a\xda\x08\x35\xd8\x88\x4a\x88\xe8\x94\xcb\x10\xac\x82\x4f\x88\x09\x50\x30\x98\x50\x9d\x49\x0d\x54\x2a\x2d\x44\xa8\xb1\xc1\x3a\x43\x08\xa8\x04\x83\x08\x91\x9a\x41\x4c\xe5\x1c\xb4\x9a\x99\xcc\x06\x8d\x40\x35\x66\x26\xac\x0c\x6a\xb0\x52\xc9\x32\x95\x16\x42\x3e\x45\x03\xa9\xc9\x2d\x2d\xb4\x70\xc9\xb8\xc6\xc0\x8a\xb9\xbb\xed\x6d\x10\x51\x19\x22\x03\x80\x21\x7c\xdf\xed\xdc\x2d\xc7\x7f\xcf\x35\x80\xd5\x9d\x9e\x2b\x50\x86\x36\x02\x07\x8e\x1e\x57\x5c\xa9\xac\xf8\x0a\xae\x7a\xfc\x19\xbe\x09\xe5\x22\x57\x56\xf2\x15\xe3\x5d\x4c\xad\xb9\x79\x97\xb0\x46\x5a\x9c\xac\x8f\xa1\x36\x30\x51\x1a\x3e\x96\x46\x7c\x84\x1f\xe0\x63\x21\xfa\x63\x8b\xcb\x7c\x02\xdd\xda\xef\x11\xf4\xa1\x07\x8b\x35\xdf\xf3\xb0\x75\x7a\x6e\xd6\x36\x57\x94\x3d\x58\x56\x12\x4a\x19\xa5\x37\x4d\x11\xa5\x43\xeb\x12\x4a\xba\x1e\xc0\xb2\xf6\x69\x4a\x75\xde\x56\x2d\x0c\x41\xe2\x0c\xce\x72\xa4\xff\xf2\xd6\x3d\xcb\x26\xbb\x24\x5f\x3b\x53\xd2\x52\x2e\x51\x93\xc3\x83\x3b\xb0\xf7\x67\x71\xb0\x7f\x7d\xf5\x43\x25\x8f\x73\xd0\x3e\x95\x59\xd8\xd9\x00\x26\x54\x18\x3c\x3c\xb8\xb3\x53\x05\xa3\x96\x0e\xe0\x8f\x2f\x56\x91\x99\x73\xa7\x5d\x5c\x56\xaa\x03\x20\x4c\xa5\x61\x24\x53\x9b\x39\xd6\x4e\x68\x2c\xd5\xf6\x54\x86\x02\x07\xf0\xb0\xbf\x93\xcc\x2a\x25\xae\x78\x72\x56\x6c\x3b\x03\x20\x0b\x81\x21\x4a\x76\x85\xb7\x76\x39\x80\xc5\x7c\x09\x0e\xf8\xc6\x6a\x25\xc3\xd1\xdd\x04\x75\x80\xd2\xde\x03\xdf\x2b\xa7\xf6\x18\x10\xa9\xd9\x73\x79\x91\x4b\x1b\x80\xd5\x29\xee\x24\xcd\xe2\x73\xa9\xb8\xb4\x26\x8b\xd2\x9d\x2d\xaa\xc5\x7c\xb0\x2a\x99\x6c\x1b\x64\x78\x7b\x41\xc7\x28\x06\x40\x6a\x9b\xc8\x21\xac\x4c\x1f\x00\x79\x57\x31\x90\x43\x08\x94\x50\x7a\x00\x9d\xbb\x78\x92\xfd\xeb\xc0\xf2\x70\x87\x9a\x02\x6b\x5f\xaa\xe3\xe7\x9c\xba\xa1\x40\x23\xeb\x1c\xee\x96\x5e\xbb\xf0\x85\xf2\xcf\xb6\x3d\x08\x1e\xe0\xf1\xe4\xb8\x03\xcb\x5d\xc1\xfc\xb0\x07\x88\x90\xb3\xed\x5a\xfb\xf0\xb9\x22\x59\xf6\x1e\x37\xfa\x9e\xb6\xae\x46\xc9\x50\x77\xab\xe9\xb2\x3c\x9b\x9b\x8c\xef\x55\x27\x25\x7f\xac\xd8\xbc\xdc\x77\x24\x9d\x42\x20\xa8\x31\x43\x22\xe9\x74\x4c\x35\x14\xbf\x1c\x86\x13\x9a\x0a\x4b\x40\x2b\x81\xf9\x22\x0f\xf3\x62\xab\x76\x23\xf0\x19\xaf\x79\x83\xaa\xbe\x9d\x89\x48\x39\xab\x69\xd6\xa9\x4a\xd1\x45\xa7\x6b\xd0\x64\x26\xa5\xd6\x2a\x59\xee\x7f\xc5\x80\x6c\xb0\x59\x15\x86\x22\xdb\x70\x84\xa0\x89\x41\x46\x72\xb4\x96\xd3\x99\x09\xc5\x7c\x35\x4d\x75\x98\x1d\xf4\xee\x16\xdc\x04\xa8\xe6\xd4\xc1\xdb\x84\x4a\x86\x6c\x48\xf2\x56\x51\xce\x66\xd6\x6b\x25\x6a\x55\x6b\xa6\x65\x9b\x73\x42\x65\x65\x8c\xd1\x8e\x92\x62\x4e\x46\x57\x85\x39\xab\xc0\xf8\x5e\x46\xb7\x87\x95\x07\x4a\x3a\xb9\xf8\xff\x16\xa9\xef\x15\xa1\x5c\x9b\xa3\x1b\x71\x1d\x6b\x2a\x19\x19\xfd\x20\xc7\x26\x79\xbc\xff\xff\xcb\x34\x49\xd0\x3a\x6f\xd3\x38\xa6\x7a\xee\x7b\xb4\x91\x67\x8f\xf1\xe9\x46\xda\x39\xab\x23\xba\x02\x4a\x91\xa5\x0a\x66\x75\xd6\xd6\x4c\x4c\x45\xc3\xc6\x8a\x54\xd2\x29\x19\x15\x85\xe1\x0b\x3e\xf2\x69\x79\xce\xf6\xc8\x68\x3d\x22\xa1\x98\x27\x51\x16\x16\xa8\xbf\x9c\x48\xc5\x55\xb6\x23\xce\x18\xca\x21\xc9\x1a\x61\x1d\x34\x78\xa6\x62\xcc\x1c\xf2\x3d\xc1\xd7\x43\x98\x8a\x1d\x5e\x36\x06\xbe\x27\x69\xf5\xd9\x56\x16\x64\x54\xed\x97\x7e\x74\x54\xdc\x50\xea\x20\x46\x47\xab\xc5\x2a\x6a\x1b\x9b\x26\xe4\x17\x80\x21\x89\x90\x87\x91\x1d\xc0\xfd\x7e\x3f\xb9\x7d\x0c\xf9\x65\x64\x00\x27\xfd\x7b\x8f\x21\xa6\x3a\xe4\xd2\x11\x38\xb1\x83\xa3\xc6\x84\xce\x39\x8e\xfa\xf7\x32\x57\x9b\xc6\x27\x65\xc6\x7d\x2f\x59\xe9\xdf\x0a\xbc\x63\xe9\xd8\x34\xcb\x59\xf0\x8a\x82\x06\x96\x4f\xb3\x08\xd2\xf5\x42\xb4\x74\x4c\xca\xd4\xdc\xa5\x42\x90\xd1\xa9\x10\xdb\x91\x2d\x53\xb8\x93\xb3\x68\xff\x64\x54\x34\xf6\xf5\x04\x8f\x29\x0b\x91\xe4\x81\x6a\x1e\x53\xea\x64\x7e\xbd\xb6\x6a\x83\x1a\x95\x7d\x7e\xa7\xbe\xb5\x93\xd5\x9f\x50\x58\x6f\xa2\x64\x54\x6f\x8f\xb5\x94\x4d\x71\x05\x06\x0f\x5a\xfa\x6e\x76\x70\x2c\x2f\xaa\xcd\x24\x7d\xe7\x38\x70\x2a\x04\x38\x4e\x4b\x45\x66\x39\x69\xf2\x27\x54\x22\x4c\x28\xcb\xcf\xe4\x55\x52\x9b\x15\x50\x1c\x6a\x4b\xd6\xe2\x88\xdb\x14\x20\xca\x53\xbc\x33\x56\x9a\xa1\x46\x56\x0e\x8d\xd5\x3c\xa9\x47\x81\x92\x0c\xa5\xa9\xc7\x91\x9a\xe2\x56\xa3\xb5\x7a\xb4\x71\x34\xf3\x6d\x94\x97\x8b\xef\xd9\xa8\x6d\xed\xad\xa5\x76\xf7\x22\xa2\xdc\x5e\xf3\xbd\x4d\x35\x8b\x85\xce\x12\x00\xee\x72\xb9\x69\xcf\xd6\x49\x71\xb1\xe0\x13\xc0\x1b\x70\x73\xcd\x50\x02\x90\xc0\x72\x59\x85\x84\x65\xb2\x34\x81\xc5\x02\x50\x32\xd8\x90\xd9\x26\xa3\x82\x42\x43\x08\x97\x13\x45\x60\x8f\x8c\x1c\x59\x65\x03\x94\x8a\xa1\xb7\x58\xb8\x3f\xdf\x30\xb9\x5c\x92\xed\x50\xb0\x51\xbd\xea\x7b\x96\xed\x20\xc8\xad\xd9\x4b\x71\x6a\xdb\x96\xdb\x02\x8a\x92\xad\x19\xed\x7b\x79\xda\xb7\x3a\xe9\x3a\x66\xcb\x62\x6f\x85\x6d\x15\xe8\x36\xe4\xee\xc2\x6b\xf3\x56\xf6\x6d\x40\x76\x37\x3c\x37\xcd\xde\x84\xeb\xff\x18\xa0\xfe\x73\x90\x55\x2d\xbe\x15\x65\x75\x29\x7e\x0d\xcc\xd6\x9e\x0c\xbe\x4d\x9c\x35\x5a\xd8\x2e\xa0\x15\x2d\xed\x9b\x81\x59\xbd\xad\xb7\x03\x6d\x75\x00\xf8\x2a\xa8\x6d\xbc\x4f\x7d\x9b\x60\x6b\xc4\xae\x05\x6e\xff\xc7\x08\x5b\x1b\xb4\x1e\xe4\xf7\xcc\x45\x1a\xbc\x7a\x30\x51\xca\xa2\x2e\x36\xc9\xfc\x73\xc7\x95\xbd\x79\x83\x69\xd8\xb7\x46\x21\x9c\x98\xd5\x7f\x4c\x69\xb1\x77\x07\xc7\x83\x4d\xd4\xad\x5f\x3e\xb6\x93\xd5\xbc\xf4\x55\x4f\xee\xc6\xe2\x14\xdd\x4f\x18\x27\xee\x84\x7b\x64\xf4\xaf\x7f\xc2\xfd\xfe\xd1\x23\x70\xe0\x6d\xb6\x02\x7f\xc5\x38\x69\xbb\xd6\x6d\x5e\xec\xb6\x2f\xb0\xeb\x11\x2f\x82\x54\x8f\xbf\xe4\xb9\x1e\xe0\xfb\x6e\xf5\x44\xdf\xed\x35\x9e\x35\xbf\xef\x76\xdc\xea\xa1\xf8\x8f\x1a\xad\x1f\x3a\x3d\x17\x69\x10\xb5\xf3\x64\x5c\x36\xe2\xa6\xe7\x06\xc6\x74\x3b\x41\xaa\x8d\xd2\x9d\xc3\x4e\xa2\xb8\xb4\xa8\x3b\x3d\x37\x2f\xe4\xee\x7a\xcc\x76\x88\x6a\x8a\xa3\x8c\x9d\x65\x41\xef\x76\x8a\xa3\x7f\x67\xf5\xb2\x54\xfc\x2c\x0f\xbf\x5a\xa6\xc6\x58\x4d\xf1\x33\x62\x7b\x6e\x20\x78\xf0\xa9\xbb\x4f\x20\x53\x41\x1a\xa3\xb4\xae\x50\x41\xfe\xc6\x92\xbf\xb6\x97\x86\x5b\xab\xbb\x9d\x3a\x7c\xdb\x0a\xd6\x87\xcd\xe5\xc6\xeb\xd9\xea\x73\xfd\xad\xac\x78\x22\xf3\xbd\xe2\xef\x8e\xff\x0e\x00\x00\xff\xff\x40\xca\x99\x6f\x88\x1c\x00\x00"

func dataIndex_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataIndex_handlerTemplate,
		"data/index_handler.template",
	)
}

func dataIndex_handlerTemplate() (*asset, error) {
	bytes, err := dataIndex_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index_handler.template", size: 7304, mode: os.FileMode(420), modTime: time.Unix(1501785878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNode_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xeb\x72\xdb\xb8\x15\xfe\x1d\x3f\xc5\x29\x9a\xad\xe4\xa9\x45\x4a\x76\x76\xed\x55\x48\xcd\x64\xe4\x5d\x27\xdb\x5c\x9c\xd8\xdd\xeb\xe4\x07\x44\x1c\x89\x50\x40\x80\x06\x40\xd9\x2a\x47\x0f\xd4\xd7\xe8\x93\x75\xc0\x9b\x48\x59\x72\x33\xed\x4c\xfd\xc3\x02\xce\x0d\xdf\xb9\xe0\xe0\x30\xf8\xd3\xe5\x87\xe9\xed\x6f\xd7\x3f\x40\x6c\x13\x31\x39\x0a\xdc\x0f\x08\x2a\x17\x21\x41\x49\x26\x47\x00\x41\x8c\x94\xb9\x05\x40\x60\xb9\x15\x38\xc9\x73\xef\xc7\x3b\x26\x37\x9b\xc0\x2f\x09\x25\x33\x41\x4b\x21\x8a\xa9\x36\x68\x43\x92\xd9\xf9\xe0\x82\xb4\x59\x92\x26\x18\x92\x15\xc7\xfb\x54\x69\x4b\x20\x52\xd2\xa2\xb4\x21\xb9\xe7\xcc\xc6\x21\xc3\x15\x8f\x70\x50\x6c\x4e\x80\x4b\x6e\x39\x15\x03\x13\x51\x81\xe1\xc8\x1b\xd6\xa6\x04\x97\x5f\x20\xd6\x38\x0f\x49\x6c\x6d\x3a\xf6\xfd\x84\x3e\x44\x4c\x7a\x33\xa5\xac\xb1\x9a\xa6\x6e\x13\xa9\xc4\x6f\x08\xfe\x99\x77\xe6\x7d\xe7\x47\xc6\x6c\x69\x5e\xc2\xa5\x17\x19\x43\x40\xa3\x08\x89\xb1\x6b\x81\x26\x46\xb4\xf5\x39\x26\xd2\x3c\xb5\x60\x74\x54\x1e\x64\xc6\xbe\x1f\x29\x86\xde\xf2\x2e\x43\xbd\x2e\x4e\x28\x97\x83\x91\x37\x3a\xf5\x5e\x14\x16\x97\x86\x00\x97\x16\x17\x9a\xdb\x75\x48\x4c\x4c\xcf\x2e\x5e\x0c\xe4\xea\x15\x1d\xfe\xf5\xbb\x8f\x8b\xef\x23\x71\xff\xdb\xf4\xea\xea\x3a\xbd\xfc\xf8\xf6\xe7\xf4\xed\x7b\x39\x9c\x7f\xa2\x9f\x3e\x2c\x5f\xdf\x99\xd1\x99\x7d\x71\xb5\x58\x9e\xfd\xf0\x8f\x6f\x87\xbf\xca\xab\x8f\x77\x91\xaf\x2f\xde\xc5\xf2\xd3\xe5\xef\x04\x22\xad\x8c\x51\x9a\x2f\xb8\x0c\x09\x95\x4a\xae\x13\x95\x19\x32\x09\xfc\x12\xe7\x13\xa0\xbf\x2e\x3c\xe7\xfe\x72\x37\x3a\xfb\x7d\xb9\x8d\xbe\x7d\xf3\x91\xcf\x86\xa7\xe7\x77\xab\xf5\xf2\xe6\xdd\xfc\xf5\xf2\xc3\x3b\xfa\xf6\xcb\x3c\xfb\xe5\xe7\x87\xdf\x1f\xfe\x7e\x2d\xa7\x3f\xbd\x3a\x17\xa7\xc9\xf4\x97\xf7\x6f\xd2\xab\xef\x93\xab\xe9\xe5\xc5\xfd\xd5\xfb\x37\xd1\xf5\xe5\xf9\xed\x03\xfd\x9f\x7c\x89\xa8\x5c\x51\xb3\x34\x85\x03\xd4\x18\xb4\xa6\x52\xda\xb2\x2a\xe8\x07\xcc\xd9\x75\x8a\x21\xb1\xf8\x60\xfd\x25\x5d\xd1\x92\x5a\xe5\x1c\xee\xb9\x64\xea\xde\x53\x52\x28\xca\x20\x84\x79\x26\x23\xcb\x95\x84\xfe\x31\xe4\xa5\x08\xc0\x8a\xea\xa2\xca\x2d\x84\x20\xf1\x1e\xa6\xc5\xc1\x3f\xdd\x78\x53\x47\xec\x93\x82\x37\x55\xd2\x52\x2e\x51\x93\x13\xc8\x8f\x9e\x41\x71\x4f\xc6\x6e\x05\xe0\x0e\x1f\x03\xf9\x94\x49\xcb\x13\x84\xbe\xc1\x48\x49\x66\x8e\xc9\xd1\x33\xd8\x9c\xd4\xc7\x00\xd0\x07\x6e\x7e\x1d\xe7\x5b\x02\x80\xc6\x15\x6a\x83\x6c\x0c\x60\x75\x86\x5b\xd6\xe6\xe4\xe8\xe8\x19\x30\x6a\xe9\x18\xfe\x28\x4e\x29\xcf\x82\xc2\xe1\x31\x10\xc1\x25\x92\x93\x8a\xe6\xe4\xae\x15\x97\xd6\x38\x69\xe8\xfe\xe5\xb9\xa6\x72\x81\xe0\xbd\x57\x0c\x0d\x6c\x36\x95\x12\x40\x0e\x00\xeb\x31\xe4\xb9\x57\x61\xdf\x6c\xa0\x83\xb8\x36\x80\x92\x35\x6a\x9f\x8b\x5f\xb7\xfb\x5c\x0b\x6e\x8e\x5f\xd6\xcb\x22\x58\x9e\x46\xc9\x50\xf7\x6b\xf2\xa6\xcc\x58\x2b\x7f\x81\x5f\x37\xa1\x60\xa6\xd8\xba\x4a\xa9\xa4\x2b\x88\x04\x35\x26\x24\x92\xae\x66\x54\x43\xf9\x33\x60\x38\xa7\x99\xb0\x04\xb4\x12\x58\x30\xf9\x82\xba\x44\xd6\x89\x86\x80\xf1\x46\x37\xaa\x73\x35\x98\x8b\x8c\xb3\x46\xa6\x2b\x55\x99\x76\x38\x50\xb7\x64\x1c\xa4\xcc\x5a\x25\xab\xd2\x2a\x37\x64\x47\xcd\xaa\xc5\x42\x20\x44\x4a\x08\x9a\x1a\x64\xa4\xc8\x41\x45\x76\x10\x4a\x7a\x4d\xa6\x7a\xe1\x7a\xe8\x9f\x4b\x6d\x02\x54\x73\x3a\xc0\x87\x94\x4a\x86\x2c\x24\x73\x2a\x9c\x6c\x41\x75\xe8\xb5\x12\xcd\x51\x1d\x68\xae\xee\x53\x2a\x6b\x30\x46\x0f\x94\x14\x6b\x32\xb9\x2d\xe1\x6c\x03\x13\xf8\x4e\xee\x09\x55\x1e\x29\x39\x28\xcc\xff\xbf\x44\x03\xbf\x0c\x65\x87\x46\x77\xe2\x3a\xd3\x54\x32\x32\xf9\x8b\x9c\x99\xf4\xe5\xd3\xff\xaf\xb3\x34\x45\x3b\xb8\xc9\x92\x84\xea\x75\xe0\xd3\x56\x9e\x7d\xc6\x57\x3b\x69\xe7\xac\x89\xe8\xb6\x50\xca\x2c\xd5\x65\xd6\x64\xad\x03\x31\x13\x2d\x8c\xb5\xa8\xa4\x2b\x32\x29\x6f\x44\x20\xf8\x24\xa0\xd5\x13\xe6\x93\x49\x37\x22\x0b\xb1\x4e\x63\x17\x16\x68\x56\x83\x58\x25\x75\xb6\x63\xce\x18\xca\x90\xb8\xdb\xdf\x04\x0d\x5e\xab\x04\x9d\x43\x81\x2f\x78\x37\x84\x99\x38\xe0\x65\x6b\x13\xf8\x92\xd6\xcb\x7d\xd7\x62\x7b\x69\x54\xe3\xda\x4c\x23\x65\x91\xce\x92\x59\xfb\xba\x08\xfe\x98\x3f\xe0\x16\x13\xd2\xf1\x78\x3f\xdc\xc3\xda\x40\x23\xcb\x57\x48\x26\x79\x0e\xc5\xe4\x01\x6e\xf4\xd8\xea\x06\xbe\x6a\xdc\x0c\xe2\x51\x7b\x3e\x89\x47\x9d\x1b\xef\x92\xba\xd3\x9f\xa1\x78\xfa\x43\x12\x23\x5f\xc4\x76\x0c\xa7\xc3\x61\xfa\xf0\x12\x8a\x31\x64\x0c\x17\xc3\x6f\x5e\x42\x42\xf5\x82\xcb\x81\xc0\xb9\x1d\x8f\x5a\x04\x5d\x68\x8c\x86\xdf\xb8\x4c\xb4\x63\x9b\x56\x05\x19\xf8\x69\x43\xb3\x74\xe6\x1a\x40\xe9\x60\xb9\x29\xfe\x0f\x66\x4a\x33\xd4\xc8\xaa\xad\xb1\x9a\xa7\xcd\xce\xbd\x0c\x28\x4d\xb3\x8f\xd5\xaa\xd3\x7d\x02\xab\x3b\x09\xb7\xf1\xc4\xb5\xed\xc0\xb7\xf1\x2e\xfd\xc6\x52\x9b\x99\x7d\x9c\x5b\x9e\xec\xd5\xf8\x91\x72\x81\x6c\x1f\x67\x1a\xbb\x27\x62\x2f\xeb\x56\x59\x2a\xba\x8c\xc0\x6f\xa3\xec\xbe\x2f\x9b\x4d\xdb\x97\x76\xa7\xc8\x73\x3e\x07\xbc\x03\xcf\x01\x47\x20\xf3\x02\x0d\x81\xcd\xa6\x8e\x22\x73\x76\x34\x81\x3c\x07\x94\x0c\x5a\xa6\xf6\xa8\x47\x25\xe4\xb6\x3e\x97\x73\x45\x60\xbf\x7a\xd1\x87\xab\x8a\xd5\xe8\x06\x56\x3f\xcf\xbd\x37\x4e\xac\x7b\xdd\x2d\x9b\xe4\xf9\xf3\xed\x40\xcc\x1e\x73\x4b\x08\x07\xb9\xaf\xec\x41\x56\x99\x81\x83\xec\x2a\x0d\x07\xf9\x45\x2e\x76\xb9\xbb\xd9\x28\x1f\xeb\x86\xe7\xca\xac\xee\x0b\xdb\x16\xf1\xa8\xa2\xf7\x50\x62\x0d\x7e\xb5\x9c\x2b\x65\x51\x17\xd7\xad\x5c\x3e\xfd\xf0\x1e\x78\x72\x23\x25\x06\x09\x6b\xbe\x22\xe0\x40\xa7\xee\x4a\xbf\x78\xaa\x1b\xef\x3e\x8e\xed\x56\x5c\xcf\x98\xc6\xe2\x0a\xbd\x2f\x98\xa4\xde\x9c\xfb\x64\xf2\xaf\x7f\xc2\xe9\x70\x74\x0e\x03\xb8\x71\x1c\xf8\x1b\x26\xe9\x7f\xdf\x6c\xbf\x72\x12\x85\xe7\xfd\x7a\xf8\xec\x1f\xb7\x46\xc0\xe7\xfd\x9e\x57\x35\x0f\xfd\x47\x53\xa3\x9f\x7b\xc7\x1e\xd2\x28\xde\xaf\xe3\xb4\x6c\xcc\xcd\xb1\xfb\xde\xe9\xf7\xa2\x4c\x1b\xa5\x7b\x27\xbd\xd4\x4d\x80\xa8\x7b\xc7\x5e\xd1\x55\xfa\xdd\x39\xee\x80\xa9\xb6\x39\xca\xd8\xd4\xc5\xb6\xdf\x2b\x1b\x74\x6f\x3b\xd7\x95\x7f\xbb\xb3\xe1\x57\xd8\xd4\x98\xa8\x15\xfe\x07\xb3\xc7\x5e\x24\x78\xf4\xa5\xff\x94\x41\xa6\xa2\x2c\x41\x69\x3d\xa1\xa2\x62\xc4\x81\x70\x0b\xdc\x5a\xdd\xef\x35\xe1\x7b\x7c\x40\x77\xdb\x66\xb7\x66\xd7\xed\x72\xe7\x53\xc3\x2f\x6b\xbe\x1c\x5c\xcb\x79\x35\xf0\xcb\xef\xeb\x7f\x07\x00\x00\xff\xff\xfc\xef\x99\xd0\x70\x0f\x00\x00"

func dataNode_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataNode_handlerTemplate,
		"data/node_handler.template",
	)
}

func dataNode_handlerTemplate() (*asset, error) {
	bytes, err := dataNode_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/node_handler.template", size: 3952, mode: os.FileMode(420), modTime: time.Unix(1501694402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReport_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdd\x8e\xe4\x34\x13\xbd\xfe\xe6\x29\xea\x33\x12\x57\x24\xde\x66\x10\xac\x16\x27\x12\x5a\x58\x21\xb1\xb0\xab\x9d\xb9\xe1\x6a\x55\x1d\x57\x27\xd6\x38\x76\xb0\x9d\x9e\x6d\xb5\xfa\x81\x78\x0d\x9e\x0c\xb9\xf3\xd3\x49\xa6\xa7\xc5\x80\x00\xb1\x37\xdd\xae\xe3\x3a\x4e\xd5\xa9\xb8\x54\x11\xff\xff\xf6\xcd\xcb\xdb\x9f\xdf\x7e\x07\x55\xa8\x75\x7e\x25\xe2\x1f\x68\x34\x65\xc6\xc8\xb0\xfc\x0a\x40\x54\x84\x32\x2e\x00\x44\x50\x41\x53\xfe\xb6\x6d\x1a\x0a\xf0\x8e\x1a\xeb\x82\xe0\x1d\xd8\x39\xd4\x14\x10\x8a\x0a\x9d\xa7\x90\xb1\x36\x6c\x92\xe7\x6c\xba\x65\xb0\xa6\x8c\x6d\x15\xdd\x47\x2e\x83\xc2\x9a\x40\x26\x64\xec\x5e\xc9\x50\x65\x92\xb6\xaa\xa0\xe4\x68\x7c\x06\xca\xa8\xa0\x50\x27\xbe\x40\x4d\xd9\x2a\x7d\x36\x1c\xa5\x95\xb9\x83\xca\xd1\x26\x63\x55\x08\xcd\x0b\xce\x6b\xfc\x50\x48\x93\xae\xad\x0d\x3e\x38\x6c\xa2\x51\xd8\x9a\x8f\x00\xbf\x4e\xaf\xd3\x2f\x79\xe1\xfd\x09\x4b\x6b\x65\xd2\xc2\x7b\x06\x8e\x74\xc6\x7c\xd8\x69\xf2\x15\x51\xe8\xf2\xe6\x43\xe2\x62\x6d\xe5\xae\x7f\xb4\xc1\x2d\x14\x1a\xbd\xcf\x98\xc1\xed\x1a\x1d\x74\x7f\x89\xa4\x0d\xb6\x3a\x30\x70\x56\xd3\x71\x53\x95\x18\x94\x35\x7d\xd0\x00\x42\xaa\x91\x1b\xf3\x46\x65\xc8\x25\x1b\xdd\x2a\x39\xfa\xcc\xbd\xfa\xa3\x63\x1c\xe4\x26\x3e\x31\xa4\x36\x04\x6b\x20\xec\x1a\xca\x58\x67\xb0\x05\x2d\xd8\xb2\xd4\x04\x85\xd5\x1a\x1b\x4f\x92\x81\xc4\x80\x3d\x1c\x43\xe8\xf0\x01\x46\x57\xc6\x9a\x7d\xd2\xb1\x19\xa0\x53\x98\xd0\x87\x06\x8d\x24\x99\xb1\x0d\xea\xe8\x7b\x44\x63\xf4\xce\xea\xf1\x51\xb3\xd0\x00\x84\x6f\xd0\x0c\xc1\x78\x97\x58\xa3\x77\x2c\xbf\xed\xc2\x39\x09\x23\x78\xf4\xbb\x40\x55\x85\x35\xc9\xf1\xf8\x7f\xca\x55\xf0\x4e\xca\x19\x86\x0b\x5d\xd7\x0e\x8d\x64\xf9\xa7\x66\xed\x9b\xaf\x2f\xff\x76\x37\x25\xb9\x69\xeb\x1a\xdd\x4e\x70\x9c\xd4\x99\x4b\xb5\x5d\x94\x5d\xc9\x51\xd1\xd3\x8b\xd2\x55\x69\x78\xcd\xc6\xaa\xcd\x42\x6c\xf5\x24\xc6\xc1\xd5\xe0\x96\xe5\x57\xff\xeb\x6f\x4c\x2e\xb0\xbf\x32\x9c\xe5\x73\x45\x4a\xbd\x6b\xaa\x28\x0b\x8c\xab\xa4\xb2\xf5\x50\xed\x4a\x49\x49\x26\x63\xc1\xb5\x34\x8a\x06\xdf\xdb\x9a\x62\x42\x82\x6b\x35\x97\xb0\xd5\x8f\x64\x39\x31\x04\x37\x38\x2c\xcf\x5d\x8b\xd3\xa5\xb1\x63\x6a\x6b\x47\x28\x0b\xd7\xd6\xeb\xe9\x75\xd1\xea\xe1\x7e\xa2\x02\xd5\x6c\x96\xf1\xf9\x70\xff\x18\xdb\x58\x49\x7c\xbf\x87\xf4\xd5\x2f\xd2\xc0\xe1\xc0\xf2\x89\xf1\x94\x43\x01\x8b\xa0\xb6\xc4\xf2\xa1\x75\x9e\x68\x82\xdb\x51\x36\x51\xad\xf2\x37\x5b\x72\xb1\x4d\x0a\x5e\xad\x46\xbc\xe9\x89\x60\x37\x30\x09\x01\xee\x2b\x55\x54\xe0\xd0\x00\x86\xe3\xc6\x37\x01\x0e\x87\x17\x82\x37\x23\x35\xe0\x3a\xf6\x82\x2e\xac\xce\x38\xfe\x26\x6b\xeb\x24\x39\x92\xbd\xe9\x83\x53\xcd\x68\x15\xd6\x48\x32\x7e\xb4\x2b\xbb\x9d\x35\x22\x11\x5c\x2e\x82\xcc\x5f\x56\x68\x4a\x92\x20\x78\x90\x47\x20\x06\x31\x80\x51\xa3\x08\xf3\xe0\x1e\x32\x6f\xee\x54\xd3\x2c\x99\x03\x78\x91\xf9\x0a\x95\x5e\x12\x7b\xec\x22\xef\xd6\x06\xd4\x73\x5a\x07\x9d\x61\x09\x7e\xcc\xfb\x54\x98\xeb\xfc\xb5\x2d\xbd\xe0\xd5\xf5\x9f\xef\xea\xce\xde\xcf\x6f\xef\xec\x04\x9d\xf8\x3a\x59\xc5\xae\x9d\xd4\x32\x59\xcd\x3d\xe7\x3d\xe3\x3c\xf5\xc4\x5d\x2d\xfa\xf2\x7e\xef\x62\x45\x20\x7d\x6d\xcb\xf7\x3f\x92\xf7\x58\x92\x3f\x1c\xe6\xad\xb2\xc9\xf7\xfb\x34\x4a\xd1\x2c\xc9\xa4\x3d\x3d\xf4\xfe\xc9\x86\x4a\x99\x12\xdc\xf1\xcd\x24\x99\x9e\x63\x1a\x39\x23\x2e\x7b\xdf\x99\x26\x71\x35\x70\xd5\x06\xd2\x77\xe4\x6d\xeb\x0a\xf2\xef\xc7\x02\x4f\x2a\xd2\x61\xff\xf5\x9a\x2c\x73\x7c\x42\x5d\x9e\xae\xee\x9c\xfa\x88\xd6\xa7\xfb\x3b\x11\xbb\x07\x3f\x1e\xb5\xfb\x84\xfe\x7d\xb9\xfb\xa6\x37\x53\xbb\xc7\x3e\x1e\xb5\x97\x49\xfe\xfd\x6a\x2f\x36\x44\xd3\x0f\x6e\xe3\xb3\xce\x20\x95\x03\xde\x2f\x37\xd6\x06\x72\xc7\xc9\xac\x5b\x5e\x1e\xe7\x1f\x29\x41\xaf\xd0\x73\x76\x79\xfe\x9b\x7b\x7f\x71\x69\xc6\x5b\x8e\xdc\xd3\x01\x2f\x7e\x13\xf9\x17\x9c\xfb\x40\x5b\x4a\xef\xa8\x6e\xd2\x8d\xe2\x2c\xff\xed\x57\xf8\xfc\xd9\xea\x2b\x48\xe0\x26\xee\xc0\x0f\x54\x37\x7f\x65\x84\xeb\x04\xe9\xbe\x95\xba\x4f\x24\xc1\xbb\xcf\xc8\xdf\x03\x00\x00\xff\xff\x70\x5b\x20\x38\x57\x0e\x00\x00"

func dataReport_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataReport_handlerTemplate,
		"data/report_handler.template",
	)
}

func dataReport_handlerTemplate() (*asset, error) {
	bytes, err := dataReport_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/report_handler.template", size: 3671, mode: os.FileMode(420), modTime: time.Unix(1501784476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index_handler.template": dataIndex_handlerTemplate,
	"data/node_handler.template": dataNode_handlerTemplate,
	"data/report_handler.template": dataReport_handlerTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index_handler.template": &bintree{dataIndex_handlerTemplate, map[string]*bintree{}},
		"node_handler.template": &bintree{dataNode_handlerTemplate, map[string]*bintree{}},
		"report_handler.template": &bintree{dataReport_handlerTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

