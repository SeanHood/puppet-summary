// Code generated by go-bindata.
// sources:
// data/index_handler.template
// data/node_handler.template
// data/report_handler.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndex_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x7d\x73\xd3\x38\x1a\xff\x9b\x7e\x8a\x67\x05\x6c\x92\xb9\xda\x4e\x29\x0b\xdd\xe0\x64\xa6\xd3\xb2\x85\xbd\x02\x05\xca\x72\xbb\x0c\x73\x28\xd6\x93\x58\x45\x91\x5c\x49\x4e\x9a\xcb\xe4\x03\xdd\xd7\xb8\x4f\x76\x23\xbf\xc5\x49\x9c\x02\xb7\x33\x37\x73\x47\x98\xa1\x96\xf4\xbc\xe9\xf7\xfc\x24\x3d\xb2\xc3\x1f\x4e\x5f\x9d\x5c\xfe\x7e\xf1\x14\x62\x3b\x11\x83\xbd\xd0\xfd\x01\x41\xe5\xb8\x4f\x50\x92\xc1\x1e\x40\x18\x23\x65\xee\x01\x20\xb4\xdc\x0a\x1c\xbc\x54\x0c\xe1\x9c\x1b\x1b\x06\x79\x47\x3e\x38\x41\x4b\x21\x8a\xa9\x36\x68\xfb\x24\xb5\x23\xef\x88\xd4\x87\x24\x9d\x60\x9f\x4c\x39\xce\x12\xa5\x2d\x81\x48\x49\x8b\xd2\xf6\xc9\x8c\x33\x1b\xf7\x19\x4e\x79\x84\x5e\xd6\xd8\x07\x2e\xb9\xe5\x54\x78\x26\xa2\x02\xfb\x07\x7e\xb7\x34\x25\xb8\xfc\x0c\xb1\xc6\x51\x9f\xc4\xd6\x26\xa6\x17\x04\x13\x7a\x13\x31\xe9\x0f\x95\xb2\xc6\x6a\x9a\xb8\x46\xa4\x26\x41\xd5\x11\x1c\xfa\x87\xfe\xa3\x20\x32\x66\xd5\xe7\x4f\xb8\xf4\x23\x63\x08\x68\x14\x7d\x62\xec\x5c\xa0\x89\x11\x6d\xe9\xc8\x44\x9a\x27\x16\x8c\x8e\x56\x9e\x22\xc5\xd0\xbf\xba\x4e\x51\xcf\x33\x0f\xf9\xa3\x77\xe0\x1f\x3c\xf0\x1f\x66\x16\xaf\x0c\x01\x2e\x2d\x8e\x35\xb7\xf3\x3e\x31\x31\x3d\x3c\x7a\xe8\xc9\xe9\x31\xed\xfe\xe5\xd1\xeb\xf1\xcf\x91\x98\xfd\x7e\x72\x76\x76\x91\x9c\xbe\x3e\xff\x2d\x39\x7f\x29\xbb\xa3\x37\xf4\xcd\xab\xab\x67\xd7\xe6\xe0\xd0\x3e\x3c\x1b\x5f\x1d\x3e\xfd\xc7\x4f\xdd\xbf\xc9\xb3\xd7\xd7\x51\xa0\x8f\x5e\xc4\xf2\xcd\xe9\x1f\x04\x22\xad\x8c\x51\x9a\x8f\xb9\xec\x13\x2a\x95\x9c\x4f\x54\x6a\xc8\x20\x0c\xf2\x38\x6f\x09\xfa\xeb\xe0\x79\x1c\x5c\x6d\xa2\xd3\x3c\x97\xcb\xe8\xa7\xe7\xaf\xf9\xb0\xfb\xe0\xf1\xf5\x74\x7e\xf5\xf6\xc5\xe8\xd9\xd5\xab\x17\xf4\xfc\xf3\x28\x7d\xff\xdb\xcd\x1f\x37\xef\x2e\xe4\xc9\xaf\xc7\x8f\xc5\x83\xc9\xc9\xfb\x97\xcf\x93\xb3\x9f\x27\x67\x27\xa7\x47\xb3\xb3\x97\xcf\xa3\x8b\xd3\xc7\x97\x37\xf4\x4f\xcd\x25\xa2\x72\x4a\xcd\x95\xc9\x26\x40\x8d\x41\x6b\x0a\xa5\xd5\x50\x11\xfa\x0e\x73\x76\x9e\x60\x9f\x58\xbc\xb1\xc1\x15\x9d\xd2\xbc\xb7\xc8\x39\xcc\xb8\x64\x6a\xe6\x2b\x29\x14\x65\xd0\x87\x51\x2a\x23\xcb\x95\x84\x76\x07\x16\x7b\xb9\x0c\x40\x10\xac\x9e\xe0\x3d\x42\xa2\x92\x54\x50\x8b\x60\x63\x04\x4b\x87\x02\x0d\x70\x09\x2a\xd5\x60\x71\x92\xb8\x21\x6f\x8c\x12\x35\x75\xb6\x6a\xba\x9a\xda\x18\x35\xd8\x98\x4a\x88\xe9\x94\xcb\x31\x58\x05\x9f\x11\x13\xa0\x60\x30\xa1\xda\x59\x8d\x54\x2a\x2d\xc4\xa8\xb1\xa6\x3a\x43\x88\xa8\x04\x83\x08\xb1\x9a\xc1\x84\xca\x39\x68\x35\x33\x2e\x06\x8d\x40\x35\xba\x10\x56\x01\xd5\x54\xa9\x64\xce\xa5\x85\x31\x9f\xa2\x81\xd4\x64\x91\xe6\x5e\xb8\x64\x5c\x63\x64\xc5\xdc\xdf\x9e\x6d\x14\x53\x39\x46\x06\x00\x7d\xb8\xd7\x6e\xdd\x2d\xda\x7f\xcf\x3c\x80\xd5\xad\x8e\x2f\x50\x8e\x6d\x0c\x1e\x1c\x3c\x29\xb5\x52\x59\xea\xe5\x5a\x55\xfb\x0b\x7a\x23\xca\x45\xe6\xac\xd0\xcb\xdb\xbb\x94\x1a\x73\x73\x4a\x2d\x85\x19\xb6\x84\x00\x2e\x23\x91\x32\x2c\xf3\xc2\x94\x4c\xad\xe7\x36\x2b\xdb\x30\xd1\x3c\xad\xc6\x2a\xed\x72\xca\x4d\x06\x3e\x0c\x31\xa2\xa9\x41\x07\xfd\x8c\x9b\xd8\xa5\x0a\x6f\x72\xab\x0e\x67\xc6\x4d\x22\xe8\xbc\x66\x43\x8d\xe0\x53\x1e\xf5\x27\x50\x1a\x3e\x15\xf3\xfe\x04\x7c\x04\x38\x49\x6c\x13\xc6\xcc\x85\xdc\x87\x0f\x1f\xab\x19\xf1\x11\xb4\x6b\x20\x0e\xa0\x0b\x8e\x8c\x00\x35\x0d\x3f\x49\x4d\xdc\x86\xc5\xbc\xb7\x92\x74\x7b\x28\xc3\x9b\x73\x3a\x44\xd1\x03\x72\x37\x41\x1d\xa1\xb4\xf7\xc9\x3e\x08\x1c\xa3\x64\x97\x78\x63\x7b\x40\xde\x95\x0a\x64\x1f\x22\x25\x94\xee\x41\xeb\x2e\x1e\xb9\x7f\x2d\x58\x42\xa7\xf4\xb4\x5c\x0b\xa8\xc8\x4e\x19\xcd\x9d\xcd\x30\xf2\xf1\xaf\x8d\xe1\x97\x4c\xba\x16\x80\x46\xd6\xda\xdf\xed\x7d\x13\x8c\xba\x7b\xe7\xbd\x82\xe0\x2b\xfd\x9f\x6c\x23\x10\x3d\xc4\xc3\xd1\x61\x6b\x59\x8b\xa0\x99\x64\xef\x12\x56\x5b\xfb\x9e\x3b\x2d\x51\x1b\x18\xad\x65\xfc\xc7\x8a\x09\x0d\x39\x6f\x9a\xd2\xda\x02\xcb\xd6\x66\xab\xe3\xbb\xc3\x79\x25\xd9\xb9\x35\x25\xf5\x35\xb3\xae\x5f\xc8\x75\xb2\x29\x15\x06\xa6\x54\x67\x47\xb7\x85\x3e\x48\x9c\xc1\x49\xb6\x99\xfe\xfa\xd6\x3f\x71\x9d\x6d\x92\x8d\x9d\x28\x69\x29\x97\xa8\xc9\xfe\xde\x1d\xb8\xf5\x57\xe3\xe7\x17\x7e\x54\xf2\x49\xb6\x2f\x3e\x95\x6e\x65\x33\x47\x1d\x61\x70\x7f\xef\xce\x4e\x17\x2e\xd7\x3d\xf8\xf0\xd5\x2e\x5c\x38\x77\x9a\xcd\xb9\xd3\xa0\x07\x84\xa9\x74\x1c\xcb\xd4\xba\x89\x35\x0b\x1a\x4b\xb5\x3d\x96\x63\x81\x3d\x78\xd4\xdd\x29\x66\x95\x12\x97\x3c\x39\xc9\x4b\x9b\x1e\x90\xc5\x8a\x67\xcb\x1e\x2c\xe6\x4b\xf0\x20\x34\x56\x2b\x39\x1e\x54\x74\x84\x30\x28\xba\x6e\x09\x20\x56\xb3\xe7\xf2\x3c\xb3\xd6\x03\xab\x53\xdc\x29\xea\xf0\xb9\x50\x5c\x5a\xd3\xcb\x9e\x6f\x81\xd2\x71\x60\xf7\xe8\xc7\x2f\xa5\x79\xd9\x79\x52\x3b\x1c\xb4\xf5\x35\x4a\x86\xba\x5d\x76\x17\x04\xab\x9f\xc4\x61\x50\xd6\x93\xe1\x50\xb1\x79\x71\x38\x4b\x3a\x85\x48\x50\x63\xfa\x44\xd2\xe9\x90\x6a\xc8\xff\x78\x0c\x47\x34\x15\x96\x80\x56\x02\xb3\x41\x3e\xce\xe8\x52\x1e\xd9\x10\x32\x5e\xe9\x46\x25\x43\xbd\x91\x48\x39\xab\x64\xd6\xa5\x0a\xd3\xf9\x4a\xad\xc9\xb8\x90\x52\x6b\x95\x2c\x8a\x84\xbc\x41\x36\xd4\xac\x1a\x8f\x85\x3b\x95\x85\xa0\x89\x41\x46\x32\x8c\x8b\x6e\x17\x42\xde\x5f\x76\x53\x3d\x76\xe5\xf0\xdd\x5c\x9b\x00\xd5\x9c\x7a\x78\x93\x50\xc9\x90\xf5\x49\x46\xf6\xa2\xd7\x45\xaf\x95\xa8\x5c\xad\x85\xe6\x2a\x98\x84\xca\x32\x18\xa3\x3d\x25\xc5\x9c\x0c\x2e\xf3\x70\x56\xc0\x84\x81\x93\xbb\x45\x95\x47\x4a\x7a\x99\xf9\xff\x96\x68\x18\xe4\x50\xae\xf5\xd1\x0d\x5c\x87\x9a\x4a\x46\x06\x3f\xca\xa1\x49\x9e\xdc\xfe\xff\x45\x9a\x24\x68\xbd\xb7\xe9\x64\x42\xf5\x3c\x0c\x68\x2d\xcf\x01\xe3\xd3\x8d\xb4\x73\x56\x21\xba\x22\x4a\x9e\xa5\x92\x66\x55\xd6\xd6\x42\x4c\x45\x2d\xc6\x52\x54\xd2\x29\x19\xe4\x0b\x23\x14\x7c\x10\xd2\xe2\x36\x12\x90\xc1\x3a\x22\x63\x31\x4f\x62\x07\x0b\x54\x4f\x5e\xac\x26\x65\xb6\x63\xce\x18\xca\x3e\x71\x4b\xb9\x02\x0d\x9e\xa9\x09\xba\x09\x85\x81\xe0\xeb\x10\xa6\x62\xc7\x2c\x6b\x8d\x30\x90\xb4\x7c\x6c\x5a\x16\x64\x50\xee\xf8\x61\x7c\x90\xdf\xe3\x2a\x10\xe3\x83\xd5\x60\x89\xda\xc6\xb6\x0f\xd9\x2d\xa9\x4f\x62\xe4\xe3\xd8\xf6\xe0\x41\xb7\x9b\xdc\x3c\x81\xec\xca\xd6\x83\xa3\xee\xfd\x27\x30\xa1\x7a\xcc\xa5\x27\x70\x64\x7b\x07\xb5\x0e\x9d\x69\x1c\x74\xef\xbb\xa9\xd6\x83\x4f\x8a\x8c\x87\x41\xb2\xf2\xbf\x05\xbc\x67\xe9\xd0\xd4\x97\xb3\xe0\xa5\x04\x8d\x2c\x9f\x3a\x04\xe9\xfa\x42\xb4\x74\x48\x8a\xd4\xdc\xa5\x42\x90\xc1\xb1\x10\xdb\xc8\x16\x29\xdc\xa9\x99\x1f\x96\x64\x90\x57\x28\xeb\x09\x1e\x52\x36\x46\x92\x01\x55\x3f\x68\xab\x64\x7e\xbb\xb7\xb2\x12\x1b\x14\x05\xc9\x4e\x7f\x6b\x95\xc1\x9f\x70\x58\x55\x8b\x64\x50\xd5\x81\x95\x95\x4d\x73\x39\x07\xf7\x1a\xf6\x5d\x57\xf8\x14\xd7\xf9\x7a\x92\x7e\xf0\x3c\x38\x16\x02\x3c\xaf\x61\x45\xba\x9c\xd4\xf5\x13\x2a\x11\x46\x34\xaf\xd1\xcb\xa4\xd6\x57\x40\x5e\xf9\x17\xaa\xf9\x3d\xa0\x6e\x40\x14\x57\x1d\x6f\xa8\x34\x43\x8d\xac\x68\x1a\xab\x79\x52\xb5\x22\x25\x19\x4a\x53\xb5\x63\x35\xc5\xad\x8d\xd6\xea\xc1\x46\x71\x11\xda\x38\x5b\x2e\x61\x60\xe3\xa6\xb1\xb7\x96\xda\xdd\x83\x88\x72\x7b\x2c\x0c\x36\xdd\x2c\x16\xda\x25\x00\xfc\xe5\x72\x33\x9e\xad\x5a\x67\xb1\x70\x97\x88\x6b\xf0\x33\xcf\x50\x10\x90\xc0\x72\x59\x42\xc2\x9c\x2d\x4d\x60\xb1\x00\x94\x0c\x36\x6c\x36\xd9\x28\xa9\x50\x33\xc2\xe5\x48\x11\xb8\xc5\x46\xc6\xac\x62\x03\x94\x8a\x61\xb0\x58\xf8\xbf\x5c\x33\xb9\x5c\x92\x6d\x28\xd8\xa0\x1a\x0d\x03\xcb\x76\x08\x64\xd1\xdc\x2a\x71\x6c\x9b\x86\x9b\x00\x45\xc9\xd6\x82\x0e\x83\x2c\xed\x5b\x3b\xe9\x3a\x67\x8b\xc5\xde\x48\xdb\x12\xe8\x26\xe6\xee\xe2\x6b\xfd\xea\xfa\x7d\x50\x76\x37\x3d\x37\xc3\xde\xa4\xeb\xff\x18\xa1\xfe\x73\x92\x95\x5b\x7c\x23\xcb\xaa\xa5\xf8\x2d\x34\x5b\x7b\xaf\xf2\x7d\xf2\xac\xb6\x85\xed\x22\x5a\xbe\xa5\x7d\x37\x34\xab\x8e\xf5\x66\xa2\xad\x0a\x80\x6f\xa2\xda\xc6\x4b\xbc\xef\x93\x6c\x35\xec\x1a\xe8\xf6\x7f\xcc\xb0\xb5\x46\x63\x21\x7f\x4b\x5f\xac\x21\xa8\x1a\x23\xa5\x2c\xea\xfc\x90\xcc\x1e\x77\x5c\xd9\xeb\x37\x98\x5a\x7c\x6b\x12\xc2\x9b\xb0\xea\x93\x53\x43\xbc\x3b\x34\x1e\x6e\xb2\x6e\xfd\xf2\xb1\x9d\xac\xfa\xa5\xaf\xfc\x2e\x61\x2c\x4e\xd1\xff\x8c\x93\xc4\x1f\xf1\x80\x0c\xfe\xf5\x4f\x78\xd0\x3d\x78\x0c\x1e\xbc\x75\x23\xf0\x57\x9c\x24\x4d\xd7\xba\xcd\x8b\xdd\xf6\x05\x76\x1d\xf1\x1c\xa4\xaa\xfd\x35\xdf\x34\x00\xee\xb5\xcb\xef\x18\xed\x4e\xed\xc5\xdc\xbd\x76\xcb\x2f\xdf\xa6\x7f\xa8\xd8\xfa\xb1\xd5\xf1\x91\x46\x71\xb3\x8e\xd3\xb2\x31\x37\x1d\x3f\x32\xa6\xdd\x8a\x52\x6d\x94\x6e\xed\xb7\x12\xc5\xa5\x45\xdd\xea\xf8\xd9\x42\x6e\xaf\x63\xb6\xc3\x54\xdd\x1c\x65\xec\xc4\x81\xde\x6e\xe5\xa5\x7f\x6b\xf5\x66\x29\xff\x2d\xf7\xbf\xd9\xa6\xc6\x89\x9a\xe2\x17\xcc\x76\xfc\x48\xf0\xe8\x73\xfb\x36\x83\x4c\x45\xe9\x04\xa5\xf5\x85\x8a\xb2\x77\x2c\xd9\x27\x89\x22\x70\x6b\x75\xbb\x55\xc1\xb7\xed\x60\xbd\x59\x1f\xae\xbd\x3d\x5b\x3d\xae\xbf\x2b\xcb\x5f\x91\x85\x41\xfe\x75\xf6\xdf\x01\x00\x00\xff\xff\x10\x0b\x9b\xf1\xae\x1d\x00\x00"

func dataIndex_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataIndex_handlerTemplate,
		"data/index_handler.template",
	)
}

func dataIndex_handlerTemplate() (*asset, error) {
	bytes, err := dataIndex_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index_handler.template", size: 7598, mode: os.FileMode(420), modTime: time.Unix(1502125353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNode_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xeb\x72\xdb\xb8\x15\xfe\x1d\x3f\xc5\x29\x9a\xad\xe4\xa9\x45\x4a\x76\x76\xed\x55\x48\xcd\x64\xe4\x5d\x27\xdb\x5c\x9c\xd8\xdd\xeb\xe4\x07\x44\x1c\x89\x50\x40\x80\x06\x40\xd9\x2a\x47\x0f\xd4\xd7\xe8\x93\x75\xc0\x9b\x48\x59\x72\x33\xed\x4c\xfd\xc3\x02\xce\x0d\xdf\xb9\xe0\xe0\x30\xf8\xd3\xe5\x87\xe9\xed\x6f\xd7\x3f\x40\x6c\x13\x31\x39\x0a\xdc\x0f\x08\x2a\x17\x21\x41\x49\x26\x47\x00\x41\x8c\x94\xb9\x05\x40\x60\xb9\x15\x38\xc9\x73\xef\xc7\x3b\x26\x37\x9b\xc0\x2f\x09\x25\x33\x41\x4b\x21\x8a\xa9\x36\x68\x43\x92\xd9\xf9\xe0\x82\xb4\x59\x92\x26\x18\x92\x15\xc7\xfb\x54\x69\x4b\x20\x52\xd2\xa2\xb4\x21\xb9\xe7\xcc\xc6\x21\xc3\x15\x8f\x70\x50\x6c\x4e\x80\x4b\x6e\x39\x15\x03\x13\x51\x81\xe1\xc8\x1b\xd6\xa6\x04\x97\x5f\x20\xd6\x38\x0f\x49\x6c\x6d\x6a\xc6\xbe\x9f\xd0\x87\x88\x49\x6f\xa6\x94\x35\x56\xd3\xd4\x6d\x22\x95\xf8\x0d\xc1\x3f\xf3\xce\xbc\xef\xfc\xc8\x98\x2d\xcd\x4b\xb8\xf4\x22\x63\x08\x68\x14\x21\x31\x76\x2d\xd0\xc4\x88\xb6\x3e\xc8\x44\x9a\xa7\x16\x8c\x8e\xb6\x27\x45\x8a\xa1\xb7\xbc\xcb\x50\xaf\x8b\x13\xca\xe5\x60\xe4\x8d\x4e\xbd\x17\x85\xc5\xa5\x21\xc0\xa5\xc5\x85\xe6\x76\x1d\x12\x13\xd3\xb3\x8b\x17\x03\xb9\x7a\x45\x87\x7f\xfd\xee\xe3\xe2\xfb\x48\xdc\xff\x36\xbd\xba\xba\x4e\x2f\x3f\xbe\xfd\x39\x7d\xfb\x5e\x0e\xe7\x9f\xe8\xa7\x0f\xcb\xd7\x77\x66\x74\x66\x5f\x5c\x2d\x96\x67\x3f\xfc\xe3\xdb\xe1\xaf\xf2\xea\xe3\x5d\xe4\xeb\x8b\x77\xb1\xfc\x74\xf9\x3b\x81\x48\x2b\x63\x94\xe6\x0b\x2e\x43\x42\xa5\x92\xeb\x44\x65\x86\x4c\x02\xbf\xc4\xf9\x04\xe8\xaf\x0b\xcf\xb9\xbf\xdc\x8d\xce\x7e\x5f\x6e\xa3\x6f\xdf\x7c\xe4\xb3\xe1\xe9\xf9\xdd\x6a\xbd\xbc\x79\x37\x7f\xbd\xfc\xf0\x8e\xbe\xfd\x32\xcf\x7e\xf9\xf9\xe1\xf7\x87\xbf\x5f\xcb\xe9\x4f\xaf\xce\xc5\x69\x32\xfd\xe5\xfd\x9b\xf4\xea\xfb\xe4\x6a\x7a\x79\x71\x7f\xf5\xfe\x4d\x74\x7d\x79\x7e\xfb\x40\xff\x27\x5f\x22\x2a\x57\xd4\x2c\x4d\xe1\x00\x35\x06\xad\xa9\x94\xb6\xac\x0a\xfa\x01\x73\x76\x9d\x62\x48\x2c\x3e\x58\x7f\x49\x57\xb4\xa4\x56\x39\x87\x7b\x2e\x99\xba\xf7\x94\x14\x8a\x32\x08\x61\x9e\xc9\xc8\x72\x25\xa1\x7f\x0c\x79\x29\x02\xb0\xa2\xba\x28\x73\x0b\x21\x48\xbc\x87\x69\x71\xf0\x4f\x37\xde\xd4\x11\xfb\xa4\xe0\x4d\x95\xb4\x94\x4b\xd4\xe4\x04\xf2\xa3\x67\x50\x5c\x94\xb1\x5b\x01\xb8\xc3\xc7\x40\x3e\x65\xd2\xf2\x04\xa1\x6f\x30\x52\x92\x99\x63\x72\xf4\x0c\x36\x27\xf5\x31\x00\xf4\x81\x9b\x5f\xc7\xf9\x96\x00\xa0\x71\x85\xda\x20\x1b\x03\x58\x9d\xe1\x96\xb5\x39\x39\x3a\x7a\x06\x8c\x5a\x3a\x86\x3f\x8a\x53\xca\xb3\xa0\x70\x78\x0c\x44\x70\x89\xe4\xa4\xa2\x39\xb9\x6b\xc5\xa5\x35\x4e\x1a\xba\x7f\x79\xae\xa9\x5c\x20\x78\xef\x15\x43\x03\x9b\x4d\xa5\x04\x90\x03\xc0\x7a\x0c\x79\xee\x55\xd8\x37\x1b\xe8\x20\xae\x0d\xa0\x64\x8d\xda\xe7\xe2\xd7\xed\x3e\xd7\x82\x9b\xe3\x97\xf5\xb2\x08\x96\xa7\x51\x32\xd4\xfd\x9a\xbc\x29\x33\xd6\xca\x5f\xe0\xd7\x5d\x28\x98\x29\xb6\xae\x52\x2a\xe9\x0a\x22\x41\x8d\x09\x89\xa4\xab\x19\xd5\x50\xfe\x0c\x18\xce\x69\x26\x2c\x01\xad\x04\x16\x4c\xbe\xa0\x2e\x91\x75\xa2\x21\x60\xbc\xd1\x8d\xea\x5c\x0d\xe6\x22\xe3\xac\x91\xe9\x4a\x55\xa6\x1d\x0e\xd4\x2d\x19\x07\x29\xb3\x56\xc9\xaa\xb4\xca\x0d\xd9\x51\xb3\x6a\xb1\x10\x08\x91\x12\x82\xa6\x06\x19\x29\x72\x50\x91\x1d\x84\x92\x5e\x93\xa9\x5e\xb8\x26\xfa\xe7\x52\x9b\x00\xd5\x9c\x0e\xf0\x21\xa5\x92\x21\x0b\xc9\x9c\x0a\x27\x5b\x50\x1d\x7a\xad\x44\x73\x54\x07\x9a\xab\xfb\x94\xca\x1a\x8c\xd1\x03\x25\xc5\x9a\x4c\x6e\x4b\x38\xdb\xc0\x04\xbe\x93\x7b\x42\x95\x47\x4a\x0e\x0a\xf3\xff\x2f\xd1\xc0\x2f\x43\xd9\xa1\xd1\x9d\xb8\xce\x34\x95\x8c\x4c\xfe\x22\x67\x26\x7d\xf9\xf4\xff\xeb\x2c\x4d\xd1\x0e\x6e\xb2\x24\xa1\x7a\x1d\xf8\xb4\x95\x67\x9f\xf1\xd5\x4e\xda\x39\x6b\x22\xba\x2d\x94\x32\x4b\x75\x99\x35\x59\xeb\x40\xcc\x44\x0b\x63\x2d\x2a\xe9\x8a\x4c\xca\x1b\x11\x08\x3e\x09\x68\xf5\x86\xf9\x64\xd2\x8d\xc8\x42\xac\xd3\xd8\x85\x05\x9a\xd5\x20\x56\x49\x9d\xed\x98\x33\x86\x32\x24\xee\xf6\x37\x41\x83\xd7\x2a\x41\xe7\x50\xe0\x0b\xde\x0d\x61\x26\x0e\x78\xd9\xda\x04\xbe\xa4\xf5\x72\xdf\xb5\xd8\x5e\x1a\xd5\xb8\x36\xd3\x48\x59\xa4\xb3\x64\xd6\xbe\x2e\x82\x3f\xe6\x0f\xb8\xc5\x84\x74\x3c\xde\x0f\xf7\xb0\x36\xd0\xc8\xf2\x15\x92\x49\x9e\x43\x31\x7a\x80\x9b\x3d\xb6\xba\x81\xaf\x1a\x37\x83\x78\xd4\x1e\x50\xe2\x51\xe7\xc6\xbb\xa4\xee\xf4\x67\x28\x9e\xfe\x90\xc4\xc8\x17\xb1\x1d\xc3\xe9\x70\x98\x3e\xbc\x84\x62\x0e\x19\xc3\xc5\xf0\x9b\x97\x90\x50\xbd\xe0\x72\x20\x70\x6e\xc7\xa3\x16\x41\x17\x1a\xa3\xe1\x37\x2e\x13\xed\xd8\xa6\x55\x41\x06\x7e\xda\xd0\x2c\x9d\xb9\x06\x50\x3a\x58\x6e\x8a\xff\x83\x99\xd2\x0c\x35\xb2\x6a\x6b\xac\xe6\x69\xb3\x73\x2f\x03\x4a\xd3\xec\x63\xb5\xea\x74\x9f\xc0\xea\x4e\xc2\x6d\x3c\x71\x6d\x3b\xf0\x6d\xbc\x4b\xbf\xb1\xd4\x66\x66\x1f\xe7\x96\x27\x7b\x35\x7e\xa4\x5c\x20\xdb\xc7\x99\xc6\xee\x89\xd8\xcb\xba\x55\x96\x8a\x2e\x23\xf0\xdb\x28\xbb\xef\xcb\x66\xd3\xf6\xa5\xdd\x29\xf2\x9c\xcf\x01\xef\xc0\x73\xc0\x11\xc8\xbc\x40\x43\x60\xb3\xa9\xa3\xc8\x9c\x1d\x4d\x20\xcf\x01\x25\x83\x96\xa9\x3d\xea\x51\x09\xb9\xad\xcf\xe5\x5c\x11\xd8\xaf\x5e\xf4\xe1\xaa\x62\x35\xba\x89\xd5\xcf\x73\xef\x8d\x13\xeb\x5e\x77\xcb\x26\x79\xfe\x7c\x3b\x11\xb3\xc7\xdc\x12\xc2\x41\xee\x2b\x7b\x90\x55\x66\xe0\x20\xbb\x4a\xc3\x41\x7e\x91\x8b\x5d\xee\x6e\x36\xca\xc7\xba\xe1\xb9\x32\xab\xfb\xc2\xb6\x45\x3c\xaa\xe8\x3d\x94\x58\x83\x5f\x2d\xe7\x4a\x59\xd4\xc5\x75\x2b\x97\x4f\x3f\xbc\x07\x9e\xdc\x48\x89\x41\xc2\x9a\xcf\x08\x38\xd0\xa9\xbb\xd2\x2f\x9e\xea\xc6\xbb\x8f\x63\xbb\x15\xd7\x33\xa6\xb1\xb8\x42\xef\x0b\x26\xa9\x37\xe7\x3e\x99\xfc\xeb\x9f\x70\x3a\x1c\x9d\xc3\x00\x6e\x1c\x07\xfe\x86\x49\xfa\xdf\x37\xdb\xaf\x9c\x44\xe1\x79\xbf\x1e\x3e\xfb\xc7\xad\x11\xf0\x79\xbf\xe7\x55\xcd\x43\xff\xd1\xd4\xe8\xe7\xde\xb1\x87\x34\x8a\xf7\xeb\x38\x2d\x1b\x73\x73\xec\xbe\x77\xfa\xbd\x28\xd3\x46\xe9\xde\x49\x2f\x75\x13\x20\xea\xde\xb1\x57\x74\x95\x7e\x77\x8e\x3b\x60\xaa\x6d\x8e\x32\x36\x75\xb1\xed\xf7\xca\x06\xdd\xdb\xce\x75\xe5\xdf\xee\x6c\xf8\x15\x36\x35\x26\x6a\x85\xff\xc1\xec\xb1\x17\x09\x1e\x7d\xe9\x3f\x65\x90\xa9\x28\x4b\x50\x5a\x4f\xa8\xa8\x18\x71\x20\xdc\x02\xb7\x56\xf7\x7b\x4d\xf8\x1e\x1f\xd0\xdd\xb6\xd9\xad\xd9\x75\xbb\xdc\xf9\xd4\xf0\xcb\x9a\x2f\x07\xd7\x72\x5e\x0d\xfc\xf2\x03\xfb\xdf\x01\x00\x00\xff\xff\x08\x1c\xb7\x6f\x71\x0f\x00\x00"

func dataNode_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataNode_handlerTemplate,
		"data/node_handler.template",
	)
}

func dataNode_handlerTemplate() (*asset, error) {
	bytes, err := dataNode_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/node_handler.template", size: 3953, mode: os.FileMode(420), modTime: time.Unix(1502125355, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReport_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\xdd\x8e\xe4\x34\x13\xbd\xfe\xe6\x29\xea\x33\x12\x57\x24\xde\x66\x10\xac\x16\x27\x12\x5a\x58\x21\xb1\xb0\xab\x9d\xb9\xe1\x6a\x55\x1d\x57\x27\xd6\x38\x76\xb0\x9d\x9e\x6d\xb5\xfa\x81\x78\x0d\x9e\x0c\xb9\xf3\xd3\x49\xa6\xa7\xc5\x80\x00\xb1\x37\xdd\xae\xe3\x3a\x4e\xd5\xa9\xb8\x54\x11\xff\xff\xf6\xcd\xcb\xdb\x9f\xdf\x7e\x07\x55\xa8\x75\x7e\x25\xe2\x1f\x68\x34\x65\xc6\xc8\xb0\xfc\x0a\x40\x54\x84\x32\x2e\x00\x44\x50\x41\x53\xfe\xb6\x6d\x1a\x0a\xf0\x8e\x1a\xeb\x82\xe0\x1d\xd8\x39\xd4\x14\x10\x8a\x0a\x9d\xa7\x90\xb1\x36\x6c\x92\xe7\x6c\xba\x65\xb0\xa6\x8c\x6d\x15\xdd\x47\x2e\x83\xc2\x9a\x40\x26\x64\xec\x5e\xc9\x50\x65\x92\xb6\xaa\xa0\xe4\x68\x7c\x06\xca\xa8\xa0\x50\x27\xbe\x40\x4d\xd9\x2a\x7d\x36\x1c\xa5\x95\xb9\x83\xca\xd1\x26\x63\x55\x08\x8d\x7f\xc1\x79\x8d\x1f\x0a\x69\xd2\xb5\xb5\xc1\x07\x87\x4d\x34\x0a\x5b\xf3\x11\xe0\xd7\xe9\x75\xfa\x25\x2f\xbc\x3f\x61\x69\xad\x4c\x5a\x78\xcf\xc0\x91\xce\x98\x0f\x3b\x4d\xbe\x22\x0a\x5d\xe2\x7c\xc8\x5c\xac\xad\xdc\xf5\xcf\x36\xb8\x85\x42\xa3\xf7\x19\x33\xb8\x5d\xa3\x83\xee\x2f\x91\xb4\xc1\x56\x07\x06\xce\x6a\x3a\x6e\xaa\x12\x83\xb2\xa6\x8f\x1a\x40\x48\x35\x72\x63\xe2\xa8\x0c\xb9\x64\xa3\x5b\x25\x47\x9f\xb9\x57\x7f\x74\x8c\x83\xdc\xc4\x27\x86\xd4\x86\x60\x0d\x84\x5d\x43\x19\xeb\x0c\xb6\xa0\x05\x5b\x96\x9a\xa0\xb0\x5a\x63\xe3\x49\x32\x90\x18\xb0\x87\x63\x08\x1d\x3e\xc0\xe8\xca\x58\xb4\x4f\x3a\x36\x03\x74\x0a\x13\xfa\xd0\xa0\x91\x24\x33\xb6\x41\x1d\x7d\x8f\x68\x8c\xde\x59\x3d\x3e\x6a\x16\x1a\x80\xf0\x0d\x9a\x21\x18\xef\x12\x6b\xf4\x8e\xe5\xb7\x5d\x38\x27\x61\x04\x8f\x7e\x17\xa8\xaa\xb0\x26\x39\x1e\xff\x4f\xb9\x0a\xde\x49\x39\xc3\x70\xa1\xeb\xda\xa1\x91\x2c\xff\xd4\xac\x7d\xf3\xf5\xe5\xdf\xee\xaa\x24\x37\x6d\x5d\xa3\xdb\x09\x8e\x93\x3a\x73\xa9\xb6\x8b\xb2\x2b\x39\x2a\x7a\x7a\x51\xba\x2a\x0d\xaf\xd9\x58\xb5\x59\x88\xad\x9e\xc4\x38\xb8\x1a\xdc\xb2\xfc\xea\x7f\xfd\x95\xc9\x05\xf6\x77\x86\xb3\x7c\xae\x48\xa9\x77\x4d\x15\x65\x81\x71\x95\x54\xb6\x1e\xaa\x5d\x29\x29\xc9\x64\x2c\xb8\x96\x46\xd1\xe0\x7b\x5b\x53\x4c\x48\x70\xad\xe6\x12\xb6\xfa\x91\x2c\x27\x86\xe0\x06\x87\xe5\xb9\x6b\x71\xba\x34\x76\x4c\x6d\xed\x08\x65\xe1\xda\x7a\x3d\xbd\x2e\x5a\x3d\xdc\x4f\x54\xa0\x9a\xcd\x32\x3e\x1f\xee\x1f\x63\x1b\x2b\x89\xef\xf7\x90\xbe\xfa\x45\x1a\x38\x1c\x58\x3e\x31\x9e\x72\x28\x60\x11\xd4\x96\x58\x3e\xf4\xce\x13\x4d\x70\x3b\xca\x26\xaa\x55\xfe\x66\x4b\x2e\xf6\x49\xc1\xab\xd5\x88\x37\x3d\x11\xec\x06\x26\x21\xc0\x7d\xa5\x8a\x0a\x1c\x1a\xc0\x70\xdc\xf8\x26\xc0\xe1\xf0\x42\xf0\x66\xa4\x06\x5c\xc7\x5e\xd0\x85\xd5\x19\xc7\xdf\x64\x6d\x9d\x24\x47\xb2\x37\x7d\x70\xaa\x19\xad\xc2\x1a\x49\xc6\x8f\x76\x65\xb7\xb3\x46\x24\x82\xcb\x45\x90\xf9\xcb\x0a\x4d\x49\x12\x04\x0f\xf2\x08\xc4\x20\x06\x30\x6a\x14\x61\x1e\xdc\x43\xe6\xcd\x9d\x6a\x9a\x25\x73\x00\x2f\x32\x5f\xa1\xd2\x4b\x62\x8f\x5d\xe4\xdd\xda\x80\x7a\x4e\xeb\xa0\x33\x2c\xc1\x8f\x79\x9f\x0a\x73\x9d\xbf\xb6\xa5\x17\xbc\xba\xfe\xf3\x5d\xdd\xd9\xfb\xf9\xed\x9d\x9d\xa0\x13\x5f\x27\xab\xd8\xb5\x93\x5a\x26\xab\xb9\xe7\xbc\x67\x9c\xa7\x9e\xb8\xab\x45\x5f\xde\xef\x5d\xac\x08\xa4\xaf\x6d\xf9\xfe\x47\xf2\x1e\x4b\xf2\x87\xc3\xbc\x55\x36\xf9\x7e\x9f\x46\x29\x9a\x25\x99\xb4\xa7\x87\xde\x3f\xd9\x50\x29\x53\x82\x3b\xbe\x99\x24\xd3\x73\x4c\x23\x67\xc4\x65\xef\x3b\xd3\x24\xae\x06\xae\xda\x40\xfa\x8e\xbc\x6d\x5d\x41\xfe\xfd\x58\xe0\x49\x45\x3a\xec\xbf\x5e\x93\x65\x8e\x4f\xa8\xcb\xd3\xd5\x9d\x53\x1f\xd1\xfa\x74\x7f\x27\x62\xf7\xe0\xc7\xa3\x76\x9f\xd0\xbf\x2f\x77\xdf\xf4\x66\x6a\xf7\xd8\xc7\xa3\xf6\x32\xc9\xbf\x5f\xed\xc5\x86\x68\xfa\xc1\x6d\x7c\xd6\x19\xa4\x72\xc0\xfb\xe5\xc6\xda\x40\xee\x38\x99\x75\xcb\xcb\xe3\xfc\x23\x25\xe8\x15\x7a\xce\x2e\xcf\x7f\x73\xef\x2f\x2e\xcd\x78\xcb\x91\x7b\x3a\xe0\x0d\x1f\x45\x3e\xd0\x96\xd2\x3b\xaa\x9b\x74\xa3\x38\xcb\x7f\xfb\x15\x3e\x7f\xb6\xfa\x0a\x12\xb8\x89\x3b\xf0\x03\xd5\xcd\x5f\x19\xe1\x3a\x41\xba\x6f\xa5\xee\x13\x49\xf0\xee\x3b\xf2\xf7\x00\x00\x00\xff\xff\x84\x86\xc9\x1a\x58\x0e\x00\x00"

func dataReport_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataReport_handlerTemplate,
		"data/report_handler.template",
	)
}

func dataReport_handlerTemplate() (*asset, error) {
	bytes, err := dataReport_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/report_handler.template", size: 3672, mode: os.FileMode(420), modTime: time.Unix(1502125358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index_handler.template":  dataIndex_handlerTemplate,
	"data/node_handler.template":   dataNode_handlerTemplate,
	"data/report_handler.template": dataReport_handlerTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index_handler.template":  &bintree{dataIndex_handlerTemplate, map[string]*bintree{}},
		"node_handler.template":   &bintree{dataNode_handlerTemplate, map[string]*bintree{}},
		"report_handler.template": &bintree{dataReport_handlerTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
