// Code generated by go-bindata.
// sources:
// data/index_handler.template
// data/node_handler.template
// data/report_handler.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndex_handlerTemplate = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x58\xdd\x72\xdb\xb6\x12\xbe\x3e\x7e\x0a\x04\xc9\x1c\xc9\x73\x42\xc2\x7f\x89\x9d\x84\xd2\x8c\xc7\x4e\x9c\x9c\x3a\x8e\x1d\x3b\x49\x93\x4e\xa7\x03\x01\x2b\x11\x32\x08\xd0\x00\x28\x5b\xf5\xe8\x81\xfa\x1a\x7d\xb2\x0e\x7f\x45\x4a\x94\x1b\xf7\xa2\x33\xad\x6f\x44\xec\x62\x77\xb1\xf8\xf6\x03\x20\x20\x78\x74\xf8\xe1\xe0\xe2\xeb\xe9\x6b\x14\xba\x48\xf6\xd7\x82\xf4\x83\x24\x55\xa3\x1e\x06\x85\xfb\x6b\x08\x05\x21\x50\x9e\x36\x10\x0a\x9c\x70\x12\xfa\x27\x9a\x03\x3a\x16\xd6\x05\x24\x57\xe4\x9d\x11\x38\x8a\x58\x48\x8d\x05\xd7\xc3\x89\x1b\x7a\x7b\xb8\xde\xa5\x68\x04\x3d\x3c\x11\x70\x1d\x6b\xe3\x30\x62\x5a\x39\x50\xae\x87\xaf\x05\x77\x61\x8f\xc3\x44\x30\xf0\x32\xe1\x29\x12\x4a\x38\x41\xa5\x67\x19\x95\xd0\xdb\xf4\x37\xca\x50\x52\xa8\x4b\x14\x1a\x18\xf6\x70\xe8\x5c\xfc\x92\x90\x88\xde\x30\xae\xfc\x81\xd6\xce\x3a\x43\xe3\x54\x60\x3a\x22\x95\x82\x6c\xfb\xdb\xfe\x73\xc2\xac\x9d\xeb\xfc\x48\x28\x9f\x59\x8b\x91\x01\xd9\xc3\xd6\x4d\x25\xd8\x10\xc0\x95\xe3\x58\x66\x44\xec\x90\x35\x2c\x1f\xc8\xbe\x24\x84\x69\x0e\xfe\xf8\x2a\x01\x33\xcd\x46\xc8\x9b\xde\xa6\xbf\xb9\xe5\xef\x64\x11\xc7\x16\x23\xa1\x1c\x8c\x8c\x70\xd3\x1e\xb6\x21\xdd\xde\xdb\xf1\xd4\x64\x9f\x6e\xfc\xef\xf9\xd9\xe8\x05\x93\xd7\x5f\x0f\x8e\x8e\x4e\xe3\xc3\xb3\xe3\xcf\xf1\xf1\x89\xda\x18\x7e\xa4\x1f\x3f\x8c\xdf\x5e\xd9\xcd\x6d\xb7\x73\x34\x1a\x6f\xbf\xfe\xf5\xd9\xc6\x8f\xea\xe8\xec\x8a\x11\xb3\xf7\x3e\x54\x1f\x0f\xbf\x61\xc4\x8c\xb6\x56\x1b\x31\x12\xaa\x87\xa9\xd2\x6a\x1a\xe9\xc4\xe2\x7e\x40\xf2\x3c\xef\x48\xfa\xfb\xe0\xd9\x25\xe3\x45\x74\xda\xe7\x72\xc1\x9e\xbd\x3b\x13\x83\x8d\xad\xdd\xab\xc9\x74\x7c\xfe\x7e\xf8\x76\xfc\xe1\x3d\x3d\xbe\x1c\x26\x5f\x3e\xdf\x7c\xbb\xf9\x74\xaa\x0e\xfe\xbf\xbf\x2b\xb7\xa2\x83\x2f\x27\xef\xe2\xa3\x17\xd1\xd1\xc1\xe1\xde\xf5\xd1\xc9\x3b\x76\x7a\xb8\x7b\x71\x43\xbf\x67\x2e\x29\xeb\x48\x49\xbb\x60\xa0\xf9\xb4\x98\x9f\xa2\x13\xc4\x24\xb5\xb6\x87\x15\x9d\x0c\xa8\x41\xf9\xc7\xe3\x30\xa4\x89\x74\x18\x19\x2d\x21\xeb\x14\x23\xea\x84\x56\x45\x39\x11\x0a\xb8\xa8\x7c\x53\xe6\x51\xa1\xc0\x78\x43\x99\x08\x5e\xd9\x34\xad\x8a\xd0\x69\x1e\x60\x6a\x36\x69\x4a\x89\x73\x5a\x21\x37\x8d\xa1\x87\x73\x01\x2f\xb8\x39\x3d\x1a\x49\x40\x4c\x4b\x49\x63\x0b\x1c\x23\x4e\x1d\x2d\xd4\x69\x0a\xb9\xbe\x54\x53\x33\x4a\x57\xcd\xe3\xdc\x1b\x23\x6a\x04\xf5\xe0\x26\xa6\x8a\x03\xef\xe1\x21\x95\xa9\x6d\xa6\x4d\xb3\x37\x5a\x56\x43\x35\x52\x4b\x49\x10\x53\x55\x26\x63\x8d\xa7\x95\x9c\xe2\xfe\x45\x9e\xce\x1c\x98\x80\xa4\x76\x77\xb8\x0a\xa6\x95\x97\x85\xff\xbb\x4c\x03\x92\x43\xd9\xd0\xd1\x05\x5c\x07\x86\x2a\x8e\xfb\xff\x55\x03\x1b\xbf\xba\xfb\xf7\x34\x89\x63\x70\xde\x79\x12\x45\xd4\x4c\x03\x42\x6b\x75\x26\x5c\x4c\x16\xca\x2e\x78\x85\xe8\x9c\x28\x79\x95\x4a\x9a\x55\x55\x6b\xa4\x98\xc8\x5a\x8e\xa5\xa9\xa2\x13\xdc\x5f\xfb\x4f\xb1\x67\xf5\x03\x5a\x6c\x5a\x04\xf7\x9b\x88\x8c\xe4\x34\x0e\x53\x58\x50\xd5\xf2\x42\x1d\x95\xd5\x0e\x05\xe7\xa0\x7a\xd8\x99\x04\x2a\xd0\xd0\x5b\x1d\x41\x3a\xa1\x80\x48\xd1\x84\x30\x91\x2b\x66\x59\x13\x02\xa2\x68\xd9\x6c\x5b\x16\xf3\x45\x13\x6e\xe6\xbb\x7d\x85\x61\xb8\x99\x2d\xcf\xf6\x79\x7b\x8e\x0e\x6c\x7d\x35\x49\x51\x5a\x50\xe6\xc4\x24\x9d\x00\x6d\xae\x03\x47\x07\xb8\x40\xe6\x31\x95\x12\xf7\xf7\xa5\x5c\x9e\x58\x81\xe0\x4a\xcf\x21\x15\x12\x38\xee\xbf\xc9\xbe\xf7\xf7\x67\x21\x55\xa3\x34\xc0\x41\xde\xb8\x7f\x84\x44\x55\x31\x3e\x95\xcd\x2a\xca\x62\xb8\xbc\x4a\x6b\x2d\x3b\x93\xa3\x03\xaf\x38\x17\xeb\x38\x3e\xf2\x3c\xb4\x2f\x25\xf2\xbc\x16\xce\xa6\xb0\xd5\xfd\x63\xaa\x00\x0d\x29\x07\x24\x14\x2a\x71\xaf\x73\xc4\xd1\x81\x84\xd2\xf5\x97\x4c\xaa\x07\x90\x80\xb2\x5f\x6f\xa0\x0d\x07\x03\xbc\x10\xad\x33\x22\xae\x24\xa6\x15\x07\x65\x2b\x39\xd4\x13\x58\xda\x8a\x9c\x69\x2a\x52\x55\x98\x31\x2a\x20\x2e\x6c\xeb\x3b\x77\xd4\xad\xee\x04\x50\xcb\x7d\x01\x59\x1c\xe6\xf6\xd6\xa4\x05\x40\xfe\x6c\xb6\x56\xcb\x65\xad\x61\x22\x86\x08\xae\x90\x9f\x0d\x88\x70\xc1\x20\x34\x9b\x95\x48\xf0\x34\x84\xc1\xe8\xf6\x16\x81\xe2\xa8\x16\xaa\xcd\xbf\xac\x7e\x2d\x80\x50\x43\x8d\xd1\x0a\xff\x8c\x48\xc5\x8e\xa0\x34\x07\x72\x7b\xeb\xbf\xb9\xe2\x6a\x36\xc3\xcb\x33\xe7\xfd\xaa\x37\x20\x8e\xaf\x30\xc8\x32\xb9\xd3\x62\xdf\xb5\x75\xb7\xe1\x07\x8a\x37\x12\x0e\x48\x56\xe5\xa5\xad\xa5\x49\xd1\x7c\xf9\xb5\xb3\xb4\x04\xb8\x8d\xa8\xab\xe8\x99\xfb\x3c\x14\x86\xa2\x3b\x69\xb9\x98\xf6\x22\x4d\xff\x61\x84\xfa\xeb\x24\x2b\xb6\xe8\x76\x96\x55\xcb\xf0\x3e\x34\x2b\x9c\x1e\x32\xcf\x6a\xdb\xd7\x2a\xa2\xe5\xdb\xd9\x83\xa1\x59\x75\x8a\xb7\x13\x6d\x7e\xde\xdf\x8b\x6a\x95\xdb\x43\x26\x5b\x0d\xbb\x16\xba\xfd\x8b\x19\xd6\x10\x4a\x29\x2e\xee\x32\x01\x89\xfb\x77\xe9\x42\x83\x48\x25\x0c\xb5\x76\x60\xf2\x43\x32\x6b\xae\xb8\xc3\x2e\xff\xa5\x5f\xb6\x90\x5e\xc4\xab\xa7\x9a\x96\x7c\x57\x78\xec\x2c\xb2\xae\x79\x1d\x58\x2e\x56\xfd\x16\x54\x3e\x4e\x58\x07\x13\xf0\x2f\x21\x8a\xfd\xa1\x20\xb8\xff\xfb\x6f\x68\x6b\x63\x73\x17\x79\xe8\x3c\xed\x41\x3f\x40\x14\xb7\xdd\x73\x16\x6f\x3a\xcb\x37\xba\x26\xe2\x39\x48\x95\x5c\xbc\x93\xe4\xf7\x77\x07\x37\x8e\x8c\xe9\x84\xe6\xda\x2a\xf1\x27\xdd\x61\xa2\x58\x7a\x57\xee\xae\xdf\xce\x47\x7a\xd2\xed\xf8\xc5\x72\x35\x3f\x55\x64\xfd\xb9\xb3\xee\x03\x65\x61\xbb\x4f\xea\xe5\x42\x61\xd7\x7d\x66\x6d\xb7\xc3\x12\x63\xb5\xe9\x3c\xed\xc4\x5a\x28\x07\xa6\xb3\xee\x67\xeb\xb8\xdb\x84\x6c\x45\xa8\x7a\x38\xca\xf9\x41\x8a\x79\xb7\x93\xff\xd1\xef\xac\xbf\x6a\x9a\xce\x9e\xde\x3b\xa6\x81\x48\x4f\xe0\x4f\xc2\xae\xfb\x4c\x0a\x76\xd9\xbd\x2b\x20\xd7\x2c\x89\x40\x39\x5f\x6a\x96\xbd\x39\xa0\xde\x3c\x71\xe7\x4c\xb7\x53\xc1\xb7\x3c\x40\x53\xac\x77\xcf\xe6\xc2\xbc\x59\x7f\x08\x0b\x48\xfe\x64\x14\x90\xfc\x51\xf3\x8f\x00\x00\x00\xff\xff\x9a\x23\xc3\x44\xe5\x14\x00\x00"

func dataIndex_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataIndex_handlerTemplate,
		"data/index_handler.template",
	)
}

func dataIndex_handlerTemplate() (*asset, error) {
	bytes, err := dataIndex_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index_handler.template", size: 5349, mode: os.FileMode(420), modTime: time.Unix(1501677052, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNode_handlerTemplate = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x17\xdb\x72\xdb\xb8\xf5\x39\xfe\x8a\x53\x34\x5b\xc9\x53\x93\x94\xec\xec\xda\xab\x90\x9a\xc9\xc8\xbb\x4e\xb6\xb9\x38\xb1\xbb\xd7\xc9\x03\x44\x1c\x89\x50\x40\x80\x06\x40\xd9\xaa\x46\x1f\xd4\xdf\xe8\x97\x75\xc0\x9b\x48\x59\x72\x33\xed\x4c\xf5\x20\x01\xe7\x7e\xc7\x51\xf8\xa7\xcb\x0f\x93\xdb\xdf\xae\x7f\x80\xc4\xa6\x62\x7c\x14\xba\x1f\x10\x54\xce\x23\x82\x92\x8c\x8f\x00\xc2\x04\x29\x73\x07\x80\xd0\x72\x2b\x70\xbc\x5e\xfb\x3f\xde\x31\xb9\xd9\x84\x41\x09\x28\x91\x29\x5a\x0a\x71\x42\xb5\x41\x1b\x91\xdc\xce\xbc\x0b\xd2\x46\x49\x9a\x62\x44\x96\x1c\xef\x33\xa5\x2d\x81\x58\x49\x8b\xd2\x46\xe4\x9e\x33\x9b\x44\x0c\x97\x3c\x46\xaf\xb8\x9c\x00\x97\xdc\x72\x2a\x3c\x13\x53\x81\xd1\xd0\x1f\xd4\xa2\x04\x97\x5f\x20\xd1\x38\x8b\x48\x62\x6d\x36\x0a\x82\x94\x3e\xc4\x4c\xfa\x53\xa5\xac\xb1\x9a\x66\xee\x12\xab\x34\x68\x00\xc1\x99\x7f\xe6\x7f\x17\xc4\xc6\x6c\x61\x7e\xca\xa5\x1f\x1b\x43\x40\xa3\x88\x88\xb1\x2b\x81\x26\x41\xb4\xb5\x1e\x13\x6b\x9e\x59\x30\x3a\x2e\x15\x99\x51\x10\xc4\x8a\xa1\xbf\xb8\xcb\x51\xaf\x0a\x0d\xe5\xd1\x1b\xfa\xc3\x53\xff\x45\x21\x71\x61\x08\x70\x69\x71\xae\xb9\x5d\x45\xc4\x24\xf4\xec\xe2\x85\x27\x97\xaf\xe8\xe0\xaf\xdf\x7d\x9c\x7f\x1f\x8b\xfb\xdf\x26\x57\x57\xd7\xd9\xe5\xc7\xb7\x3f\x67\x6f\xdf\xcb\xc1\xec\x13\xfd\xf4\x61\xf1\xfa\xce\x0c\xcf\xec\x8b\xab\xf9\xe2\xec\x87\x7f\x7c\x3b\xf8\x55\x5e\x7d\xbc\x8b\x03\x7d\xf1\x2e\x91\x9f\x2e\x7f\x27\x10\x6b\x65\x8c\xd2\x7c\xce\x65\x44\xa8\x54\x72\x95\xaa\xdc\x90\x71\x18\x94\x76\x3e\x61\xf4\xd7\x85\xe7\x3c\x58\xec\x46\x67\xbf\x2f\xb7\xf1\xb7\x6f\x3e\xf2\xe9\xe0\xf4\xfc\x6e\xb9\x5a\xdc\xbc\x9b\xbd\x5e\x7c\x78\x47\xdf\x7e\x99\xe5\xbf\xfc\xfc\xf0\xfb\xc3\xdf\xaf\xe5\xe4\xa7\x57\xe7\xe2\x34\x9d\xfc\xf2\xfe\x4d\x76\xf5\x7d\x7a\x35\xb9\xbc\xb8\xbf\x7a\xff\x26\xbe\xbe\x3c\xbf\x7d\xa0\xff\x93\x2f\x31\x95\x4b\x6a\x16\xa6\x70\x80\x1a\x83\xd6\x54\x4c\x5b\x54\x65\xfa\x01\x71\x76\x95\x61\x44\x2c\x3e\xd8\x60\x41\x97\xb4\x84\x56\x39\x87\x7b\x2e\x99\xba\xf7\x95\x14\x8a\x32\x88\x60\x96\xcb\xd8\x72\x25\xa1\x7f\x0c\xeb\x92\x04\x60\x49\x75\x51\xe5\x16\x22\x90\x78\x0f\x93\x42\xf1\x4f\x37\xfe\xc4\x01\xfb\xa4\xc0\x4d\x94\xb4\x94\x4b\xd4\xe4\x04\xd6\x47\xcf\xa0\xe8\x93\x91\x3b\x01\x38\xe5\x23\x20\x9f\x72\x69\x79\x8a\xd0\x37\x18\x2b\xc9\xcc\x31\x39\x7a\x06\x9b\x93\x5a\x0d\x00\x7d\xe0\xe6\xd7\xd1\x7a\x0b\x00\xd0\xb8\x44\x6d\x90\x8d\x00\xac\xce\x71\x8b\xda\x9c\x1c\x1d\x3d\x03\x46\x2d\x1d\xc1\x1f\x85\x96\x52\x17\x14\x0e\x8f\x80\x08\x2e\x91\x9c\x54\x30\x47\x77\xad\xb8\xb4\xc6\x51\x43\xf7\xb3\x5e\x6b\x2a\xe7\x08\xfe\x7b\xc5\xd0\xc0\x66\x53\x31\x01\xac\x01\x60\x35\x82\xf5\xda\xaf\x6c\xdf\x6c\xa0\x63\x71\x2d\x00\x25\x6b\xd8\x3e\x17\xbf\xee\xf6\xb9\x26\xdc\x1c\xbf\xac\x8f\x45\xb0\x7c\x8d\x92\xa1\xee\xd7\xe0\x4d\x99\xb1\x56\xfe\xc2\xa0\x1e\x42\xe1\x54\xb1\x55\x95\x52\x49\x97\x10\x0b\x6a\x4c\x44\x24\x5d\x4e\xa9\x86\xf2\xc7\x63\x38\xa3\xb9\xb0\x04\xb4\x12\x58\x20\xf9\x9c\xba\x44\xd6\x89\x86\x90\xf1\x86\x37\xae\x73\xe5\xcd\x44\xce\x59\x43\xd3\xa5\xaa\x44\x3b\x3b\x50\xb7\x68\x9c\x49\xb9\xb5\x4a\x56\xa5\x55\x5e\xc8\x0e\x9b\x55\xf3\xb9\x40\x88\x95\x10\x34\x33\xc8\x48\x91\x83\x0a\xec\x4c\x28\xe1\x35\x98\xea\xb9\x9b\xa1\x7f\x2e\xb9\x09\x50\xcd\xa9\x87\x0f\x19\x95\x0c\x59\x44\x66\x54\x38\xda\x02\xea\xac\xd7\x4a\x34\xaa\x3a\xa6\xb9\xba\xcf\xa8\xac\x8d\x31\xda\x53\x52\xac\xc8\xf8\xb6\x34\x67\x1b\x98\x30\x70\x74\x4f\xb0\xf2\x58\x49\xaf\x10\xff\xff\x22\x0d\x83\x32\x94\x1d\x18\xdd\x89\xeb\x54\x53\xc9\xc8\xf8\x2f\x72\x6a\xb2\x97\x4f\x7f\x5f\xe7\x59\x86\xd6\xbb\xc9\xd3\x94\xea\x55\x18\xd0\x56\x9e\x03\xc6\x97\x3b\x69\xe7\xac\x89\xe8\xb6\x50\xca\x2c\xd5\x65\xd6\x64\xad\x63\x62\x2e\x5a\x36\xd6\xa4\x92\x2e\xc9\xb8\xec\x88\x50\xf0\x71\x48\xab\x27\x2c\x20\xe3\x6e\x44\xe6\x62\x95\x25\x2e\x2c\xd0\x9c\xbc\x44\xa5\x75\xb6\x13\xce\x18\xca\x88\xb8\xee\x6f\x82\x06\xaf\x55\x8a\xce\xa1\x30\x10\xbc\x1b\xc2\x5c\x1c\xf0\xb2\x75\x09\x03\x49\xeb\xe3\xbe\xb6\xd8\x36\x8d\x6a\x5c\x9b\x6a\xa4\x2c\xd6\x79\x3a\x6d\xb7\x8b\xe0\x8f\xf1\x1e\xb7\x98\x92\x8e\xc7\xfb\xcd\x3d\xcc\x0d\x34\xb6\x7c\x89\x64\xbc\x5e\x43\xb1\x79\x80\x5b\x3d\xb6\xbc\x61\xa0\x1a\x37\xc3\x64\xd8\xde\x4f\x92\x61\xa7\xe3\x5d\x52\x77\xe6\x33\x14\x4f\x7f\x44\x12\xe4\xf3\xc4\x8e\xe0\x74\x30\xc8\x1e\x5e\x42\xb1\x86\x8c\xe0\x62\xf0\xcd\x4b\x48\xa9\x9e\x73\xe9\x09\x9c\xd9\xd1\xb0\x05\xd0\x05\xc7\x70\xf0\x8d\xcb\x44\x3b\xb6\x59\x55\x90\x61\x90\x35\x30\x4b\xa7\x6e\x00\x94\x0e\x96\x97\xe2\xdb\x9b\x2a\xcd\x50\x23\xab\xae\xc6\x6a\x9e\x35\x37\xf7\x32\xa0\x34\xcd\x3d\x51\xcb\xce\xf4\x09\xad\xee\x24\xdc\x26\x63\x37\xb6\xc3\xc0\x26\xbb\xf0\x1b\x4b\x6d\x6e\xf6\x61\x6e\x79\xba\x97\xe3\x47\xca\x05\xb2\x7d\x98\x49\xe2\x9e\x88\xbd\xa8\x5b\x65\xa9\xe8\x22\xc2\xa0\x6d\x65\xf7\x7d\xd9\x6c\xda\xbe\x94\xe3\xaf\x2a\x14\x8d\x6e\x4f\x0c\xd6\x6b\xff\x0d\x83\xcd\xa6\xdb\x65\x96\x8d\xd7\xeb\xe7\xdb\x3d\x94\x3d\xc6\xfa\xce\x63\x3c\x88\x7d\x65\x0f\xa2\x4a\xc7\x0f\xa2\x2b\xef\x0f\xe2\x8b\x10\xec\x62\x77\x83\x50\xbe\x91\x0d\xce\x65\xb7\x6e\xc7\x6d\x67\x3e\x2a\xa4\x3d\x90\x44\x43\x50\x1d\x67\x4a\x59\xd4\x45\x95\x97\xc7\xa7\xdf\xbb\x03\x2f\x5d\xac\x84\x97\xb2\x66\x79\x87\x03\x03\xb2\x4b\xfd\xe2\xa9\x21\xb8\xfb\x26\xb5\x27\x60\xbd\xda\x19\x8b\x4b\xf4\xbf\x60\x9a\xf9\x33\x1e\x90\xf1\xbf\xfe\x09\xa7\x83\xe1\x39\x78\x70\xe3\x30\xf0\x37\x4c\xb3\xff\x7e\xc6\x7d\xe5\x02\x08\xcf\xfb\xf5\xce\xd7\x3f\x6e\x6d\x5e\xcf\xfb\x3d\xbf\xea\x59\xfd\x47\x53\xa3\x9f\x7b\xc7\x3e\xd2\x38\xd9\xcf\xe3\xb8\x6c\xc2\xcd\xb1\xfb\x9b\xd1\xef\xc5\xb9\x36\x4a\xf7\x4e\x7a\x99\x5b\xbc\x50\xf7\x8e\xfd\xa2\x99\xfb\xdd\xf5\xe9\x80\xa8\xb6\x38\xca\xd8\xc4\xc5\xb6\xdf\x2b\xe7\x62\x6f\xbb\x4e\x95\x9f\xdd\x95\xec\x2b\x64\x6a\x4c\xd5\x12\xff\x83\xd8\x63\x3f\x16\x3c\xfe\xd2\x7f\x4a\x20\x53\x71\x9e\xa2\xb4\xbe\x50\x71\xb1\x59\x40\xb4\x35\xdc\x5a\xdd\xef\x35\xe1\x7b\xac\xa0\x7b\x6d\xa3\x5b\x2b\xe3\xf6\xb8\xb3\xe1\x07\x65\xcd\x97\xfb\x62\xb9\x26\x86\x41\xf9\xb7\xf6\xdf\x01\x00\x00\xff\xff\x4e\x74\xd4\x9a\xe7\x0e\x00\x00"

func dataNode_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataNode_handlerTemplate,
		"data/node_handler.template",
	)
}

func dataNode_handlerTemplate() (*asset, error) {
	bytes, err := dataNode_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/node_handler.template", size: 3815, mode: os.FileMode(420), modTime: time.Unix(1501677235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReport_handlerTemplate = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x5f\x8f\xe3\x34\x10\x7f\x66\x3f\xc5\x60\x24\x9e\x48\x7c\x65\x11\x9c\x16\x27\x12\x3a\x38\x21\x71\x70\xa7\xdb\x7d\xe1\xe9\xe4\xc6\xd3\xc4\x5a\xc7\x36\xb6\xd3\xbd\xaa\xea\x07\xe2\x6b\xf0\xc9\x90\xeb\x24\x4d\xb2\xbd\x8a\x3f\x12\x5a\xee\xa5\xf5\xfc\x32\x3f\x67\xe6\x37\xf1\x68\xcc\x3e\xfd\xfe\xf5\x8b\xbb\x5f\xdf\xfc\x00\x4d\x68\x55\x79\xc5\xe2\x1f\x28\xae\xeb\x82\xa0\x26\xe5\x15\x00\x6b\x90\x8b\xb8\x00\x60\x41\x06\x85\xe5\x9b\xce\x5a\x0c\xf0\x16\xad\x71\x81\xd1\x04\x26\x87\x16\x03\x87\xaa\xe1\xce\x63\x28\x48\x17\x36\xd9\x73\x32\x7d\xa4\x79\x8b\x05\xd9\x4a\x7c\x88\x5c\x02\x95\xd1\x01\x75\x28\xc8\x83\x14\xa1\x29\x04\x6e\x65\x85\xd9\xd1\xf8\x02\xa4\x96\x41\x72\x95\xf9\x8a\x2b\x2c\x56\xf9\xb3\x61\x2b\x25\xf5\x3d\x34\x0e\x37\x05\x69\x42\xb0\x37\x94\xb6\xfc\x7d\x25\x74\xbe\x36\x26\xf8\xe0\xb8\x8d\x46\x65\x5a\x3a\x02\xf4\x3a\xbf\xce\xbf\xa6\x95\xf7\x27\x2c\x6f\xa5\xce\x2b\xef\x09\x38\x54\x05\xf1\x61\xa7\xd0\x37\x88\x21\xe5\x4d\x87\xc4\xd9\xda\x88\x5d\xff\x6a\xcd\xb7\x50\x29\xee\x7d\x41\x34\xdf\xae\xb9\x83\xf4\x97\x09\xdc\xf0\x4e\x05\x02\xce\x28\x3c\x3e\x94\x35\x0f\xd2\xe8\x3e\x68\x00\x26\xe4\xc8\x8d\x79\x73\xa9\xd1\x65\x1b\xd5\x49\x31\xfa\xcc\xbd\xfa\xad\x63\x1c\xe8\x26\x3e\x31\xa4\x2e\x04\xa3\x21\xec\x2c\x16\x24\x19\x64\x41\x0b\xa6\xae\x15\x42\x65\x94\xe2\xd6\xa3\x20\x20\x78\xe0\x3d\x1c\x43\x48\xf8\x00\x73\x57\xc7\x9a\x7d\x96\xd8\x04\xb8\x93\x3c\xc3\xf7\x96\x6b\x81\xa2\x20\x1b\xae\xa2\xef\x11\x8d\xd1\x3b\xa3\xc6\x57\xcd\x42\x03\x60\xde\x72\x3d\x04\xe3\x5d\x66\xb4\xda\x91\xf2\x2e\x85\x73\x12\x86\xd1\xe8\x77\x81\x2a\x2b\xa3\xb3\xe3\xf6\xff\x95\x2b\xa3\x49\xca\x19\xc6\x17\xba\xae\x1d\xd7\x82\x94\x9f\xeb\xb5\xb7\xdf\x5e\xfe\x4d\x27\x25\xbb\xed\xda\x96\xbb\x1d\xa3\x7c\x52\x67\x2a\xe4\x76\x51\x76\x29\x46\x45\x4f\x1f\x4a\xaa\xd2\xf0\x99\x8d\x55\x9b\x85\xd8\xa9\x49\x8c\x83\xab\xe6\x5b\x52\x5e\x7d\xd2\x9f\x98\x92\xf1\xfe\xc8\x50\x52\xce\x15\xa9\xd5\xce\x36\x51\x16\x18\x57\x59\x63\xda\xa1\xda\x8d\x14\x02\x75\x41\x82\xeb\x70\x14\x0d\x7e\x34\x2d\xc6\x84\x18\x55\x72\x2e\x61\xa7\x3e\x90\xe5\xc4\x60\x54\xf3\x61\x79\xee\x58\x9c\x0e\x8d\x19\x53\x5b\x3b\xe4\xa2\x72\x5d\xbb\x9e\x1e\x17\x25\x1f\x3f\xcf\x64\xc0\x96\xcc\x32\x3e\x1f\xee\x5f\x63\x6b\x23\x90\xee\xf7\x90\xbf\xfc\x4d\x68\x38\x1c\x48\x39\x31\xfe\xce\xa6\xc0\xab\x20\xb7\x48\xca\xa1\x75\x9e\x68\x8c\x9a\x51\x36\xd6\xac\xca\xd7\x5b\x74\xb1\x4d\x32\xda\xac\x46\xdc\xf6\x44\x30\x1b\x98\x84\x00\xb0\x71\xa6\x3d\x22\xdf\x05\x38\x1c\x6e\x18\xb5\x23\x27\xf0\x75\x6c\x02\x29\x9e\x64\x1c\x7f\xb3\xb5\x71\x02\x1d\x8a\xde\xf4\xc1\x49\x3b\x5a\x95\xd1\x02\xb5\x1f\xed\xc6\x6c\x67\x1d\x88\x05\x57\xb2\x20\xca\x17\x0d\xd7\x35\x0a\x60\x34\x88\x23\x10\x83\x18\xc0\x28\x4e\x84\x69\x70\x8f\x99\xb7\xf7\xd2\xda\x25\x73\x00\x2f\x32\x5f\x72\xa9\x96\xc4\x1e\xbb\xc8\xbb\x33\x81\xab\x39\x2d\x41\x67\x58\x8c\x1e\xf3\x3e\x55\xe4\xba\x7c\x65\x6a\xcf\x68\x73\xfd\xcf\xdb\xb9\x33\x0f\xf3\x63\x3b\xdb\x41\x65\xbe\xcd\x56\xb1\x5d\x67\xad\xc8\x56\x73\xcf\x79\xb3\x38\x4f\x3d\x71\x57\x8b\x86\xbc\xdf\xbb\x58\x11\xc8\x5f\x99\xfa\xdd\xcf\xe8\x3d\xaf\xd1\x1f\x0e\xf3\x1e\x69\xcb\xfd\x3e\x8f\x52\xd8\x25\x19\x95\xc7\xc7\xde\xbf\x98\xd0\x48\x5d\x83\x3b\x7e\x92\x28\xf2\x73\x4c\x2d\x66\xc4\x65\xd3\x3b\xd3\x1d\x26\x8a\xa7\xa2\xfe\xdf\x35\x7f\x8b\xde\x74\xae\x42\xff\x2e\xe5\xf3\xf4\x75\xef\xcf\xef\xc7\x23\x7c\x9f\xd0\xd3\x57\xbe\xef\x7f\x1f\x8f\xf2\x7d\x42\x4f\x54\xf9\xe5\xd2\xf6\x43\xdd\xb8\xfb\x19\xa4\x71\x40\xfb\xe5\xc6\x98\x80\xee\x38\xb5\xa5\xe5\xe5\x51\xff\x03\xe5\xea\xd5\x7c\x4e\x2e\xcf\x86\x73\xef\xaf\x2e\xcd\x7f\xcb\x71\x7c\x3a\xfc\xc5\xfb\x92\xbf\xa1\xd4\x07\xdc\x62\x7e\x8f\xad\xcd\x37\x92\x92\xf2\x8f\xdf\xe1\xcb\x67\xab\x6f\x20\x83\xdb\xf8\x04\x7e\xc2\xd6\xfe\x9b\xf1\x2e\x09\x92\xee\x51\xe9\xfa\xc4\x68\xba\x62\xfe\x19\x00\x00\xff\xff\x4c\x3d\xab\xc4\x73\x0e\x00\x00"

func dataReport_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataReport_handlerTemplate,
		"data/report_handler.template",
	)
}

func dataReport_handlerTemplate() (*asset, error) {
	bytes, err := dataReport_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/report_handler.template", size: 3699, mode: os.FileMode(420), modTime: time.Unix(1501677113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index_handler.template": dataIndex_handlerTemplate,
	"data/node_handler.template": dataNode_handlerTemplate,
	"data/report_handler.template": dataReport_handlerTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index_handler.template": &bintree{dataIndex_handlerTemplate, map[string]*bintree{}},
		"node_handler.template": &bintree{dataNode_handlerTemplate, map[string]*bintree{}},
		"report_handler.template": &bintree{dataReport_handlerTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

