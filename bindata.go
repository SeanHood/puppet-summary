// Code generated by go-bindata.
// sources:
// data/index_handler.template
// data/node_handler.template
// data/report_handler.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndex_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xdd\x72\xdb\xb6\x12\xbe\x3e\x7e\x0a\x04\xc9\x1c\xc9\x73\x42\xc2\x7f\x89\x9d\x84\xd2\x8c\xc7\x4e\x9c\x9c\x3a\x8e\x1d\x3b\x49\x93\x4e\xa7\x03\x01\x2b\x11\x32\x08\xd0\x00\x28\x5b\xf5\xe8\x81\xfa\x1a\x7d\xb2\x0e\x7f\x45\x4a\x94\x1b\xf7\xa2\x33\xad\x6f\x44\xec\x62\x77\xb1\xf8\xf6\x03\x20\x20\x78\x74\xf8\xe1\xe0\xe2\xeb\xe9\x6b\x14\xba\x48\xf6\xd7\x82\xf4\x83\x24\x55\xa3\x1e\x06\x85\xfb\x6b\x08\x05\x21\x50\x9e\x36\x10\x0a\x9c\x70\x12\xfa\x27\x9a\x03\x3a\x16\xd6\x05\x24\x57\xe4\x9d\x11\x38\x8a\x58\x48\x8d\x05\xd7\xc3\x89\x1b\x7a\x7b\xb8\xde\xa5\x68\x04\x3d\x3c\x11\x70\x1d\x6b\xe3\x30\x62\x5a\x39\x50\xae\x87\xaf\x05\x77\x61\x8f\xc3\x44\x30\xf0\x32\xe1\x29\x12\x4a\x38\x41\xa5\x67\x19\x95\xd0\xdb\xf4\x37\xca\x50\x52\xa8\x4b\x14\x1a\x18\xf6\x70\xe8\x5c\xfc\x92\x90\x88\xde\x30\xae\xfc\x81\xd6\xce\x3a\x43\xe3\x54\x60\x3a\x22\x95\x82\x6c\xfb\xdb\xfe\x73\xc2\xac\x9d\xeb\xfc\x48\x28\x9f\x59\x8b\x91\x01\xd9\xc3\xd6\x4d\x25\xd8\x10\xc0\x95\xe3\x58\x66\x44\xec\x90\x35\x2c\x1f\xc8\xbe\x24\x84\x69\x0e\xfe\xf8\x2a\x01\x33\xcd\x46\xc8\x9b\xde\xa6\xbf\xb9\xe5\xef\x64\x11\xc7\x16\x23\xa1\x1c\x8c\x8c\x70\xd3\x1e\xb6\x21\xdd\xde\xdb\xf1\xd4\x64\x9f\x6e\xfc\xef\xf9\xd9\xe8\x05\x93\xd7\x5f\x0f\x8e\x8e\x4e\xe3\xc3\xb3\xe3\xcf\xf1\xf1\x89\xda\x18\x7e\xa4\x1f\x3f\x8c\xdf\x5e\xd9\xcd\x6d\xb7\x73\x34\x1a\x6f\xbf\xfe\xf5\xd9\xc6\x8f\xea\xe8\xec\x8a\x11\xb3\xf7\x3e\x54\x1f\x0f\xbf\x61\xc4\x8c\xb6\x56\x1b\x31\x12\xaa\x87\xa9\xd2\x6a\x1a\xe9\xc4\xe2\x7e\x40\xf2\x3c\xef\x48\xfa\xfb\xe0\xd9\x25\xe3\x45\x74\xda\xe7\x72\xc1\x9e\xbd\x3b\x13\x83\x8d\xad\xdd\xab\xc9\x74\x7c\xfe\x7e\xf8\x76\xfc\xe1\x3d\x3d\xbe\x1c\x26\x5f\x3e\xdf\x7c\xbb\xf9\x74\xaa\x0e\xfe\xbf\xbf\x2b\xb7\xa2\x83\x2f\x27\xef\xe2\xa3\x17\xd1\xd1\xc1\xe1\xde\xf5\xd1\xc9\x3b\x76\x7a\xb8\x7b\x71\x43\xbf\x67\x2e\x29\xeb\x48\x49\xbb\x60\xa0\xf9\xb4\x98\x9f\xa2\x13\xc4\x24\xb5\xb6\x87\x15\x9d\x0c\xa8\x41\xf9\xc7\xe3\x30\xa4\x89\x74\x18\x19\x2d\x21\xeb\x14\x23\xea\x84\x56\x45\x39\x11\x0a\xb8\xa8\x7c\x53\xe6\x51\xa1\xc0\x78\x43\x99\x08\x5e\xd9\x34\xad\x8a\xd0\x69\x1e\x60\x6a\x36\x69\x4a\x89\x73\x5a\x21\x37\x8d\xa1\x87\x73\x01\x2f\xb8\x39\x3d\x1a\x49\x40\x4c\x4b\x49\x63\x0b\x1c\x23\x4e\x1d\x2d\xd4\x69\x0a\xb9\xbe\x54\x53\x33\x4a\x57\xcd\xe3\xdc\x1b\x23\x6a\x04\xf5\xe0\x26\xa6\x8a\x03\xef\xe1\x21\x95\xa9\x6d\xa6\x4d\xb3\x37\x5a\x56\x43\x35\x52\x4b\x49\x10\x53\x55\x26\x63\x8d\xa7\x95\x9c\xe2\xfe\x45\x9e\xce\x1c\x98\x80\xa4\x76\x77\xb8\x0a\xa6\x95\x97\x85\xff\xbb\x4c\x03\x92\x43\xd9\xd0\xd1\x05\x5c\x07\x86\x2a\x8e\xfb\xff\x55\x03\x1b\xbf\xba\xfb\xf7\x34\x89\x63\x70\xde\x79\x12\x45\xd4\x4c\x03\x42\x6b\x75\x26\x5c\x4c\x16\xca\x2e\x78\x85\xe8\x9c\x28\x79\x95\x4a\x9a\x55\x55\x6b\xa4\x98\xc8\x5a\x8e\xa5\xa9\xa2\x13\xdc\x5f\xfb\x4f\xb1\x67\xf5\x03\x5a\x6c\x5a\x04\xf7\x9b\x88\x8c\xe4\x34\x0e\x53\x58\x50\xd5\xf2\x42\x1d\x95\xd5\x0e\x05\xe7\xa0\x7a\xd8\x99\x04\x2a\xd0\xd0\x5b\x1d\x41\x3a\xa1\x80\x48\xd1\x84\x30\x91\x2b\x66\x59\x13\x02\xa2\x68\xd9\x6c\x5b\x16\xf3\x45\x13\x6e\xe6\xbb\x7d\x85\x61\xb8\x99\x2d\xcf\xf6\x79\x7b\x8e\x0e\x6c\x7d\x35\x49\x51\x5a\x50\xe6\xc4\x24\x9d\x00\x6d\xae\x03\x47\x07\xb8\x40\xe6\x31\x95\x12\xf7\xf7\xa5\x5c\x9e\x58\x81\xe0\x4a\xcf\x21\x15\x12\x38\xee\xbf\xc9\xbe\xf7\xf7\x67\x21\x55\xa3\x34\xc0\x41\xde\xb8\x7f\x84\x44\x55\x31\x3e\x95\xcd\x2a\xca\x62\xb8\xbc\x4a\x6b\x2d\x3b\x93\xa3\x03\xaf\x38\x17\xeb\x38\x3e\xf2\x3c\xb4\x2f\x25\xf2\xbc\x16\xce\xa6\xb0\xd5\xfd\x63\xaa\x00\x0d\x29\x07\x24\x14\x2a\x71\xaf\x73\xc4\xd1\x81\x84\xd2\xf5\x97\x4c\xaa\x07\x90\x80\xb2\x5f\x6f\xa0\x0d\x07\x03\xbc\x10\xad\x33\x22\xae\x24\xa6\x15\x07\x65\x2b\x39\xd4\x13\x58\xda\x8a\x9c\x69\x2a\x52\x55\x98\x31\x2a\x20\x2e\x6c\xeb\x3b\x77\xd4\xad\xee\x04\x50\xcb\x7d\x01\x59\x1c\xe6\xf6\xd6\xa4\x05\x40\xfe\x6c\xb6\x56\xcb\x65\xad\x61\x22\x86\x08\xae\x90\x9f\x0d\x88\x70\xc1\x20\x34\x9b\x95\x48\xf0\x34\x84\xc1\xe8\xf6\x16\x81\xe2\xa8\x16\xaa\xcd\xbf\xac\x7e\x2d\x80\x50\x43\x8d\xd1\x0a\xff\x8c\x48\xc5\x8e\xa0\x34\x07\x72\x7b\xeb\xbf\xb9\xe2\x6a\x36\xc3\xcb\x33\xe7\xfd\xaa\x37\x20\x8e\xaf\x30\xc8\x32\xb9\xd3\x62\xdf\xb5\x75\xb7\xe1\x07\x8a\x37\x12\x0e\x48\x56\xe5\xa5\xad\xa5\x49\xd1\x7c\xf9\xb5\xb3\xb4\x04\xb8\x8d\xa8\xab\xe8\x99\xfb\x3c\x14\x86\xa2\x3b\x69\xb9\x98\xf6\x22\x4d\xff\x61\x84\xfa\xeb\x24\x2b\xb6\xe8\x76\x96\x55\xcb\xf0\x3e\x34\x2b\x9c\x1e\x32\xcf\x6a\xdb\xd7\x2a\xa2\xe5\xdb\xd9\x83\xa1\x59\x75\x8a\xb7\x13\x6d\x7e\xde\xdf\x8b\x6a\x95\xdb\x43\x26\x5b\x0d\xbb\x16\xba\xfd\x8b\x19\xd6\x10\x4a\x29\x2e\xee\x32\x01\x89\xfb\x77\xe9\x42\x83\x48\x25\x0c\xb5\x76\x60\xf2\x43\x32\x6b\xae\xb8\xc3\x2e\xff\xa5\x5f\xb6\x90\x5e\xc4\xab\xa7\x9a\x96\x7c\x57\x78\xec\x2c\xb2\xae\x79\x1d\x58\x2e\x56\xfd\x16\x54\x3e\x4e\x58\x07\x13\xf0\x2f\x21\x8a\xfd\xa1\x20\xb8\xff\xfb\x6f\x68\x6b\x63\x73\x17\x79\xe8\x3c\xed\x41\x3f\x40\x14\xb7\xdd\x73\x16\x6f\x3a\xcb\x37\xba\x26\xe2\x39\x48\x95\x5c\xbc\x93\xe4\xf7\x77\x07\x37\x8e\x8c\xe9\x84\xe6\xda\x2a\xf1\x27\xdd\x61\xa2\x58\x7a\x57\xee\xae\xdf\xce\x47\x7a\xd2\xed\xf8\xc5\x72\x35\x3f\x55\x64\xfd\xb9\xb3\xee\x03\x65\x61\xbb\x4f\xea\xe5\x42\x61\xd7\x7d\x66\x6d\xb7\xc3\x12\x63\xb5\xe9\x3c\xed\xc4\x5a\x28\x07\xa6\xb3\xee\x67\xeb\xb8\xdb\x84\x6c\x45\xa8\x7a\x38\xca\xf9\x41\x8a\x79\xb7\x93\xff\xd1\xef\xac\xbf\x6a\x9a\xce\x9e\xde\x3b\xa6\x81\x48\x4f\xe0\x4f\xc2\xae\xfb\x4c\x0a\x76\xd9\xbd\x2b\x20\xd7\x2c\x89\x40\x39\x5f\x6a\x96\xbd\x39\xa0\xde\x3c\x71\xe7\x4c\xb7\x53\xc1\xb7\x3c\x40\x53\xac\x77\xcf\xe6\xc2\xbc\x59\x7f\x08\x0b\x48\xfe\x64\x14\x90\xfc\x51\xf3\x8f\x00\x00\x00\xff\xff\x9a\x23\xc3\x44\xe5\x14\x00\x00"

func dataIndex_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataIndex_handlerTemplate,
		"data/index_handler.template",
	)
}

func dataIndex_handlerTemplate() (*asset, error) {
	bytes, err := dataIndex_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index_handler.template", size: 5349, mode: os.FileMode(420), modTime: time.Unix(1501685462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNode_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xeb\x72\xdb\xb8\x15\xfe\x1d\x3f\xc5\x29\x9a\xad\xe4\xa9\x45\x4a\x76\x76\xed\x55\x48\xcd\x64\xe4\x5d\x27\xdb\x5c\x9c\xd8\xdd\xeb\xe4\x07\x44\x1c\x89\x50\x40\x80\x06\x40\xd9\x2a\x47\x0f\xd4\xd7\xe8\x93\x75\xc0\x9b\x48\x59\x72\x33\xed\x4c\xfd\xc3\x02\xce\x0d\xdf\xb9\xe0\xe0\x30\xf8\xd3\xe5\x87\xe9\xed\x6f\xd7\x3f\x40\x6c\x13\x31\x39\x0a\xdc\x0f\x08\x2a\x17\x21\x41\x49\x26\x47\x00\x41\x8c\x94\xb9\x05\x40\x60\xb9\x15\x38\xc9\x73\xef\xc7\x3b\x26\x37\x9b\xc0\x2f\x09\x25\x33\x41\x4b\x21\x8a\xa9\x36\x68\x43\x92\xd9\xf9\xe0\x82\xb4\x59\x92\x26\x18\x92\x15\xc7\xfb\x54\x69\x4b\x20\x52\xd2\xa2\xb4\x21\xb9\xe7\xcc\xc6\x21\xc3\x15\x8f\x70\x50\x6c\x4e\x80\x4b\x6e\x39\x15\x03\x13\x51\x81\xe1\xc8\x1b\xd6\xa6\x04\x97\x5f\x20\xd6\x38\x0f\x49\x6c\x6d\x3a\xf6\xfd\x84\x3e\x44\x4c\x7a\x33\xa5\xac\xb1\x9a\xa6\x6e\x13\xa9\xc4\x6f\x08\xfe\x99\x77\xe6\x7d\xe7\x47\xc6\x6c\x69\x5e\xc2\xa5\x17\x19\x43\x40\xa3\x08\x89\xb1\x6b\x81\x26\x46\xb4\xf5\x39\x26\xd2\x3c\xb5\x60\x74\x54\x1e\x64\xc6\xbe\x1f\x29\x86\xde\xf2\x2e\x43\xbd\x2e\x4e\x28\x97\x83\x91\x37\x3a\xf5\x5e\x14\x16\x97\x86\x00\x97\x16\x17\x9a\xdb\x75\x48\x4c\x4c\xcf\x2e\x5e\x0c\xe4\xea\x15\x1d\xfe\xf5\xbb\x8f\x8b\xef\x23\x71\xff\xdb\xf4\xea\xea\x3a\xbd\xfc\xf8\xf6\xe7\xf4\xed\x7b\x39\x9c\x7f\xa2\x9f\x3e\x2c\x5f\xdf\x99\xd1\x99\x7d\x71\xb5\x58\x9e\xfd\xf0\x8f\x6f\x87\xbf\xca\xab\x8f\x77\x91\xaf\x2f\xde\xc5\xf2\xd3\xe5\xef\x04\x22\xad\x8c\x51\x9a\x2f\xb8\x0c\x09\x95\x4a\xae\x13\x95\x19\x32\x09\xfc\x12\xe7\x13\xa0\xbf\x2e\x3c\xe7\xfe\x72\x37\x3a\xfb\x7d\xb9\x8d\xbe\x7d\xf3\x91\xcf\x86\xa7\xe7\x77\xab\xf5\xf2\xe6\xdd\xfc\xf5\xf2\xc3\x3b\xfa\xf6\xcb\x3c\xfb\xe5\xe7\x87\xdf\x1f\xfe\x7e\x2d\xa7\x3f\xbd\x3a\x17\xa7\xc9\xf4\x97\xf7\x6f\xd2\xab\xef\x93\xab\xe9\xe5\xc5\xfd\xd5\xfb\x37\xd1\xf5\xe5\xf9\xed\x03\xfd\x9f\x7c\x89\xa8\x5c\x51\xb3\x34\x85\x03\xd4\x18\xb4\xa6\x52\xda\xb2\x2a\xe8\x07\xcc\xd9\x75\x8a\x21\xb1\xf8\x60\xfd\x25\x5d\xd1\x92\x5a\xe5\x1c\xee\xb9\x64\xea\xde\x53\x52\x28\xca\x20\x84\x79\x26\x23\xcb\x95\x84\xfe\x31\xe4\xa5\x08\xc0\x8a\xea\xa2\xca\x2d\x84\x20\xf1\x1e\xa6\xc5\xc1\x3f\xdd\x78\x53\x47\xec\x93\x82\x37\x55\xd2\x52\x2e\x51\x93\x13\xc8\x8f\x9e\x41\x71\x4f\xc6\x6e\x05\xe0\x0e\x1f\x03\xf9\x94\x49\xcb\x13\x84\xbe\xc1\x48\x49\x66\x8e\xc9\xd1\x33\xd8\x9c\xd4\xc7\x00\xd0\x07\x6e\x7e\x1d\xe7\x5b\x02\x80\xc6\x15\x6a\x83\x6c\x0c\x60\x75\x86\x5b\xd6\xe6\xe4\xe8\xe8\x19\x30\x6a\xe9\x18\xfe\x28\x4e\x29\xcf\x82\xc2\xe1\x31\x10\xc1\x25\x92\x93\x8a\xe6\xe4\xae\x15\x97\xd6\x38\x69\xe8\xfe\xe5\xb9\xa6\x72\x81\xe0\xbd\x57\x0c\x0d\x6c\x36\x95\x12\x40\x0e\x00\xeb\x31\xe4\xb9\x57\x61\xdf\x6c\xa0\x83\xb8\x36\x80\x92\x35\x6a\x9f\x8b\x5f\xb7\xfb\x5c\x0b\x6e\x8e\x5f\xd6\xcb\x22\x58\x9e\x46\xc9\x50\xf7\x6b\xf2\xa6\xcc\x58\x2b\x7f\x81\x5f\x37\xa1\x60\xa6\xd8\xba\x4a\xa9\xa4\x2b\x88\x04\x35\x26\x24\x92\xae\x66\x54\x43\xf9\x33\x60\x38\xa7\x99\xb0\x04\xb4\x12\x58\x30\xf9\x82\xba\x44\xd6\x89\x86\x80\xf1\x46\x37\xaa\x73\x35\x98\x8b\x8c\xb3\x46\xa6\x2b\x55\x99\x76\x38\x50\xb7\x64\x1c\xa4\xcc\x5a\x25\xab\xd2\x2a\x37\x64\x47\xcd\xaa\xc5\x42\x20\x44\x4a\x08\x9a\x1a\x64\xa4\xc8\x41\x45\x76\x10\x4a\x7a\x4d\xa6\x7a\xe1\x7a\xe8\x9f\x4b\x6d\x02\x54\x73\x3a\xc0\x87\x94\x4a\x86\x2c\x24\x73\x2a\x9c\x6c\x41\x75\xe8\xb5\x12\xcd\x51\x1d\x68\xae\xee\x53\x2a\x6b\x30\x46\x0f\x94\x14\x6b\x32\xb9\x2d\xe1\x6c\x03\x13\xf8\x4e\xee\x09\x55\x1e\x29\x39\x28\xcc\xff\xbf\x44\x03\xbf\x0c\x65\x87\x46\x77\xe2\x3a\xd3\x54\x32\x32\xf9\x8b\x9c\x99\xf4\xe5\xd3\xff\xaf\xb3\x34\x45\x3b\xb8\xc9\x92\x84\xea\x75\xe0\xd3\x56\x9e\x7d\xc6\x57\x3b\x69\xe7\xac\x89\xe8\xb6\x50\xca\x2c\xd5\x65\xd6\x64\xad\x03\x31\x13\x2d\x8c\xb5\xa8\xa4\x2b\x32\x29\x6f\x44\x20\xf8\x24\xa0\xd5\x13\xe6\x93\x49\x37\x22\x0b\xb1\x4e\x63\x17\x16\x68\x56\x83\x58\x25\x75\xb6\x63\xce\x18\xca\x90\xb8\xdb\xdf\x04\x0d\x5e\xab\x04\x9d\x43\x81\x2f\x78\x37\x84\x99\x38\xe0\x65\x6b\x13\xf8\x92\xd6\xcb\x7d\xd7\x62\x7b\x69\x54\xe3\xda\x4c\x23\x65\x91\xce\x92\x59\xfb\xba\x08\xfe\x98\x3f\xe0\x16\x13\xd2\xf1\x78\x3f\xdc\xc3\xda\x40\x23\xcb\x57\x48\x26\x79\x0e\xc5\xe4\x01\x6e\xf4\xd8\xea\x06\xbe\x6a\xdc\x0c\xe2\x51\x7b\x3e\x89\x47\x9d\x1b\xef\x92\xba\xd3\x9f\xa1\x78\xfa\x43\x12\x23\x5f\xc4\x76\x0c\xa7\xc3\x61\xfa\xf0\x12\x8a\x31\x64\x0c\x17\xc3\x6f\x5e\x42\x42\xf5\x82\xcb\x81\xc0\xb9\x1d\x8f\x5a\x04\x5d\x68\x8c\x86\xdf\xb8\x4c\xb4\x63\x9b\x56\x05\x19\xf8\x69\x43\xb3\x74\xe6\x1a\x40\xe9\x60\xb9\x29\xfe\x0f\x66\x4a\x33\xd4\xc8\xaa\xad\xb1\x9a\xa7\xcd\xce\xbd\x0c\x28\x4d\xb3\x8f\xd5\xaa\xd3\x7d\x02\xab\x3b\x09\xb7\xf1\xc4\xb5\xed\xc0\xb7\xf1\x2e\xfd\xc6\x52\x9b\x99\x7d\x9c\x5b\x9e\xec\xd5\xf8\x91\x72\x81\x6c\x1f\x67\x1a\xbb\x27\x62\x2f\xeb\x56\x59\x2a\xba\x8c\xc0\x6f\xa3\xec\xbe\x2f\x9b\x4d\xdb\x97\x76\xa7\xc8\x73\x3e\x07\xbc\x03\xcf\x01\x47\x20\xf3\x02\x0d\x81\xcd\xa6\x8e\x22\x73\x76\x34\x81\x3c\x07\x94\x0c\x5a\xa6\xf6\xa8\x47\x25\xe4\xb6\x3e\x97\x73\x45\x60\xbf\x7a\xd1\x87\xab\x8a\xd5\xe8\x06\x56\x3f\xcf\xbd\x37\x4e\xac\x7b\xdd\x2d\x9b\xe4\xf9\xf3\xed\x40\xcc\x1e\x73\x4b\x08\x07\xb9\xaf\xec\x41\x56\x99\x81\x83\xec\x2a\x0d\x07\xf9\x45\x2e\x76\xb9\xbb\xd9\x28\x1f\xeb\x86\xe7\xca\xac\xee\x0b\xdb\x16\xf1\xa8\xa2\xf7\x50\x62\x0d\x7e\xb5\x9c\x2b\x65\x51\x17\xd7\xad\x5c\x3e\xfd\xf0\x1e\x78\x72\x23\x25\x06\x09\x6b\xbe\x22\xe0\x40\xa7\xee\x4a\xbf\x78\xaa\x1b\xef\x3e\x8e\xed\x56\x5c\xcf\x98\xc6\xe2\x0a\xbd\x2f\x98\xa4\xde\x9c\xfb\x64\xf2\xaf\x7f\xc2\xe9\x70\x74\x0e\x03\xb8\x71\x1c\xf8\x1b\x26\xe9\x7f\xdf\x6c\xbf\x72\x12\x85\xe7\xfd\x7a\xf8\xec\x1f\xb7\x46\xc0\xe7\xfd\x9e\x57\x35\x0f\xfd\x47\x53\xa3\x9f\x7b\xc7\x1e\xd2\x28\xde\xaf\xe3\xb4\x6c\xcc\xcd\xb1\xfb\xde\xe9\xf7\xa2\x4c\x1b\xa5\x7b\x27\xbd\xd4\x4d\x80\xa8\x7b\xc7\x5e\xd1\x55\xfa\xdd\x39\xee\x80\xa9\xb6\x39\xca\xd8\xd4\xc5\xb6\xdf\x2b\x1b\x74\x6f\x3b\xd7\x95\x7f\xbb\xb3\xe1\x57\xd8\xd4\x98\xa8\x15\xfe\x07\xb3\xc7\x5e\x24\x78\xf4\xa5\xff\x94\x41\xa6\xa2\x2c\x41\x69\x3d\xa1\xa2\x62\xc4\x81\x70\x0b\xdc\x5a\xdd\xef\x35\xe1\x7b\x7c\x40\x77\xdb\x66\xb7\x66\xd7\xed\x72\xe7\x53\xc3\x2f\x6b\xbe\x1c\x5c\xcb\x79\x35\xf0\xcb\xef\xeb\x7f\x07\x00\x00\xff\xff\xfc\xef\x99\xd0\x70\x0f\x00\x00"

func dataNode_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataNode_handlerTemplate,
		"data/node_handler.template",
	)
}

func dataNode_handlerTemplate() (*asset, error) {
	bytes, err := dataNode_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/node_handler.template", size: 3952, mode: os.FileMode(420), modTime: time.Unix(1501694402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReport_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x5f\x8f\xe3\x34\x10\x7f\x66\x3f\xc5\x60\x24\x9e\x48\x7c\x65\x11\x9c\x16\x27\x12\x3a\x38\x21\x71\x70\xa7\xdb\x7d\xe1\xe9\xe4\xc6\xd3\xc4\x5a\xc7\x36\xb6\xd3\xbd\xaa\xea\x07\xe2\x6b\xf0\xc9\x90\xeb\x24\x4d\xb2\xbd\x8a\x3f\x12\x5a\xee\xa5\xf5\xfc\x32\x3f\x67\xe6\x37\xf1\x68\xcc\x3e\xfd\xfe\xf5\x8b\xbb\x5f\xdf\xfc\x00\x4d\x68\x55\x79\xc5\xe2\x1f\x28\xae\xeb\x82\xa0\x26\xe5\x15\x00\x6b\x90\x8b\xb8\x00\x60\x41\x06\x85\xe5\x9b\xce\x5a\x0c\xf0\x16\xad\x71\x81\xd1\x04\x26\x87\x16\x03\x87\xaa\xe1\xce\x63\x28\x48\x17\x36\xd9\x73\x32\x7d\xa4\x79\x8b\x05\xd9\x4a\x7c\x88\x5c\x02\x95\xd1\x01\x75\x28\xc8\x83\x14\xa1\x29\x04\x6e\x65\x85\xd9\xd1\xf8\x02\xa4\x96\x41\x72\x95\xf9\x8a\x2b\x2c\x56\xf9\xb3\x61\x2b\x25\xf5\x3d\x34\x0e\x37\x05\x69\x42\xb0\x37\x94\xb6\xfc\x7d\x25\x74\xbe\x36\x26\xf8\xe0\xb8\x8d\x46\x65\x5a\x3a\x02\xf4\x3a\xbf\xce\xbf\xa6\x95\xf7\x27\x2c\x6f\xa5\xce\x2b\xef\x09\x38\x54\x05\xf1\x61\xa7\xd0\x37\x88\x21\xe5\x4d\x87\xc4\xd9\xda\x88\x5d\xff\x6a\xcd\xb7\x50\x29\xee\x7d\x41\x34\xdf\xae\xb9\x83\xf4\x97\x09\xdc\xf0\x4e\x05\x02\xce\x28\x3c\x3e\x94\x35\x0f\xd2\xe8\x3e\x68\x00\x26\xe4\xc8\x8d\x79\x73\xa9\xd1\x65\x1b\xd5\x49\x31\xfa\xcc\xbd\xfa\xad\x63\x1c\xe8\x26\x3e\x31\xa4\x2e\x04\xa3\x21\xec\x2c\x16\x24\x19\x64\x41\x0b\xa6\xae\x15\x42\x65\x94\xe2\xd6\xa3\x20\x20\x78\xe0\x3d\x1c\x43\x48\xf8\x00\x73\x57\xc7\x9a\x7d\x96\xd8\x04\xb8\x93\x3c\xc3\xf7\x96\x6b\x81\xa2\x20\x1b\xae\xa2\xef\x11\x8d\xd1\x3b\xa3\xc6\x57\xcd\x42\x03\x60\xde\x72\x3d\x04\xe3\x5d\x66\xb4\xda\x91\xf2\x2e\x85\x73\x12\x86\xd1\xe8\x77\x81\x2a\x2b\xa3\xb3\xe3\xf6\xff\x95\x2b\xa3\x49\xca\x19\xc6\x17\xba\xae\x1d\xd7\x82\x94\x9f\xeb\xb5\xb7\xdf\x5e\xfe\x4d\x27\x25\xbb\xed\xda\x96\xbb\x1d\xa3\x7c\x52\x67\x2a\xe4\x76\x51\x76\x29\x46\x45\x4f\x1f\x4a\xaa\xd2\xf0\x99\x8d\x55\x9b\x85\xd8\xa9\x49\x8c\x83\xab\xe6\x5b\x52\x5e\x7d\xd2\x9f\x98\x92\xf1\xfe\xc8\x50\x52\xce\x15\xa9\xd5\xce\x36\x51\x16\x18\x57\x59\x63\xda\xa1\xda\x8d\x14\x02\x75\x41\x82\xeb\x70\x14\x0d\x7e\x34\x2d\xc6\x84\x18\x55\x72\x2e\x61\xa7\x3e\x90\xe5\xc4\x60\x54\xf3\x61\x79\xee\x58\x9c\x0e\x8d\x19\x53\x5b\x3b\xe4\xa2\x72\x5d\xbb\x9e\x1e\x17\x25\x1f\x3f\xcf\x64\xc0\x96\xcc\x32\x3e\x1f\xee\x5f\x63\x6b\x23\x90\xee\xf7\x90\xbf\xfc\x4d\x68\x38\x1c\x48\x39\x31\xfe\xce\xa6\xc0\xab\x20\xb7\x48\xca\xa1\x75\x9e\x68\x8c\x9a\x51\x36\xd6\xac\xca\xd7\x5b\x74\xb1\x4d\x32\xda\xac\x46\xdc\xf6\x44\x30\x1b\x98\x84\x00\xb0\x71\xa6\x3d\x22\xdf\x05\x38\x1c\x6e\x18\xb5\x23\x27\xf0\x75\x6c\x02\x29\x9e\x64\x1c\x7f\xb3\xb5\x71\x02\x1d\x8a\xde\xf4\xc1\x49\x3b\x5a\x95\xd1\x02\xb5\x1f\xed\xc6\x6c\x67\x1d\x88\x05\x57\xb2\x20\xca\x17\x0d\xd7\x35\x0a\x60\x34\x88\x23\x10\x83\x18\xc0\x28\x4e\x84\x69\x70\x8f\x99\xb7\xf7\xd2\xda\x25\x73\x00\x2f\x32\x5f\x72\xa9\x96\xc4\x1e\xbb\xc8\xbb\x33\x81\xab\x39\x2d\x41\x67\x58\x8c\x1e\xf3\x3e\x55\xe4\xba\x7c\x65\x6a\xcf\x68\x73\xfd\xcf\xdb\xb9\x33\x0f\xf3\x63\x3b\xdb\x41\x65\xbe\xcd\x56\xb1\x5d\x67\xad\xc8\x56\x73\xcf\x79\xb3\x38\x4f\x3d\x71\x57\x8b\x86\xbc\xdf\xbb\x58\x11\xc8\x5f\x99\xfa\xdd\xcf\xe8\x3d\xaf\xd1\x1f\x0e\xf3\x1e\x69\xcb\xfd\x3e\x8f\x52\xd8\x25\x19\x95\xc7\xc7\xde\xbf\x98\xd0\x48\x5d\x83\x3b\x7e\x92\x28\xf2\x73\x4c\x2d\x66\xc4\x65\xd3\x3b\xd3\x1d\x26\x8a\xa7\xa2\xfe\xdf\x35\x7f\x8b\xde\x74\xae\x42\xff\x2e\xe5\xf3\xf4\x75\xef\xcf\xef\xc7\x23\x7c\x9f\xd0\xd3\x57\xbe\xef\x7f\x1f\x8f\xf2\x7d\x42\x4f\x54\xf9\xe5\xd2\xf6\x43\xdd\xb8\xfb\x19\xa4\x71\x40\xfb\xe5\xc6\x98\x80\xee\x38\xb5\xa5\xe5\xe5\x51\xff\x03\xe5\xea\xd5\x7c\x4e\x2e\xcf\x86\x73\xef\xaf\x2e\xcd\x7f\xcb\x71\x7c\x3a\xfc\xc5\xfb\x92\xbf\xa1\xd4\x07\xdc\x62\x7e\x8f\xad\xcd\x37\x92\x92\xf2\x8f\xdf\xe1\xcb\x67\xab\x6f\x20\x83\xdb\xf8\x04\x7e\xc2\xd6\xfe\x9b\xf1\x2e\x09\x92\xee\x51\xe9\xfa\xc4\x68\xba\x62\xfe\x19\x00\x00\xff\xff\x4c\x3d\xab\xc4\x73\x0e\x00\x00"

func dataReport_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataReport_handlerTemplate,
		"data/report_handler.template",
	)
}

func dataReport_handlerTemplate() (*asset, error) {
	bytes, err := dataReport_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/report_handler.template", size: 3699, mode: os.FileMode(420), modTime: time.Unix(1501619188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index_handler.template":  dataIndex_handlerTemplate,
	"data/node_handler.template":   dataNode_handlerTemplate,
	"data/report_handler.template": dataReport_handlerTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index_handler.template":  &bintree{dataIndex_handlerTemplate, map[string]*bintree{}},
		"node_handler.template":   &bintree{dataNode_handlerTemplate, map[string]*bintree{}},
		"report_handler.template": &bintree{dataReport_handlerTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
