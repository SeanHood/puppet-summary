// Code generated by go-bindata.
// sources:
// data/index_handler.template
// data/node_handler.template
// data/report_handler.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndex_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xcd\x8e\xe4\x34\x10\x3e\x33\x4f\x61\x8c\xc4\x89\xc4\x3b\x2c\x02\xb4\x38\x91\x10\x3f\x5a\x09\x04\x2b\xcd\x5e\x38\x56\xc7\xd5\x6d\x6b\x1d\xdb\xd8\x95\xde\x69\xb5\xe6\x81\x78\x0d\x9e\x0c\x39\x4e\xd2\x9d\x30\xd3\x17\x24\x2e\x49\xd5\x57\x55\xf6\x57\x55\x2e\x5b\x7e\xfa\xe3\xef\x3f\xbc\xff\xe3\xdd\x4f\x4c\x53\x6f\xdb\x3b\x99\x7f\xcc\x82\x3b\x34\x1c\x1d\x6f\xef\x18\x93\x1a\x41\x65\x81\x31\x49\x86\x2c\xb6\xbf\x79\x85\xec\x57\x93\x48\x8a\x02\x14\x63\x8f\x04\xac\xd3\x10\x13\x52\xc3\x07\xda\x57\xdf\xf2\x6b\x93\x83\x1e\x1b\x7e\x34\xf8\x31\xf8\x48\x9c\x75\xde\x11\x3a\x6a\xf8\x47\xa3\x48\x37\x0a\x8f\xa6\xc3\x6a\x54\xbe\x60\xc6\x19\x32\x60\xab\xd4\x81\xc5\xe6\xbe\x7e\x35\x2f\x65\x8d\xfb\xc0\x74\xc4\x7d\xc3\x35\x51\x78\x23\x44\x0f\x8f\x9d\x72\xf5\xce\x7b\x4a\x14\x21\x64\xa5\xf3\xbd\x58\x00\xf1\xba\x7e\x5d\x7f\x2d\xba\x94\x2e\x58\xdd\x1b\x57\x77\x29\x71\x16\xd1\x36\x3c\xd1\xc9\x62\xd2\x88\x54\x72\x16\x73\xd2\x72\xe7\xd5\x69\xda\xda\xc1\x91\x75\x16\x52\x6a\xb8\x83\xe3\x0e\x22\x2b\xbf\x4a\xe1\x1e\x06\x4b\x9c\x45\x6f\x71\x34\x9a\x03\x90\xf1\x6e\x22\xcd\x98\x54\x66\x89\xcd\x79\x83\x71\x18\xab\xbd\x1d\x8c\x5a\x7c\xd6\x5e\xd3\xd2\x99\x07\xc6\x2b\x9f\x4c\x69\x20\xf2\x8e\xd1\x29\x60\xc3\x8b\xc2\x37\x61\xe4\x0f\x07\x8b\xac\xf3\xd6\x42\x48\xa8\x38\x53\x40\x30\xc1\x99\x42\xc1\x67\x18\xe2\x21\xf7\xec\xb3\x12\xcd\x19\x44\x03\x15\x3e\x06\x70\x0a\x55\xc3\xf7\x60\xb3\xef\x88\x66\xf6\xd1\xdb\x65\xab\x15\x35\xc6\x64\x0a\xe0\x66\x32\x29\x56\xde\xd9\x13\x6f\xdf\x17\x3a\x97\xc2\x48\x91\xfd\x6e\x84\x9a\xce\xbb\x6a\x5c\xfe\xff\x72\x95\xa2\x94\x72\x85\xc1\xa6\xae\xbb\x08\x4e\xf1\xf6\x73\xb7\x4b\xe1\xbb\xdb\xdf\x77\x43\x08\x48\xd5\xc3\xd0\xf7\x10\x4f\x52\xc0\x55\x9f\x85\x32\xc7\x4d\xdb\x8d\x5a\x2a\x7a\x39\x28\xa5\x4b\xf3\x31\x5b\xba\xb6\xa2\x38\xd8\x2b\x8e\xb3\xab\x83\x23\x6f\xef\x3e\x99\x26\xa6\x95\x30\x8d\x8c\xe0\xed\xba\x22\x07\x7b\x0a\x3a\x97\x85\x2d\x52\xa5\x7d\x3f\x77\x5b\x1b\xa5\xd0\x35\x9c\xe2\x80\x4b\xd1\xd8\x5b\xdf\x63\x4e\x48\x0a\x6b\xd6\x25\x1c\xec\x0b\x59\x5e\x29\x52\x38\x98\xc5\xe7\xc6\xe2\x32\x34\xfa\xbe\x7d\xeb\x13\x25\x29\xf4\xfd\x02\x12\xec\xf2\xc9\x2e\x41\x45\x19\xbf\xd5\xce\x47\x85\x11\xd5\xa4\x26\x8a\x26\x2c\x5a\xe7\x9d\x42\x97\x16\x5d\xfb\xe3\x6a\xac\x24\xc5\x55\x26\xa4\xc7\x6b\x4e\x0a\xd2\x5b\xfc\x81\x80\x9e\x37\x20\xba\x35\x2e\xc5\xf5\xb2\xe7\x73\x04\x77\x40\x56\x3f\x3d\xbd\xbc\xaf\xba\x6a\x96\xf3\x0a\xc5\xf9\x5c\xff\xfc\xa7\x72\x4f\x4f\xbc\x5d\xc4\x5c\xfc\xbc\xb8\xda\xc6\x9e\xcf\xf5\x48\x2f\xbb\x3c\x6b\xfd\x9e\xb6\xa6\x2d\x47\x74\x6a\xe1\x27\xc5\x58\xad\xb9\x6f\x97\x16\x86\x69\x04\xa4\x08\x2f\x22\x3a\x32\x31\x89\x7b\xef\x09\xe3\x78\xc6\x8b\x78\xfb\x62\x7c\xe1\x4a\xec\xbc\xad\x7a\xb5\xbc\x2a\xff\x3a\x63\xcf\x7a\x7f\x75\x6b\x5a\xb6\x97\xd7\xf5\xa8\xe4\xd7\x25\xbd\x11\x22\x11\x1e\xb1\xfe\x80\x7d\xa8\xf7\x46\xf0\xf6\xef\xbf\xd8\x97\xaf\xee\xbf\x61\x15\x7b\xc8\x16\xf6\x0b\xf6\xe1\xbf\x0c\x43\x29\x48\x79\x75\xca\x63\x23\x45\x79\x8c\xff\x09\x00\x00\xff\xff\x83\x58\xd0\x14\x9d\x07\x00\x00"

func dataIndex_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataIndex_handlerTemplate,
		"data/index_handler.template",
	)
}

func dataIndex_handlerTemplate() (*asset, error) {
	bytes, err := dataIndex_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index_handler.template", size: 1949, mode: os.FileMode(420), modTime: time.Unix(1501619151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNode_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdd\x6e\xdc\xb6\x12\xbe\x8e\x9f\x62\x0e\x0f\x72\xe0\x00\x96\x68\x27\x07\xe7\x04\x6b\x69\x81\xc2\x69\xd0\xb4\x40\x1b\xd4\xbe\x68\x51\xe4\x82\x2b\xce\xae\x98\x50\xa4\x4a\x8e\x64\x2f\x04\x3d\x50\x5f\xa3\x4f\x56\x50\x7f\x2b\x6d\x76\x7d\x53\xa0\x7b\xb1\x22\xe7\x9b\x21\x87\xf3\xcd\x70\x98\xfc\xeb\xdd\x4f\x77\x0f\xbf\x7e\xfc\x16\x72\x2a\xf4\xfa\x22\x09\x1f\xd0\xc2\xec\x52\x86\x86\xad\x2f\x00\x92\x1c\x85\x0c\x03\x80\x84\x14\x69\x5c\x37\x4d\xfc\xfe\x77\x69\xda\x36\xe1\xbd\xa0\x07\x0b\x24\x01\x59\x2e\x9c\x47\x4a\x59\x45\xdb\xe8\x2d\x9b\x43\x46\x14\x98\xb2\x5a\xe1\x63\x69\x1d\x31\xc8\xac\x21\x34\x94\xb2\x47\x25\x29\x4f\x25\xd6\x2a\xc3\xa8\x9b\x5c\x81\x32\x8a\x94\xd0\x91\xcf\x84\xc6\xf4\x26\xbe\x1e\x97\xd2\xca\x7c\x81\xdc\xe1\x36\x65\x39\x51\xb9\xe2\xbc\x10\x4f\x99\x34\xf1\xc6\x5a\xf2\xe4\x44\x19\x26\x99\x2d\xf8\x24\xe0\x6f\xe2\x37\xf1\xff\x78\xe6\xfd\x41\x16\x17\xca\xc4\x99\xf7\x0c\x1c\xea\x94\x79\xda\x6b\xf4\x39\x22\x8d\xfb\xf8\xcc\xa9\x92\xc0\xbb\xac\xdf\xc8\xaf\x38\xcf\x84\xa9\x85\xff\xec\xbb\xe5\x85\xf7\x48\x9e\xf7\x7a\x07\x28\xac\xfb\xd9\xb3\x75\x32\x20\xcb\xe5\x68\x5f\x62\xca\x08\x9f\x88\x7f\x16\xb5\xe8\xa5\xc3\x96\xf0\xa8\x8c\xb4\x8f\xb1\x35\xda\x0a\x09\x29\x6c\x2b\x93\x91\xb2\x06\x2e\x5f\x41\xd3\xab\x00\xd4\xc2\x75\x41\x26\x48\xc1\xe0\x23\xdc\x75\x1b\x7f\x7f\x1f\xdf\x05\xe1\x25\xeb\xb0\x3b\x6b\x48\x28\x83\x8e\x5d\x41\x73\xf1\x02\x3a\x9a\x56\x61\x04\x10\x36\x5f\x01\xfb\xb9\x32\xa4\x0a\x84\x4b\x8f\x99\x35\xd2\xbf\x62\x17\x2f\xa0\xbd\x1a\xb7\x01\x10\x4f\xca\xff\xb2\x6a\x0e\x02\x00\x87\x35\x3a\x8f\x72\x05\x40\xae\xc2\x03\xd4\x5e\x5d\x5c\xbc\x00\x29\x48\xac\xe0\xb7\x6e\x97\x7e\x2f\xe8\x0e\xbc\x02\xa6\x95\x41\x76\x35\xc8\x82\xde\x47\xab\x0c\xf9\xa0\x0d\xcb\x5f\xd3\x38\x61\x76\x08\xf1\x8f\x56\xa2\x87\xb6\x1d\x8c\x00\x1a\x00\xd8\xaf\xa0\x69\xe2\xc1\xf7\xb6\x85\x85\xc7\xe3\x02\x68\xe4\x64\xf6\xa9\xfb\x86\xd9\xa7\x51\xb1\x7d\x75\x3b\x0e\xbb\x60\xc5\x0e\x8d\x44\x77\x39\x8a\xdb\x9e\xb1\x19\x7f\x09\x1f\x6b\x20\xd9\x58\xb9\x1f\x28\x35\xa2\x86\x4c\x0b\xef\x53\x66\x44\xbd\x11\x0e\xfa\x4f\x24\x71\x2b\x2a\x4d\x0c\x9c\xd5\xd8\x81\x6a\x27\x02\x91\x23\xd1\x90\x48\x35\xd9\x66\x23\x57\xd1\x56\x57\x4a\x4e\x3a\x4b\xad\x61\xe9\xe0\x07\xba\x99\x4e\x70\xa9\x22\xb2\x66\x48\xad\x7e\xc2\x8e\xcc\xc8\xee\x76\x1a\x21\xb3\x5a\x8b\xd2\xa3\x64\x1d\x07\x83\x38\xb8\xd0\xcb\x47\xb1\x70\xbb\x50\xc2\xff\xee\xad\x19\x08\xa7\x44\x84\x4f\xa5\x30\x12\x65\xca\xb6\x42\x07\xdd\x4e\x1a\xbc\x77\x56\x4f\x5b\x2d\x5c\x0b\x79\x5f\x0a\x33\x3a\xe3\x5d\x64\x8d\xde\xb3\xf5\x43\xef\xce\x21\x30\x09\x0f\x7a\xcf\x98\xaa\xcc\x9a\xa8\x5b\xfe\x9f\x52\x4d\x78\x1f\xca\x85\x4c\x1c\xc5\x75\xe3\x84\x91\x6c\xfd\x1f\xb3\xf1\xe5\xed\xf3\xff\x1f\xab\xb2\x44\x8a\xee\xab\xa2\x10\x6e\x9f\x70\x31\xe3\x99\x4b\x55\x1f\xd1\xae\xe4\x14\xd1\x43\xa2\xf4\x2c\x8d\x69\x36\xb1\xb6\x70\xb1\xd2\x33\x1f\x47\x55\x23\x6a\xb6\xee\x2b\x22\xd1\x6a\x9d\x88\xe1\x06\xe5\x6c\xbd\x8c\xc8\x4e\xef\xcb\x3c\x84\x05\xa6\x51\x94\xdb\x62\x64\x3b\x57\x52\xa2\x49\x59\xa8\xfe\x29\x68\xf0\x9d\x2d\x30\x1c\x28\xe1\x5a\x2d\x43\x58\xe9\x33\xa7\x9c\x4d\x12\x6e\xc4\x38\x3c\x55\x16\x87\xa2\xb1\xd3\xd1\x36\x0e\x85\xcc\x5c\x55\x6c\xe6\xe5\xa2\xd5\xd7\x78\xa4\x08\x0b\xb6\x38\xf1\x69\x77\xcf\x5b\x83\xc8\x48\xd5\xc8\xd6\x4d\x03\x5d\xe3\x83\xd0\xf9\x0e\xb6\x09\xb7\xd3\x31\x93\xfc\x66\xde\x1e\xf3\x9b\x45\xc5\x07\x52\x8f\xee\x67\xe8\x3a\x4f\xca\x72\x54\xbb\x9c\x56\xf0\xfa\xfa\xba\x7c\xba\x85\xae\x0b\xae\xe0\xed\xf5\xcb\x5b\x28\x84\xdb\x29\x13\x69\xdc\xd2\xea\x66\x26\x70\x9d\xc5\xcd\xf5\xcb\xc0\xc4\x3c\xb6\xe5\x90\x90\x09\x2f\x27\x19\x89\x4d\xb8\x00\xfa\x03\xf6\x93\xee\x3f\xda\x58\x27\xd1\xa1\x1c\xa6\x9e\x9c\x2a\xa7\x59\xe8\x0c\x68\xfc\x34\xcf\x6d\xbd\xb8\x7d\x12\x72\x0b\xc2\x29\x5f\x7f\x78\x97\x70\xca\x8f\xa5\xf7\x24\xa8\xf2\xa7\x90\x07\x15\xd8\xf8\x5a\x3e\xdc\xf1\xa7\xa0\xf7\x42\x69\x94\xa7\x90\xbb\x3c\xf4\x8e\x93\xd0\x83\x25\xa1\x97\x40\xc2\xe7\xee\x2f\x1b\x4f\xdb\x9e\x3f\xa4\x9c\xa5\x93\xc3\xf0\x98\xe1\x4d\x13\x7f\x90\xd0\xb6\x21\x49\xe2\x0f\x32\x70\x1f\x12\x8c\xe4\xb1\x65\xd3\xc4\x21\x16\xd8\x3d\x9e\x4e\xa1\xdf\xd0\x59\x68\x6a\x7b\x67\xf0\x3e\x2e\x67\xe1\x21\x38\x67\xf1\x2e\x42\xc7\xe8\x71\x8c\xfa\xde\x3a\x61\x21\x2b\xc6\x32\x3e\x54\xf4\x57\x09\x78\x42\x92\x3b\xe0\xc3\x70\x6b\x2d\xa1\xeb\xaa\xa3\x1f\x3e\xdf\x27\xcf\x74\xc8\xcc\xea\xa8\x90\xd3\x9b\x13\xce\x5c\xac\x4b\xed\xff\x3e\x77\x79\x1e\xf7\xb2\xf9\xcd\x39\x3e\x09\x3d\x61\x8d\xf1\x17\x2c\xca\x78\xab\x38\x5b\xff\xf9\x07\xbc\xbe\xbe\xf9\x3f\x44\x70\x1f\x10\xf8\x01\x8b\xf2\xef\xdc\x8d\x7d\x40\xfa\x47\x48\xff\xf6\x48\x78\xff\x54\xff\x2b\x00\x00\xff\xff\xec\x26\xfc\x3e\xbb\x0b\x00\x00"

func dataNode_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataNode_handlerTemplate,
		"data/node_handler.template",
	)
}

func dataNode_handlerTemplate() (*asset, error) {
	bytes, err := dataNode_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/node_handler.template", size: 3003, mode: os.FileMode(420), modTime: time.Unix(1501619173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReport_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x5f\x8f\xe3\x34\x10\x7f\x66\x3f\xc5\x60\x24\x9e\x48\x7c\x65\x11\x9c\x16\x27\x12\x3a\x38\x21\x71\x70\xa7\xdb\x7d\xe1\xe9\xe4\xc6\xd3\xc4\x5a\xc7\x36\xb6\xd3\xbd\xaa\xea\x07\xe2\x6b\xf0\xc9\x90\xeb\x24\x4d\xb2\xbd\x8a\x3f\x12\x5a\xee\xa5\xf5\xfc\x32\x3f\x67\xe6\x37\xf1\x68\xcc\x3e\xfd\xfe\xf5\x8b\xbb\x5f\xdf\xfc\x00\x4d\x68\x55\x79\xc5\xe2\x1f\x28\xae\xeb\x82\xa0\x26\xe5\x15\x00\x6b\x90\x8b\xb8\x00\x60\x41\x06\x85\xe5\x9b\xce\x5a\x0c\xf0\x16\xad\x71\x81\xd1\x04\x26\x87\x16\x03\x87\xaa\xe1\xce\x63\x28\x48\x17\x36\xd9\x73\x32\x7d\xa4\x79\x8b\x05\xd9\x4a\x7c\x88\x5c\x02\x95\xd1\x01\x75\x28\xc8\x83\x14\xa1\x29\x04\x6e\x65\x85\xd9\xd1\xf8\x02\xa4\x96\x41\x72\x95\xf9\x8a\x2b\x2c\x56\xf9\xb3\x61\x2b\x25\xf5\x3d\x34\x0e\x37\x05\x69\x42\xb0\x37\x94\xb6\xfc\x7d\x25\x74\xbe\x36\x26\xf8\xe0\xb8\x8d\x46\x65\x5a\x3a\x02\xf4\x3a\xbf\xce\xbf\xa6\x95\xf7\x27\x2c\x6f\xa5\xce\x2b\xef\x09\x38\x54\x05\xf1\x61\xa7\xd0\x37\x88\x21\xe5\x4d\x87\xc4\xd9\xda\x88\x5d\xff\x6a\xcd\xb7\x50\x29\xee\x7d\x41\x34\xdf\xae\xb9\x83\xf4\x97\x09\xdc\xf0\x4e\x05\x02\xce\x28\x3c\x3e\x94\x35\x0f\xd2\xe8\x3e\x68\x00\x26\xe4\xc8\x8d\x79\x73\xa9\xd1\x65\x1b\xd5\x49\x31\xfa\xcc\xbd\xfa\xad\x63\x1c\xe8\x26\x3e\x31\xa4\x2e\x04\xa3\x21\xec\x2c\x16\x24\x19\x64\x41\x0b\xa6\xae\x15\x42\x65\x94\xe2\xd6\xa3\x20\x20\x78\xe0\x3d\x1c\x43\x48\xf8\x00\x73\x57\xc7\x9a\x7d\x96\xd8\x04\xb8\x93\x3c\xc3\xf7\x96\x6b\x81\xa2\x20\x1b\xae\xa2\xef\x11\x8d\xd1\x3b\xa3\xc6\x57\xcd\x42\x03\x60\xde\x72\x3d\x04\xe3\x5d\x66\xb4\xda\x91\xf2\x2e\x85\x73\x12\x86\xd1\xe8\x77\x81\x2a\x2b\xa3\xb3\xe3\xf6\xff\x95\x2b\xa3\x49\xca\x19\xc6\x17\xba\xae\x1d\xd7\x82\x94\x9f\xeb\xb5\xb7\xdf\x5e\xfe\x4d\x27\x25\xbb\xed\xda\x96\xbb\x1d\xa3\x7c\x52\x67\x2a\xe4\x76\x51\x76\x29\x46\x45\x4f\x1f\x4a\xaa\xd2\xf0\x99\x8d\x55\x9b\x85\xd8\xa9\x49\x8c\x83\xab\xe6\x5b\x52\x5e\x7d\xd2\x9f\x98\x92\xf1\xfe\xc8\x50\x52\xce\x15\xa9\xd5\xce\x36\x51\x16\x18\x57\x59\x63\xda\xa1\xda\x8d\x14\x02\x75\x41\x82\xeb\x70\x14\x0d\x7e\x34\x2d\xc6\x84\x18\x55\x72\x2e\x61\xa7\x3e\x90\xe5\xc4\x60\x54\xf3\x61\x79\xee\x58\x9c\x0e\x8d\x19\x53\x5b\x3b\xe4\xa2\x72\x5d\xbb\x9e\x1e\x17\x25\x1f\x3f\xcf\x64\xc0\x96\xcc\x32\x3e\x1f\xee\x5f\x63\x6b\x23\x90\xee\xf7\x90\xbf\xfc\x4d\x68\x38\x1c\x48\x39\x31\xfe\xce\xa6\xc0\xab\x20\xb7\x48\xca\xa1\x75\x9e\x68\x8c\x9a\x51\x36\xd6\xac\xca\xd7\x5b\x74\xb1\x4d\x32\xda\xac\x46\xdc\xf6\x44\x30\x1b\x98\x84\x00\xb0\x71\xa6\x3d\x22\xdf\x05\x38\x1c\x6e\x18\xb5\x23\x27\xf0\x75\x6c\x02\x29\x9e\x64\x1c\x7f\xb3\xb5\x71\x02\x1d\x8a\xde\xf4\xc1\x49\x3b\x5a\x95\xd1\x02\xb5\x1f\xed\xc6\x6c\x67\x1d\x88\x05\x57\xb2\x20\xca\x17\x0d\xd7\x35\x0a\x60\x34\x88\x23\x10\x83\x18\xc0\x28\x4e\x84\x69\x70\x8f\x99\xb7\xf7\xd2\xda\x25\x73\x00\x2f\x32\x5f\x72\xa9\x96\xc4\x1e\xbb\xc8\xbb\x33\x81\xab\x39\x2d\x41\x67\x58\x8c\x1e\xf3\x3e\x55\xe4\xba\x7c\x65\x6a\xcf\x68\x73\xfd\xcf\xdb\xb9\x33\x0f\xf3\x63\x3b\xdb\x41\x65\xbe\xcd\x56\xb1\x5d\x67\xad\xc8\x56\x73\xcf\x79\xb3\x38\x4f\x3d\x71\x57\x8b\x86\xbc\xdf\xbb\x58\x11\xc8\x5f\x99\xfa\xdd\xcf\xe8\x3d\xaf\xd1\x1f\x0e\xf3\x1e\x69\xcb\xfd\x3e\x8f\x52\xd8\x25\x19\x95\xc7\xc7\xde\xbf\x98\xd0\x48\x5d\x83\x3b\x7e\x92\x28\xf2\x73\x4c\x2d\x66\xc4\x65\xd3\x3b\xd3\x1d\x26\x8a\xa7\xa2\xfe\xdf\x35\x7f\x8b\xde\x74\xae\x42\xff\x2e\xe5\xf3\xf4\x75\xef\xcf\xef\xc7\x23\x7c\x9f\xd0\xd3\x57\xbe\xef\x7f\x1f\x8f\xf2\x7d\x42\x4f\x54\xf9\xe5\xd2\xf6\x43\xdd\xb8\xfb\x19\xa4\x71\x40\xfb\xe5\xc6\x98\x80\xee\x38\xb5\xa5\xe5\xe5\x51\xff\x03\xe5\xea\xd5\x7c\x4e\x2e\xcf\x86\x73\xef\xaf\x2e\xcd\x7f\xcb\x71\x7c\x3a\xfc\xc5\xfb\x92\xbf\xa1\xd4\x07\xdc\x62\x7e\x8f\xad\xcd\x37\x92\x92\xf2\x8f\xdf\xe1\xcb\x67\xab\x6f\x20\x83\xdb\xf8\x04\x7e\xc2\xd6\xfe\x9b\xf1\x2e\x09\x92\xee\x51\xe9\xfa\xc4\x68\xba\x62\xfe\x19\x00\x00\xff\xff\x4c\x3d\xab\xc4\x73\x0e\x00\x00"

func dataReport_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataReport_handlerTemplate,
		"data/report_handler.template",
	)
}

func dataReport_handlerTemplate() (*asset, error) {
	bytes, err := dataReport_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/report_handler.template", size: 3699, mode: os.FileMode(420), modTime: time.Unix(1501619188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index_handler.template": dataIndex_handlerTemplate,
	"data/node_handler.template": dataNode_handlerTemplate,
	"data/report_handler.template": dataReport_handlerTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index_handler.template": &bintree{dataIndex_handlerTemplate, map[string]*bintree{}},
		"node_handler.template": &bintree{dataNode_handlerTemplate, map[string]*bintree{}},
		"report_handler.template": &bintree{dataReport_handlerTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

