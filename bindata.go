// Code generated by go-bindata.
// sources:
// data/index_handler.template
// data/node_handler.template
// data/report_handler.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndex_handlerTemplate = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xe9\x72\xdb\x38\xf2\xff\x9e\xa7\xe8\x61\x32\x23\xa9\x62\x91\xb6\x73\x38\x51\x28\x56\x79\xec\xfc\x9d\xfc\x37\x87\x73\x4d\x76\x66\x2a\xb5\x81\x88\xa6\x08\x19\x04\x68\x00\xd4\xb1\x2a\x3d\xd0\xbe\xc6\x3e\xd9\x16\x78\x89\x94\xe4\x38\x4e\xe6\xd3\x66\xed\x0f\x02\xd0\xe8\x13\x3f\x34\x1a\xa0\xff\xd3\xe9\xeb\x93\xf7\xbf\x9f\x3f\x85\xd8\x24\x3c\xb8\xe5\xdb\x1f\xe0\x44\x8c\x87\x0e\x0a\x27\xb8\x05\xe0\xc7\x48\xa8\x6d\x00\xf8\x86\x19\x8e\xc1\x2b\x49\x11\x5e\x30\x6d\x7c\xaf\x18\x28\x88\x09\x1a\x02\x61\x4c\x94\x46\x33\x74\x32\x13\xf5\x1f\x39\x4d\x92\x20\x09\x0e\x9d\x29\xc3\x59\x2a\x95\x71\x20\x94\xc2\xa0\x30\x43\x67\xc6\xa8\x89\x87\x14\xa7\x2c\xc4\x7e\xde\xd9\x03\x26\x98\x61\x84\xf7\x75\x48\x38\x0e\x0f\xdc\xfd\x4a\x14\x67\xe2\x02\x62\x85\xd1\xd0\x89\x8d\x49\xf5\xc0\xf3\x12\x32\x0f\xa9\x70\x47\x52\x1a\x6d\x14\x49\x6d\x27\x94\x89\x57\x0f\x78\xf7\xdc\x7b\xee\x43\x2f\xd4\x7a\x3d\xe6\x26\x4c\xb8\xa1\xd6\x0e\x28\xe4\x43\x47\x9b\x05\x47\x1d\x23\x9a\x4a\x91\x0e\x15\x4b\x0d\x68\x15\xae\x35\x85\x92\xa2\x3b\xb9\xcc\x50\x2d\x72\x0d\x45\xb3\x7f\xe0\x1e\x1c\xba\xf7\x73\x89\x13\xed\x00\x13\x06\xc7\x8a\x99\xc5\xd0\xd1\x31\xb9\xf7\xe8\x7e\x5f\x4c\x8f\xc9\xfe\xdd\x87\x6f\xc6\x8f\x43\x3e\xfb\xfd\xe4\xec\xec\x3c\x3d\x7d\xf3\xe2\xb7\xf4\xc5\x2b\xb1\x1f\xbd\x25\x6f\x5f\x4f\x9e\x5d\xea\x83\x7b\xe6\xfe\xd9\x78\x72\xef\xe9\x3f\x1f\xec\xff\x5d\x9c\xbd\xb9\x0c\x3d\xf5\xe8\x65\x2c\xde\x9e\xfe\xe1\x40\xa8\xa4\xd6\x52\xb1\x31\x13\x43\x87\x08\x29\x16\x89\xcc\xb4\x13\xf8\x5e\x61\xe7\x17\x8c\xfe\xba\xf0\x1c\x79\x93\xcd\xe8\xec\xf6\xe5\x7d\xf8\xe0\xf9\x1b\x36\xda\x3f\x3c\xba\x9c\x2e\x26\xef\x5e\x46\xcf\x26\xaf\x5f\x92\x17\x17\x51\xf6\xf1\xb7\xf9\x1f\xf3\x0f\xe7\xe2\xe4\xff\x8f\x8f\xf8\x61\x72\xf2\xf1\xd5\xf3\xf4\xec\x71\x72\x76\x72\xfa\x68\x76\xf6\xea\x79\x78\x7e\x7a\xf4\x7e\x4e\xbe\xcb\x97\x90\x8a\x89\x76\x43\x2e\x33\x1a\x71\xa2\x30\x77\x84\x4c\xc8\xdc\xe3\x6c\xa4\xbd\x44\x26\x28\x8c\x3b\xd1\xde\xa1\x7b\xf0\xc8\x3d\xa8\x06\x4a\x6f\xfe\x02\x0d\x27\x31\x51\xa5\x82\x87\xee\x7e\xd9\x1d\x65\x82\x72\xbc\x46\x8b\x59\xa4\x38\x74\x0c\xce\x8d\x37\x21\x53\x52\x8c\x96\x60\x83\x19\x13\x54\xce\x5c\x29\xb8\x24\x14\x86\x10\x65\x22\x34\x4c\x0a\xe8\xf6\x60\x79\xeb\x56\x31\x09\xc0\xf3\xd6\x2d\xf8\x88\x90\xca\x34\xe3\xc4\x20\x98\x18\xc1\x90\x11\x47\x0d\x4c\x80\xcc\x14\x18\x4c\x52\x4b\xea\x8f\x51\xa0\x22\x56\x58\x83\x57\x11\x13\xa3\x02\x13\x13\x01\x31\x99\x32\x31\x06\x23\xe1\x02\x31\x05\x02\x1a\x53\xa2\xac\xd4\x50\x66\xc2\x40\x8c\x0a\x1b\xac\x33\x84\x90\x08\xd0\x88\x10\xcb\x19\x24\x44\x2c\x40\xc9\x99\xb6\x36\x28\x04\xa2\xd0\x9a\xb0\x36\xa8\xc1\x4a\x04\xb5\x2a\x0d\x8c\xd9\x14\x35\x64\x3a\xb7\xb4\xd0\xc2\x04\x65\x0a\x43\xc3\x17\xee\xb6\xb7\x61\x4c\xc4\x18\x29\x00\x0c\xe1\x4e\xb7\x73\xbb\xec\xff\x23\xd7\x00\x46\x75\x7a\x2e\x47\x31\x36\x31\xf4\xe1\xe0\x49\xc5\x95\x89\x8a\xaf\xe0\xaa\xfb\xd7\xf0\x45\x84\xf1\x5c\x59\xc9\x57\xf4\xaf\x62\xda\xb9\x36\x1f\x52\xda\x58\x96\xbe\x4d\xa1\xa8\x34\x44\x52\xc1\xe7\xd2\x88\xcf\xf0\x0b\x7c\x2e\x44\x7f\xde\xe1\x32\x8b\xa0\x5b\xfb\x1d\xc0\x3e\xf4\x60\xd9\xf2\x3d\x0f\x5b\xa7\xe7\xda\x8c\xbd\x9e\xd9\x83\x55\x4b\x42\xe9\x4b\x53\x40\xe9\x4e\x9b\xbf\x9c\xd7\x03\x58\xd5\x1e\x4d\x89\x82\x11\x51\x39\xc6\x4f\x89\x21\x30\x84\x65\x45\x03\xe0\x64\x84\x5c\x0f\xe0\xcf\xf5\x10\xc0\x72\xa9\xac\x1d\xe0\x9e\x29\x92\xc6\xb0\x5a\x35\x89\xce\x72\xe9\x9e\xda\xb0\xac\x56\xce\x5e\x9b\x0b\x05\x6d\xce\xfd\xd4\x20\x53\x62\x88\x46\x63\x35\x2d\x9b\x4c\xb9\xfe\x01\x74\x4e\x0a\xcf\x3b\x2d\x89\x23\x12\x5e\x8c\x95\xcc\x04\x3d\x91\x5c\xaa\x01\x74\x6e\xd3\xc7\x48\xa3\xa3\xf6\x34\x2b\xfb\xa6\x1e\x94\xfa\xae\x77\x02\xe0\xd3\xba\xb3\xda\x83\x9d\xd6\x7f\xa8\x30\x79\xad\xfd\x78\x64\xff\xbf\xdf\xfe\x5a\xe3\x5f\xe4\xc1\xff\xe5\xc8\xb9\xd6\xfc\xe8\x90\x22\xc5\xef\x37\xbf\x50\x77\x53\xdb\x3f\xd5\xa0\x5e\x3d\x69\xc2\x3b\x34\x73\x18\x02\x95\x61\x96\x9f\x13\x63\x34\x4f\x39\xda\xe6\xaf\x8b\xe7\xb4\xeb\x84\x44\x4c\x89\x76\x7a\x96\x70\x62\xcb\x95\xb9\xe9\x3a\x87\xd4\xe9\xd5\x42\xca\xc4\x9d\x2c\x7e\x25\x0a\x86\x20\x70\x06\xf9\x7e\xe9\x86\x66\xde\x0a\x98\x4d\xff\x03\xe8\x8c\x88\xea\x6c\x80\x7b\xd0\xda\x64\x0d\xa2\x4c\x6d\xd6\xd6\x83\x76\xdc\xf3\x92\x6b\xd0\x1a\x02\xa0\x4c\xa7\x9c\x2c\x06\x11\xe1\x1a\xf7\xda\x34\x6b\xf5\xc0\xa9\x0e\x2e\xb0\x86\xe6\x1d\xe8\xc3\x3b\x43\xc2\x0b\xa4\x4e\x93\x61\xd5\x62\x37\x52\x72\xc3\xd2\x4d\x23\x00\x12\x49\xad\x3f\x4c\x50\x9c\x77\x36\x34\xda\xa2\x41\x69\x0c\xcd\x00\x72\x83\xae\x16\xaf\x50\xa7\x52\x68\x36\xc5\x01\x18\x95\xb5\x4d\xcf\x6b\xbf\x6d\xcd\xf3\xe3\x39\x6e\x65\x83\x7c\x7e\xe1\xcd\x0e\x49\x16\x01\x1b\x03\x8b\xaf\x92\xb2\x29\xa4\xe5\xc9\xad\xed\xe6\xaa\x57\x1d\x08\xab\xb2\xd1\x2c\x06\x7c\xaf\xaa\xa5\xfd\x91\xa4\x8b\xb2\x3e\x10\x64\x0a\x21\x27\x5a\x0f\x1d\x41\xa6\x23\xa2\xa0\xf8\xe9\x53\x8c\x48\xc6\x8d\x03\x4a\x72\xcc\x89\x6c\x9c\x1f\xe4\x55\xd5\x00\x3e\x65\x35\xaf\x2d\xa7\x09\x13\xa8\xfa\x11\xcf\x18\xad\xe7\x00\xf8\x92\x57\x93\x46\x0a\x09\x0d\x55\x96\x8c\x1a\xf4\xbc\xaa\xde\x9e\xd1\x67\x06\x13\x20\xa1\x61\x53\x74\x02\x9f\x94\x55\xb7\xe7\x04\xfe\x28\x38\xcf\xd2\x14\x4d\xff\x5d\x96\x24\x44\x2d\x7c\x6f\x14\xf8\x1e\x09\x7c\x8f\xb3\x86\x5e\x4f\xf2\xda\x52\x8f\xb2\x69\xe9\xb0\x27\x48\xd5\xdc\x65\xbf\x13\x54\x9b\xd5\x8f\x0f\x8a\xcb\x46\xad\x26\x3e\x58\x13\x8b\xcd\x09\x8c\x0e\xab\x7d\x0a\x79\x15\x3f\x74\x62\x64\xe3\xd8\x0c\xe0\xe0\xc1\x7e\x3a\x7f\x02\xf9\x95\x62\x00\x8f\xf7\x7f\x7e\x02\x09\x51\x63\x26\xfa\x1c\x23\x33\x78\xb0\xee\xab\x9c\xe1\xc1\xcf\xb6\x78\x2b\x84\xb5\x42\x6c\x75\x44\x95\x92\xa0\xe1\x0b\x80\x9f\x06\xbf\x88\x91\x4e\x9f\xf8\x5e\xba\xb6\x2d\xe3\x8d\x25\xb5\xeb\xd9\x37\x64\xa4\x9b\x6b\xb2\x8e\x78\x23\xc2\x36\x1d\xf4\x8d\x1c\x8f\xad\x17\x86\x8c\x9c\x32\xe6\xb7\x09\xe7\x4e\x70\xcc\xf9\x8e\x20\x73\xf6\x45\xce\xe2\x60\x77\x82\x32\x6f\xfa\x3a\x25\xa2\x5e\x6b\x42\xc7\xe8\x14\xde\x35\x8a\x82\xbc\x82\x4d\x89\xd8\xb5\xa4\xd7\x68\x2b\x8f\x16\x27\xa8\x4e\xc9\xab\xf4\xb5\xaa\x98\xef\x50\x58\xd7\x74\x4e\x50\x1f\x6c\xb5\x94\x4d\x71\xbe\x97\xf1\xa0\xae\xa6\x9b\xe0\xb3\x45\x5a\x79\x1f\x6d\x2e\xd2\x4f\xfd\x3e\x1c\x73\x0e\xfd\x7e\x63\xb0\x02\x84\x5d\x93\x26\x7f\x4a\x04\x42\x44\x68\x5e\xff\x56\x8b\xda\xdc\x64\x45\x01\x59\xb2\x16\xe5\x64\x53\x00\x2f\x2b\xe6\xfe\x48\x2a\x8a\x0a\x69\xd9\xd5\x46\xb1\xb4\xee\x85\x52\x50\x14\xba\xee\xc7\x72\x9a\x6f\x99\x66\x9e\xf2\x8d\x0a\x36\xd2\x9a\x6f\xe2\x7c\x2b\xf9\x9e\x89\x77\xd1\xde\x19\x62\xae\x26\x22\x8a\x6d\x9a\xef\x6d\xaa\xa9\x0f\x6f\xab\x49\x6f\x1c\xde\xd6\xaa\xcd\x5c\x0b\xcb\x25\x8b\x00\x2f\xc1\xcd\xf5\x43\x09\x43\x07\x56\xab\x2a\x30\xd4\x4a\x54\x0e\x2c\x97\x80\x82\x6e\xca\xdc\x25\xa3\x02\x44\x43\x08\x13\x91\x74\xe0\x0b\x32\x72\x7c\x95\xf9\x4d\x48\x8a\x9e\xad\x34\x2e\xa9\x58\xad\x9c\xed\x80\xd0\xa0\xa6\xfa\x9e\xa1\x57\x4c\xc8\xad\xb9\x72\x46\xbd\xee\x2c\x41\xc7\xaa\x47\xdb\x1a\xda\x0a\xe7\xd8\x58\xad\x65\x63\x9b\x7d\x57\xd8\x37\x6b\x1f\xdf\xcb\xc1\xd1\x4c\xc5\x79\xca\x6a\x23\xbb\x4c\x09\x3b\xc1\x5d\x2d\xc4\x2e\x7c\x5f\x85\xea\xe6\x3d\xe9\x47\x02\xf6\xd5\x20\xde\x34\x7e\x13\xd4\xff\x65\xb0\xfb\x76\x28\x56\xc7\xc5\x4e\x2c\xd6\x1b\xfa\x26\x60\x6c\x5d\xf5\x7f\x64\x34\x36\xd2\xe1\x55\x70\x2c\xd2\xe3\xff\xc0\x58\x82\x71\x7d\x43\xde\x09\xc7\x75\xc9\x71\x23\x40\x6e\xbc\x3e\xfd\xc8\x90\x6c\x44\x70\x07\x28\x7f\x60\x1c\xb6\x3a\x3b\x2f\x18\x5f\x18\x8b\x15\x78\x75\x27\x92\xd2\xa0\x2a\x8e\xe5\xbc\xe9\x6c\x20\x79\xc7\xad\xab\x61\x5f\x6b\x06\xef\x27\xb4\x7f\x7f\x13\x69\xad\x2b\xce\xf6\xca\x14\x75\x7b\xfb\x43\xcd\x98\x99\x38\x1b\xe5\x2f\xea\xfa\x62\xee\xa5\xc5\x1d\x52\x17\x97\x3b\x27\x38\x63\xe6\x59\x36\x82\x73\x25\x27\x18\x1a\x78\x26\x13\xdc\xbe\x10\x40\x5d\xc7\x37\xfb\x8d\xe8\x7d\x95\xfd\x37\xe7\xf8\x36\x8f\xb5\xc1\x29\xba\x17\x98\xa4\x6e\xc4\x3c\x27\xf8\xf7\xbf\xe0\x70\xff\xe0\x28\x7f\x7a\xc1\x29\xc2\xdf\x30\x49\xbf\xc9\xc7\x0d\xc0\x14\x6b\x5c\xf7\xbf\xe6\x93\x03\xc0\x9d\x6e\xf5\x99\xa1\xdb\x6b\x3c\x83\xdc\xe9\x76\xdc\xea\xad\xfb\xcf\x7a\x33\x7e\xea\xf4\x5c\x24\x61\xbc\x9b\xc7\x72\x99\x98\xe9\x9e\x1b\x6a\xdd\xed\x84\x99\xd2\x52\x75\xf6\x3a\xa9\xcc\xdf\x82\x3a\x3d\x37\xcf\x56\xdd\x76\xcc\xae\x10\xd5\x14\x47\x28\x3d\xb1\x31\xef\x76\x8a\x1b\x55\x67\xfd\xf4\x56\xfc\xad\xf6\x6e\x2c\x53\x61\x22\xa7\x78\x8d\xd8\x9e\x1b\x72\x16\x5e\x74\xbf\x24\xb0\x7e\x37\xe4\x32\xcc\x1f\x66\xf2\x0f\x06\xa5\xe1\xc6\xa8\x6e\xa7\x0e\xdf\xb6\x82\x76\xb7\x49\x5e\x3f\x22\x41\xf9\x4c\x29\xe4\x0c\x86\x50\x7c\xcc\xea\xb6\xa8\xf9\x62\xb1\x04\xb7\x56\x87\xed\x01\xf6\xda\x4f\x67\x56\x92\x9d\xbb\x16\x75\xa7\x8b\x0d\x4b\xb1\x10\xd4\xb6\x34\x9f\x92\x7f\x23\xe8\xe4\x77\xf9\xa0\x03\x77\x73\x29\x6e\xa4\x64\xd2\x15\x72\xd6\x83\xbb\xd0\x29\x2f\xf0\x9d\x4d\x3f\xb6\x9a\xed\xf7\xb0\xe2\x19\xcc\xf7\x8a\xaf\xcf\xff\x09\x00\x00\xff\xff\x29\xc1\x34\x6c\x8e\x1e\x00\x00"

func dataIndex_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataIndex_handlerTemplate,
		"data/index_handler.template",
	)
}

func dataIndex_handlerTemplate() (*asset, error) {
	bytes, err := dataIndex_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index_handler.template", size: 7822, mode: os.FileMode(420), modTime: time.Unix(1502434843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNode_handlerTemplate = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\xef\x72\xdb\xb8\x11\xff\x5c\x3f\xc5\x16\x93\xab\xa4\x71\x44\x4a\xce\x3f\x47\x26\x35\x93\xda\x39\xc7\xad\x93\x38\xb1\x9b\xeb\x5d\x26\x1f\x20\x62\x29\x42\x06\x01\x1a\x00\x65\xa9\x1a\x3d\x50\x5f\xa3\x4f\xd6\x01\x49\x49\xa4\x24\x3b\xe9\xf5\xf2\x21\x02\xb0\xff\x77\xb1\x8b\x1f\x1d\xfc\xf9\xec\xe3\xe9\xcd\xaf\x57\x6f\x21\xb1\xa9\x18\x1e\x04\xee\x07\x04\x95\xe3\x90\xa0\x24\xc3\x03\x80\x20\x41\xca\xdc\x02\x20\xb0\xdc\x0a\x1c\x2e\x16\xde\xcf\x77\x4c\x2e\x97\x81\x5f\x1e\x94\xc4\x14\x2d\x85\x28\xa1\xda\xa0\x0d\x49\x6e\xe3\xee\x31\xa9\x93\x24\x4d\x31\x24\x53\x8e\xf7\x99\xd2\x96\x40\xa4\xa4\x45\x69\x43\x72\xcf\x99\x4d\x42\x86\x53\x1e\x61\xb7\xd8\x3c\x05\x2e\xb9\xe5\x54\x74\x4d\x44\x05\x86\x7d\xaf\xb7\x52\x25\xb8\xbc\x85\x44\x63\x1c\x92\xc4\xda\xcc\x0c\x7c\x3f\xa5\xb3\x88\x49\x6f\xa4\x94\x35\x56\xd3\xcc\x6d\x22\x95\xfa\xeb\x03\xff\x99\xf7\xcc\x7b\xe9\x47\xc6\x6c\xce\xbc\x94\x4b\x2f\x32\x86\x80\x46\x11\x12\x63\xe7\x02\x4d\x82\x68\x57\x86\x4c\xa4\x79\x66\xc1\xe8\x68\x63\x29\x52\x0c\xbd\xc9\x5d\x8e\x7a\x5e\x58\x28\x97\xdd\xbe\xd7\x3f\xf2\x9e\x17\x1a\x27\x86\x00\x97\x16\xc7\x9a\xdb\x79\x48\x4c\x42\x9f\x1d\x3f\xef\xca\xe9\x1b\xda\x3b\x7c\xf9\x69\xfc\x3a\x12\xf7\xbf\x9e\x9e\x9f\x5f\x65\x67\x9f\x2e\xbf\x64\x97\x1f\x64\x2f\xfe\x4c\x3f\x7f\x9c\xbc\xbb\x33\xfd\x67\xf6\xf9\xf9\x78\xf2\xec\xed\xbf\x5e\xf4\xfe\x29\xcf\x3f\xdd\x45\xbe\x3e\x7e\x9f\xc8\xcf\x67\xbf\x11\x88\xb4\x32\x46\x69\x3e\xe6\x32\x24\x54\x2a\x39\x4f\x55\x6e\xc8\x30\xf0\x4b\x3f\x1f\x71\xfa\xc7\xd2\xf3\xca\x9f\x6c\x67\x67\x7f\x2c\x37\xd1\x8b\x8b\x4f\x7c\xd4\x3b\x7a\x75\x37\x9d\x4f\xae\xdf\xc7\xef\x26\x1f\xdf\xd3\xcb\xdb\x38\xff\xe5\xcb\xec\xb7\xd9\x3f\xae\xe4\xe9\xdf\xde\xbc\x12\x47\xe9\xe9\x2f\x1f\x2e\xb2\xf3\xd7\xe9\xf9\xe9\xd9\xf1\xfd\xf9\x87\x8b\xe8\xea\xec\xd5\xcd\x8c\xfe\x5f\xb1\x44\x4c\x4e\x8c\x17\x09\x95\xb3\x58\x50\x8d\x45\x20\x74\x42\x67\xbe\xe0\x23\xe3\x9f\x26\x54\x5b\x6f\x62\xfc\x23\xef\xa5\xd7\xab\xb6\xa3\x5c\x32\x81\xab\x88\xfe\x00\x2b\xa9\x4a\x51\x56\x66\xfa\xc7\x5e\x7f\x75\xf0\xb8\x05\x3b\xcf\x30\x24\x16\x67\xd6\x9f\xd0\x29\x2d\x4f\xc9\xf0\xa0\x60\x82\x7b\x2e\x99\xba\xf7\x94\x14\x8a\x32\x08\x21\xce\x65\x64\xb9\x92\xd0\xee\xc0\xa2\x64\x01\x98\x52\x0d\x99\xe2\xd2\x1a\x08\xe1\xeb\xea\x74\xf5\x6f\xb1\xd0\x54\x8e\x11\xbc\x0f\x8a\xa1\x81\xe5\xf2\xe0\x4f\x1b\x92\xf7\x39\x97\x96\xa7\xb8\x5c\xc2\xd3\x5d\x41\x94\x6c\xb9\x5c\x1d\x7f\x3b\xa9\xdb\x13\x74\x84\xa2\xb0\xb7\x39\x8f\x95\x86\xb6\x23\x72\x08\x7b\x27\xc0\x21\xa8\xdc\xf2\x04\xca\xb1\x4d\x4e\x80\x1f\x1e\x42\xcd\x71\xa8\xd4\x78\x59\x6e\x92\x36\xf0\xc3\x3e\x74\x4e\x36\xc4\x65\xdd\x60\xa4\x64\xcc\xc7\x10\xd6\xa5\x5d\xee\x06\xd0\x12\x5c\x62\xab\xe6\x3e\xa3\x96\x0e\xea\x7c\x2b\x3b\x83\xea\xb7\x11\xaa\xe3\x36\x68\xcd\x00\xbe\x2e\x9a\x29\x28\x98\x07\x40\x0c\x46\x4a\x32\x43\xb6\x32\x54\x9a\x29\x23\xdc\x22\xc5\x5c\x88\x01\xc4\x54\x18\x6c\x50\x96\xdf\x6a\xd1\xd5\x28\x2a\x73\x45\x35\x5b\x4e\x6b\x34\x99\x92\x86\x4f\x71\x00\x56\xe7\x4d\x55\xc5\x88\x1d\x6c\x79\xcc\xb8\xc9\x04\x9d\x0f\x76\xb8\x01\xdc\x0d\x1b\xb4\xae\xf2\x2c\x43\x0b\x55\xd5\x5b\x0d\xdf\x9a\xea\x95\x12\x96\x67\xdb\x2e\x01\xa4\x8a\xb9\x9c\x73\xc9\x70\xd6\xda\xb2\xe1\xa6\x82\x36\x18\xd9\xbd\xb1\x37\x76\x89\x9a\xa2\x7e\x48\xb9\x44\xaa\xd1\xd8\x47\xd4\xbb\x00\x1f\x56\x5e\xbc\x0e\xbb\xae\xcf\xde\xcc\x70\x4f\x99\x37\x69\xdb\xe3\xb5\xab\xd9\xd6\xc1\xfc\xbb\x6a\xf6\xa4\xbf\x72\xea\xb2\xbc\x52\x3b\xa2\xdf\x13\xae\x2e\xe3\xb5\xd5\x5c\x8e\x07\xd0\xfa\x42\x45\xde\x2c\x1f\xd4\x1b\x66\xe5\xf9\xc1\x7e\xe2\x7a\xb9\x3c\x68\xb4\x98\x9d\x41\x08\x4c\x45\x79\x31\xb7\xc6\x68\xdf\x0a\x74\xcb\xbf\xce\x2f\x58\x9b\x44\x54\x4e\xa9\x21\x1d\x47\x38\x75\x8f\xf4\xcc\xb6\xc9\x11\x23\x9b\x96\xad\xa6\x55\x3a\xbf\xe4\x12\x21\x04\x89\xf7\x50\x0c\xdb\x76\x64\x67\x4f\xab\x16\xee\x9c\x54\x46\x4b\x2f\xea\x53\x31\xf0\x57\xa0\x22\x18\x29\x36\xaf\x06\xa5\xa4\x53\x88\x04\x35\x26\x24\x92\x4e\x47\x54\x43\xf9\xd3\x65\x18\xd3\x5c\x58\x02\x5a\x09\x2c\x88\x7c\x4c\x5d\x23\x55\x6f\x35\x40\xc0\xf8\x5a\xd6\xe1\x0a\xca\x25\xea\x6e\x2c\x72\xce\xd6\x3c\x00\x81\x12\x2b\xa6\x91\x46\xca\x22\x9d\xa7\xa3\x1a\xbd\x80\x17\xbb\x1c\x5d\x6e\x31\x25\xc3\x80\x56\xb8\xc3\x27\xc3\x60\x34\x2c\x3b\xac\x7b\x9d\xa7\x29\xd5\xf3\xc0\x1f\x0d\x03\x9f\x0e\x03\x5f\xf0\x1f\x53\x08\x34\xb2\x7c\x8a\x64\xb8\x58\x40\x81\xa7\xc0\x01\xaa\xba\x74\xe0\x2b\xb1\x0e\xd0\x67\x7c\x5a\xe5\xc9\x97\x74\xb5\xdc\x17\xf6\x26\x29\x49\xbf\x8e\xd5\x92\xfe\x9a\x50\x56\x18\x38\x0b\x57\xc5\x86\x02\x00\x85\x24\x41\x3e\x4e\xec\x00\x8e\x7a\xbd\x6c\x76\x02\x05\x1a\x1b\xc0\xeb\xde\x4f\x27\x90\x52\x3d\xe6\xb2\x2b\x30\xb6\x83\x17\x9b\xbd\x2e\x04\x5e\xfc\xe4\xde\xbd\x52\xd9\xda\x4c\x36\xfc\x8b\x1c\x99\xec\x24\xf0\xb3\xf5\x99\xa5\x23\x81\x2b\x9f\xcb\x4d\xf1\x7f\x77\xa4\x34\x43\x8d\xac\xda\x1a\xab\x79\xb6\xde\xb9\xb9\x8c\xd2\xac\xf7\xc5\x54\xa9\x57\xd6\xea\x46\xd6\x6d\x32\x74\xaf\x60\xe0\xdb\x64\xfb\xfc\xda\x52\x9b\x9b\x7d\x94\x1b\x9e\xee\x95\xf8\x99\x72\x81\x6c\x1f\xe5\x34\x71\x2f\xee\x5e\xd2\x8d\xb2\x54\x34\x09\x81\x5f\xf7\xb2\xf9\x5c\x6f\x9e\x5f\x17\x4b\xa3\xbd\x17\x0b\x1e\x03\xde\x81\xe7\x3c\x47\x20\x71\xe1\x0e\x81\xe5\x72\x95\x46\xe6\x14\x69\x02\x8b\x05\xa0\x64\xb0\x5c\x3e\x2a\x1f\x95\x4e\xd7\x15\x70\x19\x2b\x02\x0f\xc8\xbb\xe7\xaf\x5b\xdd\x7c\x8d\x0e\xbb\xfb\x8b\x85\x77\xe1\xf8\x9a\xbd\x63\xd9\x70\xb1\x78\xb2\xf9\x36\x60\xbb\xd4\xd2\x87\xbd\xd4\xf5\x9d\xe0\x29\x12\x67\x14\xdd\x2a\x24\x8b\x85\xf7\xc6\x3a\x53\xd5\xe2\x01\xc5\x65\x91\x1e\x24\x57\x95\x7a\x90\x5e\x94\x6b\x9b\xba\x5d\xb0\x3a\x4c\x0a\xfc\xe2\x26\xae\x5a\x72\xd3\x9d\x3b\x97\x7e\xcf\x49\xa2\xc1\xaf\x96\xb1\x52\x16\x75\xd1\x8a\xe5\xf2\xf1\x99\xd6\xcc\x78\x83\x43\x74\x53\xd6\x7d\xde\x60\x00\x08\x72\x51\x9b\xa9\x5b\xc4\x62\x3c\x6d\xe6\xda\x0a\xfe\x8e\xb9\x4d\xf2\x51\x01\x7a\xcd\xed\xcc\xcf\xca\x41\x67\xca\x41\x47\x86\xe7\xdc\xbe\xcb\x47\x70\xa5\xd5\x04\x23\x0b\xef\x94\xeb\x9a\xdd\xc9\xe7\xb2\x92\x8b\x86\xbb\x9b\x2c\xfd\xa0\xff\xff\xbb\xc4\xef\x8b\xd8\x58\x9c\xa2\x77\x8b\x69\xe6\xc5\xdc\x27\xc3\xff\xfc\x1b\x8e\x7a\xfd\x57\xd0\x85\x6b\x47\x81\xbf\x63\x9a\xfd\x8e\x18\x9b\x9b\xef\x7c\x07\x54\x0a\x9e\xb4\x57\xd0\xbf\xdd\xa9\xa1\x87\x27\xed\x96\x57\x4d\x4b\xfd\x75\xdd\x91\xdf\x5a\x1d\x0f\x69\x94\xec\x97\x71\x52\x36\xe1\xa6\xe3\xbe\x73\xdb\xad\x28\xd7\x46\xe9\xd6\xd3\x56\x81\x64\x51\xb7\x3a\x5e\x31\x46\xdb\x5b\x90\x76\xbf\xaa\xba\x3a\xca\xd8\xa9\xcb\x70\xbb\x55\xbe\x61\xad\x3a\x98\x87\x1d\x94\xf6\x43\x3a\x35\xa6\x6a\x8a\xdf\x51\xdb\xf1\x22\xc1\xa3\xdb\xf6\x63\x0a\xd7\xb0\x46\xa8\xa8\x00\x09\x10\x6e\x1c\xb7\x56\xb7\x5b\xeb\xf4\xed\x1a\x68\x6e\x1b\xdf\x28\x0e\xce\x6c\xb6\x0e\x46\x49\x75\x0f\x21\x94\x1f\x7f\xed\x35\xda\x59\x57\xcb\xe1\xee\xed\xf2\xf0\xa7\x80\x9d\x26\x2a\x74\x9a\x1c\xef\x46\xd5\x93\x36\xd6\x5c\xc5\x52\x51\xd3\xd5\x82\x25\xb1\xa9\x68\xb7\x02\x93\x51\x39\x6c\xc1\x61\xa1\xc5\x8b\xb5\x4a\xdb\x52\xdd\x77\xe0\x10\x5a\x81\x5f\x12\xb7\x03\xd9\x59\x6e\x7d\xb2\xfa\xe5\x28\x2a\xa1\x5a\x89\xd0\x02\xbf\xfc\x0b\xd1\x7f\x03\x00\x00\xff\xff\x57\x85\x84\xca\x32\x12\x00\x00"

func dataNode_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataNode_handlerTemplate,
		"data/node_handler.template",
	)
}

func dataNode_handlerTemplate() (*asset, error) {
	bytes, err := dataNode_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/node_handler.template", size: 4658, mode: os.FileMode(420), modTime: time.Unix(1502434882, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReport_handlerTemplate = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xcd\x6e\x1b\x37\x10\xbe\xe7\x29\xa6\x2c\xda\x53\x77\x69\xd5\x45\x5b\x28\x5c\x02\x45\x5a\x37\x40\xdd\xc4\x88\x73\xe9\x29\xe0\x2e\x47\x5a\xd6\xfc\xd9\x92\x5c\xd9\x86\xa0\x07\xea\x6b\xf4\xc9\x8a\xfd\xd1\x4a\xbb\x92\x1c\x1b\x3e\x25\x2d\x0c\x58\x9c\xe1\x7c\x23\x72\xbe\x8f\xa4\xc7\xec\x8b\x9f\xdf\xbe\x7a\xff\xc7\xd5\x2f\x50\x46\xa3\xf9\x0b\xd6\x7c\x80\x16\x76\x99\x11\xb4\x84\xbf\x00\x60\x25\x0a\xd9\x0c\x00\x58\x54\x51\x23\xbf\xaa\xab\x0a\x23\xbc\xc3\xca\xf9\x08\xeb\x35\xa4\x17\x7f\x49\x0b\x9b\x0d\xa3\x5d\x40\x17\x6c\x30\x0a\x28\x4a\xe1\x03\xc6\x8c\xd4\x71\x91\xfc\x48\xf6\xa7\xac\x30\x98\x91\x95\xc2\xdb\x26\x0f\x81\xc2\xd9\x88\x36\x66\xe4\x56\xc9\x58\x66\x12\x57\xaa\xc0\xa4\x35\xbe\x01\x65\x55\x54\x42\x27\xa1\x10\x1a\xb3\x59\x7a\xb6\x4d\xa5\x95\xbd\x81\xd2\xe3\x22\x23\x65\x8c\x55\x98\x53\x6a\xc4\x5d\x21\x6d\x9a\x3b\x17\x43\xf4\xa2\x6a\x8c\xc2\x19\x3a\x38\xe8\x79\x7a\x9e\x7e\x4f\x8b\x10\x76\xbe\xd4\x28\x9b\x16\x21\x10\xf0\xa8\x33\x12\xe2\xbd\xc6\x50\x22\xc6\xae\x08\x74\x5b\x05\x96\x3b\x79\xdf\x7f\xb7\x15\x2b\x28\xb4\x08\x21\x23\x56\xac\x72\xe1\xa1\xfb\x48\x24\x2e\x44\xad\x23\x01\xef\x34\xb6\x93\x6a\x29\xa2\x72\xb6\x5f\x35\x00\x93\x6a\xc0\x36\x1b\x17\xca\xa2\x4f\x16\xba\x56\x72\x88\x69\xe3\x9c\xde\x86\xe5\x1e\x85\x2c\x7c\x6d\xf2\x71\x84\x56\x87\x11\x89\x8a\x68\x08\x67\xa2\x2f\x0d\x25\x9c\xe5\x3d\x71\xc9\x75\x6d\x8c\xf0\xf7\x8c\xe6\x9c\x51\xc1\x19\xd5\xea\xe9\x09\xad\x93\x48\xf7\xb8\x27\x7c\x24\x84\xa7\xa4\x05\x51\x44\xb5\x42\xc2\x7d\xab\xa8\x03\x20\x75\x7a\x28\x1b\x95\x6a\xd5\x57\x9f\x5a\xb1\x1d\x1e\x2b\xe6\xae\xd4\xe5\x8c\xbf\x5d\xa1\x6f\x94\xc6\x68\x39\x7b\x1a\x05\xfb\x51\xde\xdd\x8e\x4b\x3f\xca\xa0\x93\x60\x92\x19\x34\x03\x23\x93\xd9\x38\x72\xb7\xee\xd3\xd0\x1d\x76\x0c\x06\x60\x15\xef\x4f\x9b\x5b\xec\x1f\x38\xb8\x2d\x55\x51\x82\x17\x16\x44\x77\x12\x7f\x8a\xb0\xd9\xcc\x19\xad\x26\x09\xa2\xc8\x35\x6e\xbf\xb0\x33\xda\xdf\x49\xee\xbc\x44\x8f\xb2\x37\x43\xf4\xaa\x1a\xac\xc2\x59\x89\x36\x0c\x76\xe9\x56\x7b\x85\xdd\x25\xf7\x9c\x45\xc9\x5f\x95\xc2\x2e\x51\x02\xa3\x51\xb6\x8e\x66\x41\x5b\x67\x7b\x3b\x48\xce\x68\xf4\xa7\xf0\xd7\x37\xaa\xaa\xa6\xf8\xad\xf3\x11\xf8\x0b\xa1\xf4\x14\xde\xfb\x1e\x81\x7e\xef\xa2\xd0\x63\x70\xe7\x3a\x89\x65\xb4\xad\xca\x03\x3c\x8f\xcc\xde\x18\x54\x79\x0e\xed\x25\x93\x91\x8e\x82\x24\x77\x31\x3a\x33\x87\x59\x75\x07\xc1\x69\x25\xe1\x4b\x79\xde\xfc\xbc\x84\xf6\x12\x9c\xcf\xce\xce\xbe\x22\xfc\xd2\x2d\x03\xa3\xe5\xf9\x27\x28\xe3\xf5\xda\x37\x62\x80\xf4\xd2\x2d\x3f\xfc\x8e\x21\x88\x25\x86\xcd\x66\x2a\xf5\xf5\x3a\x6d\x6a\x5e\x4d\xc1\xa8\x03\x1e\x46\xbf\x71\xb1\x54\x76\x09\xdd\xe5\x81\x32\x3d\x86\xb4\x72\x04\x7c\x3c\x4d\xeb\xb5\x5a\x40\xfa\x0e\x83\xab\x7d\x81\xe1\xc3\xa0\xa7\xe7\xd2\xd8\x25\xfa\x44\x89\x64\xb5\x9e\x1e\xa3\x81\xdb\x69\xad\x26\x8c\xb5\x0f\x41\x43\xf1\x1b\x61\xa6\x6c\x9e\x48\xbd\x05\xb1\x60\x84\xd6\x9c\x15\x4e\x62\x93\xe1\x42\x69\xdc\x6c\xe6\xeb\x75\x7a\xa9\x2c\x36\x92\x69\x67\x18\xed\xe3\x26\xef\x48\xb7\xef\xfa\xf8\xc4\xa1\x46\xfa\xe0\xa7\xa9\x66\x9c\xec\x84\x86\x76\x57\xe2\x73\x45\xd4\x67\xfa\xac\x55\xd4\xef\xf1\x7f\x19\x4d\x65\xd4\xbf\x8c\xcf\x57\x51\x9f\xe8\xb3\x56\xd1\xb4\x58\xfb\x82\xf8\x6f\xa8\x68\x32\xc1\x2a\xfe\xb5\xcd\x43\xf5\x72\x78\x2e\x8f\x78\x4a\x0f\xb4\x1f\x2e\x9c\x8b\xe8\x41\xc9\x8c\x74\xc3\x87\x5b\x99\x07\xb5\x60\x64\xf2\xdd\x21\x8b\x7b\xad\xd4\xe1\x9f\x98\x4d\xc5\xc5\xa4\xcf\x5b\xaa\x58\xd6\x79\xdb\xda\x85\x9b\x3b\x5a\x75\xdd\x4d\xe8\xba\x1b\xc2\x7f\x55\xf1\x75\x9d\xc3\x95\x77\x7f\x62\x11\xe1\xb5\x33\x78\xac\x2f\xf9\x68\x69\x1f\xb1\xfe\x29\x19\x1f\x8d\x7f\x68\xb7\x47\xf7\x1a\x22\xae\x30\xbd\x41\x53\xa5\x0b\x45\x09\xff\xe7\x6f\xf8\xf6\x6c\xf6\x03\x24\x70\xdd\xcc\xc0\x6f\x68\xaa\xa3\x5d\xd7\x68\x6f\xa7\x54\xc2\x68\xc7\x69\xd7\xea\x76\x1d\x2e\xa3\xdd\xbf\x04\xfe\x0d\x00\x00\xff\xff\x4f\xd6\x29\xcd\x23\x10\x00\x00"

func dataReport_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataReport_handlerTemplate,
		"data/report_handler.template",
	)
}

func dataReport_handlerTemplate() (*asset, error) {
	bytes, err := dataReport_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/report_handler.template", size: 4131, mode: os.FileMode(420), modTime: time.Unix(1502435056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index_handler.template":  dataIndex_handlerTemplate,
	"data/node_handler.template":   dataNode_handlerTemplate,
	"data/report_handler.template": dataReport_handlerTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index_handler.template":  &bintree{dataIndex_handlerTemplate, map[string]*bintree{}},
		"node_handler.template":   &bintree{dataNode_handlerTemplate, map[string]*bintree{}},
		"report_handler.template": &bintree{dataReport_handlerTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
