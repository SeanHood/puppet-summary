// Code generated by go-bindata.
// sources:
// data/index_handler.template
// data/node_handler.template
// data/report_handler.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndex_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xeb\x72\xdb\x36\xf6\xff\xfc\xf7\x53\x9c\x22\x69\x25\x4d\x4d\xd2\x76\x92\x3a\x51\x24\xcd\xb8\x76\xff\x4e\x76\xd3\xd4\x69\xd2\x76\xdb\x4e\x66\x03\x11\x47\x22\x64\x10\xa0\x01\x50\x97\xd5\xe8\x81\xf6\x35\xf6\xc9\x76\xc0\x9b\x48\x5d\xec\xb8\xe9\xec\x87\xcd\x26\x33\x11\x6e\xe7\xfe\x03\x70\x0e\x98\xde\x17\x17\x3f\x9c\xbf\xfb\xf5\xea\x3b\x88\x6c\x2c\x06\x07\x3d\xf7\x03\x82\xca\x71\x9f\xa0\x24\x83\x03\x80\x5e\x84\x94\xb9\x06\x40\xcf\x72\x2b\x70\xf0\x5a\x31\x84\x57\xdc\xd8\x5e\x90\x0f\xe4\x93\x31\x5a\x0a\x61\x44\xb5\x41\xdb\x27\xa9\x1d\x79\x4f\x49\x7d\x4a\xd2\x18\xfb\x64\xca\x71\x96\x28\x6d\x09\x84\x4a\x5a\x94\xb6\x4f\x66\x9c\xd9\xa8\xcf\x70\xca\x43\xf4\xb2\xce\x21\x70\xc9\x2d\xa7\xc2\x33\x21\x15\xd8\x3f\xf6\x8f\x4a\x56\x82\xcb\x6b\x88\x34\x8e\xfa\x24\xb2\x36\x31\xdd\x20\x88\xe9\x3c\x64\xd2\x1f\x2a\x65\x8d\xd5\x34\x71\x9d\x50\xc5\x41\x35\x10\x3c\xf2\x1f\xf9\xdf\x04\xa1\x31\xeb\x31\x3f\xe6\xd2\x0f\x8d\x21\xa0\x51\xf4\x89\xb1\x0b\x81\x26\x42\xb4\xa5\x20\x13\x6a\x9e\x58\x30\x3a\x5c\x4b\x0a\x15\x43\x7f\x72\x93\xa2\x5e\x64\x12\xf2\xa6\x77\xec\x1f\x9f\xf8\x8f\x33\x8e\x13\x43\x80\x4b\x8b\x63\xcd\xed\xa2\x4f\x4c\x44\x1f\x3d\x7d\xec\xc9\xe9\x19\x3d\xfa\xfa\x9b\x37\xe3\x67\xa1\x98\xfd\x7a\x7e\x79\x79\x95\x5c\xbc\x79\xf5\x73\xf2\xea\xb5\x3c\x1a\xfd\x48\x7f\xfc\x61\xf2\xe2\xc6\x1c\x3f\xb2\x8f\x2f\xc7\x93\x47\xdf\xfd\xe3\xc9\xd1\xdf\xe4\xe5\x9b\x9b\x30\xd0\x4f\xbf\x8f\xe4\x8f\x17\xbf\x11\x08\xb5\x32\x46\x69\x3e\xe6\xb2\x4f\xa8\x54\x72\x11\xab\xd4\x90\x41\x2f\xc8\xf5\xbc\x45\xe9\x8f\x73\xcf\x69\x30\xd9\xf4\xce\x6e\x5b\xde\x85\x4f\x5e\xbe\xe1\xc3\xa3\x93\xd3\x9b\xe9\x62\xf2\xf6\xfb\xd1\x8b\xc9\x0f\xdf\xd3\x57\xd7\xa3\xf4\x97\x9f\xe7\xbf\xcd\x7f\xba\x92\xe7\x7f\x39\x3b\x15\x27\xf1\xf9\x2f\xaf\x5f\x26\x97\xcf\xe2\xcb\xf3\x8b\xa7\xb3\xcb\xd7\x2f\xc3\xab\x8b\xd3\x77\x73\xfa\x49\xb6\x84\x4c\x4e\x8c\x1f\x0a\x95\xb2\x91\xa0\x1a\x33\x43\xe8\x84\xce\x03\xc1\x87\x26\x88\x55\x8c\xd2\xfa\x13\x13\x9c\xf8\xc7\x4f\xfd\xe3\x72\xa0\xb0\xe6\x4f\x90\x70\x1e\x51\x5d\x08\xf8\xc6\x3f\x2a\xba\xc3\x54\x32\x81\x77\x48\xb1\x8b\x04\xfb\xc4\xe2\xdc\x06\x13\x3a\xa5\xf9\x68\x01\x36\x98\x71\xc9\xd4\xcc\x57\x52\x28\xca\xa0\x0f\xa3\x54\x86\x96\x2b\x09\xed\x0e\x2c\x0f\x0e\xf2\x45\x00\x41\xb0\x6e\xc1\x2f\x08\x89\x4a\x52\x41\x2d\x82\x8d\x10\x2c\x1d\x0a\x34\xc0\x25\xa8\x54\x83\xc5\x38\x71\x53\xde\x18\x25\x6a\xea\x98\xd5\x68\x35\xb5\x11\x6a\xb0\x11\x95\x10\xd1\x29\x97\x63\xb0\x0a\xae\x11\x13\xa0\x60\x30\xa1\xda\x71\x0d\x55\x2a\x2d\x44\xa8\xb1\x46\x3a\x43\x08\xa9\x04\x83\x08\x91\x9a\x41\x4c\xe5\x02\xb4\x9a\x19\xa7\x83\x46\xa0\x1a\x9d\x0a\x6b\x85\x6a\xa4\x54\x32\x27\xd2\xc2\x98\x4f\xd1\x40\x6a\x32\x4d\x73\x29\x5c\x32\xae\x31\xb4\x62\xe1\x6f\x5b\x1b\x46\x54\x8e\x91\x01\x40\x1f\x1e\xb6\x5b\x0f\x8a\xfe\xdf\x33\x09\x60\x75\xab\xe3\x0b\x94\x63\x1b\x81\x07\xc7\xcf\x4b\xaa\x54\x96\x74\x39\x55\xd5\xbf\x83\x6e\x44\xb9\xc8\x84\x15\x74\x79\x7f\x1f\xd1\xce\xd8\xfc\x94\xb0\x5a\x58\x3c\x77\x84\xa2\x36\x30\x52\x1a\x3e\x14\x4a\x7c\x80\xaf\xe0\x43\xce\xfa\xc3\x0e\x93\xf9\x08\xda\x95\xdd\x03\x38\x82\x0e\x2c\x1b\xb6\x67\x6e\x6b\x75\x7c\x77\x62\xaf\x57\x76\x60\xd5\xe0\x50\xd8\x52\x67\x50\x98\xd3\xa4\x2f\xd6\x75\x00\x56\x95\x45\x53\xaa\x61\x48\x75\x86\xf1\x0b\x6a\x29\xf4\x61\x59\xce\x01\x08\x3a\x44\x61\xba\xf0\xfb\x7a\x08\x60\xb9\xd4\x4e\x0f\xf0\x2f\x35\x4d\x22\x58\xad\xea\x93\x64\xb9\xf4\x2f\x9c\x5b\x56\x2b\x72\xd8\xa4\x42\xc9\xea\x6b\xdf\xd7\xa6\x19\xb5\xd4\xa0\x75\x92\x96\x75\xa2\x4c\x7e\x17\x5a\xe7\xb9\xe5\xad\x06\xc7\x21\x0d\xaf\xc7\x5a\xa5\x92\x9d\x2b\xa1\x74\x17\x5a\x0f\xd8\x33\x64\xa3\xd3\xe6\x32\xc7\xfb\xbe\x16\x14\xf2\xee\x36\x02\xe0\xfd\xba\xb3\x3a\x84\x9d\xda\xff\x54\x62\xf2\x4e\xfd\xf1\xd4\xfd\xfd\x74\xfd\x2b\x89\x7f\x92\x05\xff\x9f\x21\xe7\x4e\xf5\x47\x27\x0c\x19\x7e\xba\xfa\xb9\xb8\xfb\xea\xfe\xbe\x02\xf5\xea\x79\x1d\xde\xa1\x9d\x43\x1f\x98\x0a\xd3\xec\x9e\x18\xa3\xfd\x4e\xa0\x6b\x7e\xbb\x78\xc9\xda\x24\xa4\x72\x4a\x0d\xe9\xb8\x89\x73\x97\xae\xcc\x6d\x9b\x9c\x30\xd2\xa9\x98\x14\x07\x77\xbc\xf8\x96\x6a\xe8\x83\xc4\x19\x64\xfb\xa5\x1d\xda\x79\xc3\x61\xee\xf8\xef\x42\x6b\x48\x75\x6b\x03\xdc\xdd\xc6\x26\xab\x4d\xaa\xc4\x9d\xda\xa6\xdb\xf4\x7b\x96\x72\x75\x1b\x43\x00\x8c\x9b\x44\xd0\x45\x77\x44\x85\xc1\xc3\xe6\x9c\xd3\xba\x4b\xca\x8b\x0b\x9c\xa2\x59\x07\x3c\x78\x6b\x69\x78\x8d\x8c\xd4\x09\x56\x0d\x72\xab\x94\xb0\x3c\xd9\x54\x02\x20\x56\xcc\xd9\xc3\x25\xc3\x79\x6b\x43\xa2\x4b\x1a\xb4\xc1\xd0\x76\x21\x53\x68\x3f\x7b\x8d\x26\x51\xd2\xf0\x29\x76\xc1\xea\xb4\xa9\x7a\x96\xfb\x6d\x4b\x9e\x9f\xcd\x71\xeb\x34\xc8\xd6\xe7\xd6\xec\xe0\xe4\x10\xb0\x31\xb0\xf8\x28\x2e\x9b\x4c\x1a\x96\x1c\x6c\x37\x57\x9d\xf2\x42\x58\x15\x8d\x7a\x32\xd0\x0b\xca\x5c\xba\x37\x54\x6c\x51\xe4\x07\x92\x4e\x21\x14\xd4\x98\x3e\x91\x74\x3a\xa4\x1a\xf2\x1f\x8f\xe1\x88\xa6\xc2\x12\xd0\x4a\x60\x36\xc9\xc7\xd9\x45\x5e\x66\x0d\xd0\x63\xbc\xa2\x75\xe9\x34\xe5\x12\xb5\x37\x12\x29\x67\xd5\x9a\xe6\xaa\x82\x75\x7e\x21\xd5\xd6\x38\x95\x52\x6b\x95\x2c\xf2\x94\xbc\x43\x36\xc8\xac\x1a\x8f\x85\xcb\x0b\x84\xa0\x89\x41\x46\x32\x00\x17\xc3\x4e\x85\x7c\xbc\x1c\xa6\x7a\xec\x4a\x81\x07\x39\x35\x01\xaa\x39\xf5\x70\x9e\x50\xc9\x90\xf5\x49\x86\x8d\x62\xd4\x69\xaf\x95\xa8\x44\x35\x54\x73\x49\x54\x42\x65\xa9\x8c\xd1\x9e\x92\x62\x41\x06\xef\x72\x75\xd6\x8e\xe9\x05\x6e\xdd\x2d\xa4\x3c\x54\xd2\xcb\xd8\xff\xa7\x96\xf6\x82\xdc\x95\x8d\x31\xba\xe1\xd7\xa1\xa6\x92\x91\xc1\x57\x72\x68\x92\xe7\xb7\xff\x7b\x95\x26\x09\x5a\xef\x6d\x1a\xc7\x54\x2f\x7a\x01\xad\xc5\x39\x60\x7c\xba\x11\x76\xce\x2a\x8f\xae\x81\x92\x47\xa9\x84\x59\x15\xb5\x86\x8a\xa9\xa8\xe9\x58\x2e\x95\x74\x4a\x06\x07\xff\x07\x79\x21\x36\xe8\xd1\xa2\x12\x0b\xc8\xa0\xe9\x91\xb1\x58\x24\x91\x73\x0b\x54\x2d\x2f\x52\x71\x19\xed\x88\x33\x86\xb2\x4f\xdc\x16\xab\x9c\x06\x2f\x54\x8c\xce\xa0\x5e\x20\x78\xd3\x85\xa9\xd8\x63\x65\xad\xd3\x0b\x24\x2d\x9b\xbb\xb6\x05\x19\x94\x77\x40\x2f\x3a\xce\x6b\xd8\xca\x89\xd1\xf1\x7a\x32\x3f\xf3\x33\xc7\x15\xc7\x3f\x64\xc5\x61\x9f\x44\xc8\xc7\x91\xed\xc2\xf1\x93\xa3\x64\xfe\x1c\xb2\x4a\xb5\x0b\xcf\x8e\xbe\x7c\x0e\x31\xd5\x63\x2e\x3d\x81\x23\xdb\x7d\xb2\xee\xeb\x8c\xe0\xc9\x97\xce\xc6\x9c\x59\x63\xe7\x3a\x19\xa3\x52\xc8\xa0\x69\x58\x52\xa0\xa1\x17\x24\x6b\xdd\xb6\x82\xe2\x59\x3a\x34\xf5\xad\x2e\x78\xb9\x82\x86\x96\x4f\x9d\x77\x69\x73\x93\x5a\x3a\x24\x45\xd8\x1e\x50\x21\xc8\xe0\x4c\x88\x6d\xaf\x17\xe1\xdd\x4b\x99\xe7\x8b\x64\x50\x5c\xc7\x8d\xe0\x0f\x29\x1b\x23\xc9\xad\xab\xe5\x9a\x55\xa0\xef\x2f\xad\xc8\x58\xc8\xa0\x4c\xbe\xf6\xc9\x6b\x24\xc7\x9f\x20\xb0\x2a\x15\xc8\xa0\xca\x97\x2a\x2e\x9b\xec\x72\x7c\x1e\xec\x38\x93\x5d\xee\x5f\x3c\x73\xd4\x83\xf4\x85\xe7\xc1\x99\x10\xe0\x79\x3b\x76\xab\x8b\x49\x9d\x3e\xa1\x12\x61\x44\x59\x56\x56\x95\x41\xad\xef\x8e\xbc\x2e\x29\x48\xf3\x2a\xa5\xce\x40\x14\x85\x98\x37\x54\x9a\xa1\x46\x56\x74\x8d\xd5\x3c\xa9\x7a\xa1\x92\x0c\xa5\xa9\xfa\x91\x9a\xe2\xd6\x21\x6c\xf5\x60\xe3\xb6\xec\xd9\x28\xdb\x4a\xbd\xc0\x46\xbb\xe6\xde\x5a\x6a\xf7\x4f\x22\xca\xed\xb9\x5e\xb0\x29\xa6\xca\x09\x9d\x24\xb3\x91\x13\x3a\xad\x36\xaf\x70\x58\x2e\xf9\x08\xf0\x06\xfc\x4c\x3e\x14\x30\x24\xb0\x5a\x95\x8e\x61\x8e\xa3\x26\xb0\x5c\x02\x4a\xb6\xc9\x73\x17\x8f\x12\x10\x35\x26\x5c\x8e\x14\x81\x5b\x78\x64\xf8\x2a\x8e\x48\xa9\x18\x06\x2e\x81\xbd\x61\x72\xb5\x22\xdb\x0e\x61\x83\x6a\xb6\x17\x58\xb6\x67\x41\xa6\xcd\xde\x15\x55\xdc\x79\x9c\xdf\xc2\xe8\x5a\x7d\x97\x38\x9f\x59\x27\xb5\x68\x6c\x93\xef\x72\xfb\x66\x4a\xdd\x0b\x32\x70\x6c\x9d\xc5\x4d\x64\x17\x47\xc2\x4e\x70\x97\x81\xd8\x85\xef\x7d\xa8\xae\x97\xdf\x9f\x13\xb0\xf7\x83\x78\x53\xf9\x4d\x50\xff\x97\xc1\xee\x8f\x43\xb1\xbc\x2e\x76\x62\xb1\xda\xd0\xf7\x01\x63\xe3\x05\xe9\x73\x46\x63\xed\x38\xdc\x07\xc7\xfc\x78\xfc\x1f\x18\x0b\x30\xae\x1f\x5e\x76\xc2\x71\x9d\x72\xdc\x0b\x90\x1b\x8f\x9a\x9f\x33\x24\x6b\x1e\xdc\x01\xca\xcf\x18\x87\x8d\xce\xce\x02\xe3\x96\xb1\x48\x43\x50\x75\x46\x4a\x59\xd4\xf9\xb5\x9c\x35\xf7\x3c\x33\xd4\xab\xae\x9a\x7e\x8d\x15\xc2\x8b\x99\xf7\x78\x13\x69\x8d\x12\x67\x3b\x32\xf5\xaa\xb3\xfc\x64\x33\xe6\x36\x4a\x87\xd9\x87\x1a\x73\x3d\x0f\x92\xbc\x42\x36\x79\x71\x47\x06\x97\xdc\xbe\x48\x87\x70\xa5\xd5\x04\x43\xbb\xb7\xca\xdc\xac\x33\xb7\xea\xe9\x8f\xd0\xff\xfe\x14\x7f\xcc\x62\x63\x71\x8a\xfe\x35\xc6\x89\x3f\xe2\x01\x19\xfc\xeb\x9f\x70\x72\x74\x7c\x9a\xbd\xe8\xe1\x14\xe1\xaf\x18\x27\x7f\xc8\xc6\x0d\xc0\xe4\x31\xae\xfa\x1f\xf3\x25\x0b\xe0\x61\xbb\xfc\x7a\xd5\xee\xd4\x5e\xd7\x1e\xb6\x5b\x7e\xf9\x09\xe5\xf7\x6a\x33\xbe\x6f\x75\x7c\xa4\x61\xb4\x9b\xc6\x51\xd9\x88\x9b\x8e\x1f\x1a\xd3\x6e\x85\xa9\x36\x4a\xb7\x0e\x5b\x89\xca\x9e\x18\x5b\x1d\x3f\x3b\xad\xda\x4d\x9f\xed\x61\x55\x67\x47\x19\x3b\x77\x3e\x6f\xb7\xf2\x8a\xaa\xb5\x7e\xd1\xcd\xff\xac\x0e\xef\xcd\x53\x63\xac\xa6\x78\x07\xdb\x8e\x1f\x0a\x1e\x5e\xb7\x6f\x63\x58\x3d\x47\x0b\x15\x66\xcf\x5a\xd9\x77\xa8\x42\x71\x6b\x75\xbb\x55\xb9\x6f\x5b\x40\xb3\x5b\x9f\x5e\xbf\x4d\x42\xf1\xfa\x2d\xd5\x0c\xfa\x90\x7f\x23\x6d\x37\x66\xb3\x60\xf1\x18\xb7\xa2\xc3\x0f\x01\x3b\xcd\x17\x59\xc7\xc9\xad\x5d\xb3\x7a\xd8\xc6\x9a\xa6\x98\x33\x6a\x6a\x9a\x2d\xc9\x3e\x3d\xb5\xb2\x5a\x7e\xd0\x82\xaf\x33\x2e\xfe\x48\xab\xb8\x2d\xd5\xac\x03\x5f\x43\xab\x28\xe0\x5b\x9b\x76\x6c\x35\x9b\xcf\xac\xf9\xeb\x6a\x2f\xc8\xff\x53\xc3\xbf\x03\x00\x00\xff\xff\x8b\x21\xc9\x44\xe5\x20\x00\x00"

func dataIndex_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataIndex_handlerTemplate,
		"data/index_handler.template",
	)
}

func dataIndex_handlerTemplate() (*asset, error) {
	bytes, err := dataIndex_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index_handler.template", size: 8421, mode: os.FileMode(420), modTime: time.Unix(1502336944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNode_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdd\x72\xdb\xba\xf1\xbf\xfe\xfb\x29\xf6\x8f\xe6\x54\xd2\x38\x22\x65\xe7\x5b\x26\x35\x93\x3a\x39\x4e\xda\x7c\x38\x89\x9b\xd3\x73\x32\xb9\x80\x88\x95\x08\x05\x04\x68\x00\x94\xa5\x6a\xf4\x40\x7d\x8d\x3e\x59\x07\xfc\x12\x49\xc9\x4e\x7a\xda\xa9\x2f\x2c\x00\x8b\xdd\xfd\xed\x2e\xb0\xd8\x65\xf0\xff\x2f\xde\x9f\x5f\xfd\x7a\xf9\x12\x62\x9b\x88\xc9\x51\xe0\x7e\x40\x50\x39\x0f\x09\x4a\x32\x39\x02\x08\x62\xa4\xcc\x0d\x00\x02\xcb\xad\xc0\xc9\x66\xe3\xfd\x7c\xcd\xe4\x76\x1b\xf8\xc5\x42\x41\x4c\xd0\x52\x88\x62\xaa\x0d\xda\x90\x64\x76\x36\x7c\x4a\x9a\x24\x49\x13\x0c\xc9\x92\xe3\x4d\xaa\xb4\x25\x10\x29\x69\x51\xda\x90\xdc\x70\x66\xe3\x90\xe1\x92\x47\x38\xcc\x27\xf7\x81\x4b\x6e\x39\x15\x43\x13\x51\x81\xe1\x89\x37\xaa\x44\x09\x2e\xbf\x41\xac\x71\x16\x92\xd8\xda\xd4\x8c\x7d\x3f\xa1\xab\x88\x49\x6f\xaa\x94\x35\x56\xd3\xd4\x4d\x22\x95\xf8\xf5\x82\xff\xc0\x7b\xe0\x3d\xf6\x23\x63\x76\x6b\x5e\xc2\xa5\x17\x19\x43\x40\xa3\x08\x89\xb1\x6b\x81\x26\x46\xb4\x95\x22\x13\x69\x9e\x5a\x30\x3a\xda\x69\x8a\x14\x43\x6f\x71\x9d\xa1\x5e\xe7\x1a\x8a\xe1\xf0\xc4\x3b\x39\xf5\x1e\xe6\x12\x17\x86\x00\x97\x16\xe7\x9a\xdb\x75\x48\x4c\x4c\x1f\x3c\x7d\x38\x94\xcb\xe7\x74\x74\xfc\xf8\xc3\xfc\x59\x24\x6e\x7e\x3d\xbf\xb8\xb8\x4c\x5f\x7c\x78\xf3\x39\x7d\xf3\x4e\x8e\x66\x1f\xe9\xc7\xf7\x8b\x57\xd7\xe6\xe4\x81\x7d\x78\x31\x5f\x3c\x78\xf9\xf7\x47\xa3\xbf\xc9\x8b\x0f\xd7\x91\xaf\x9f\xbe\x8d\xe5\xc7\x17\xbf\x11\x88\xb4\x32\x46\x69\x3e\xe7\x32\x24\x54\x2a\xb9\x4e\x54\x66\xc8\x24\xf0\x0b\x9c\x77\x80\xfe\x31\xf7\x3c\xf1\x17\x5d\xef\x1c\xb6\xe5\x2a\x7a\xf4\xfa\x03\x9f\x8e\x4e\x9f\x5c\x2f\xd7\x8b\x4f\x6f\x67\xaf\x16\xef\xdf\xd2\x37\xdf\x66\xd9\x2f\x9f\x57\xbf\xad\xfe\x7a\x29\xcf\xff\xfc\xfc\x89\x38\x4d\xce\x7f\x79\xf7\x3a\xbd\x78\x96\x5c\x9c\xbf\x78\x7a\x73\xf1\xee\x75\x74\xf9\xe2\xc9\xd5\x8a\xfe\x47\xb6\x44\x4c\x2e\x8c\x17\x09\x95\xb1\x99\xa0\x1a\x73\x43\xe8\x82\xae\x7c\xc1\xa7\xc6\x3f\x8f\xa9\xb6\xde\xc2\xf8\xa7\xde\x63\x6f\x54\x4e\xa7\x99\x64\x02\x2b\x8b\xfe\x0b\x5a\x12\x95\xa0\x2c\xd5\x9c\x3c\xf5\x4e\xaa\x85\xbb\x35\xd8\x75\x8a\x21\xb1\xb8\xb2\xfe\x82\x2e\x69\xb1\x4a\x26\x47\xf9\x26\xb8\xe1\x92\xa9\x1b\x4f\x49\xa1\x28\x83\x10\x66\x99\x8c\x2c\x57\x12\xfa\x03\xd8\x14\x5b\x00\x96\x54\x43\xaa\xb8\xb4\x06\x42\xf8\x52\xad\x56\x7f\x9b\x8d\xa6\x72\x8e\xe0\xbd\x53\x0c\x0d\x6c\xb7\x47\xff\xb7\x23\x79\x1f\x33\x69\x79\x82\xdb\x2d\xdc\xdf\x67\x44\xc9\xb6\xdb\x6a\xf9\xeb\x59\x53\x9f\xa0\x53\x14\xb9\xbe\xdd\xfa\x4c\x69\xe8\x3b\x22\x87\x70\x74\x06\x1c\x82\x12\x96\x27\x50\xce\x6d\x7c\x06\xfc\xf8\x18\x1a\xc0\xa1\x14\xe3\xa5\x99\x89\xfb\xc0\x8f\x4f\x60\x70\xb6\x23\x6e\x9b\x0a\x23\x25\x67\x7c\x0e\x61\x93\xdb\xf9\x6e\x0c\x3d\xc1\x25\xf6\x1a\xf0\x19\xb5\x74\xdc\xdc\x57\xe9\x19\x97\xbf\x2d\x53\xdd\x6e\x83\xd6\x8c\xe1\xcb\xa6\xed\x82\x7c\xf3\x18\x88\xc1\x48\x49\x66\x48\xc7\x43\x85\x9a\xc2\xc2\x0e\x69\xc6\x85\x18\xc3\x8c\x0a\x83\x2d\xca\xf6\x6b\xc3\xba\x06\x45\xa5\x2e\xa8\xa6\x03\x5a\xa3\x49\x95\x34\x7c\x89\x63\xb0\x3a\x6b\x8b\xca\x53\xec\xb8\x83\x98\x71\x93\x0a\xba\x1e\xef\xed\x06\x70\x27\x6c\xdc\xbb\xcc\xd2\x14\x2d\x94\x51\xef\xb5\xb0\xb5\xc5\x2b\x25\x2c\x4f\xbb\x90\x00\x12\xc5\x9c\xcf\xb9\x64\xb8\xea\x75\x74\xb8\xac\xa0\x0d\x46\xf6\xa0\xed\xad\x59\xac\x96\xa8\x6f\x13\x2e\x91\x6a\x34\xf6\x0e\xf1\xce\xc0\xdb\x85\xe7\xaf\xc3\x3e\xf4\xd5\xf3\x15\x1e\x08\xf3\xce\x6d\x07\x50\xbb\x98\x75\x16\xd6\xdf\x15\x73\xc0\xfd\x25\xa8\x37\xc5\x91\xda\x63\xfd\x1e\x73\x79\x18\x3f\x59\xcd\xe5\x7c\x0c\xbd\xcf\x54\x64\xed\xf0\x41\xf3\xc2\x54\xc8\x8f\x0e\x13\xeb\xe1\xf6\xa8\x75\xc5\xec\x0a\x42\x60\x2a\xca\xf2\xbc\x35\x47\xfb\x52\xa0\x1b\xfe\x69\xfd\x9a\xf5\x49\x44\xe5\x92\x1a\x32\x70\x84\x73\xf7\x48\xaf\x6c\x9f\x9c\x32\xb2\xbb\xb2\x65\xb6\x4a\xd6\x6f\xb8\x44\x08\x41\xe2\x0d\xe4\xc9\xb6\x1f\xd9\xd5\xfd\xf2\x0a\x0f\xce\x4a\xa5\x05\x8a\x66\x56\x0c\xfc\xaa\xa8\x08\xa6\x8a\xad\xcb\x44\x29\xe9\x12\x22\x41\x8d\x09\x89\xa4\xcb\x29\xd5\x50\xfc\x0c\x19\xce\x68\x26\x2c\x01\xad\x04\xe6\x44\x3e\xa7\xee\x22\x95\x6f\x35\x40\xc0\x78\xcd\xeb\xea\x0a\xca\x25\xea\xe1\x4c\x64\x9c\xd5\x7b\xda\xbb\x4a\xd1\x0e\x07\xea\xc6\x1e\x07\x29\xb3\x56\xc9\x32\x61\x17\x13\xd2\x61\xb3\x6a\x3e\x17\x08\x91\x12\x82\xa6\x06\x19\xc9\x93\x44\xb9\xec\x20\x14\xeb\xd5\x32\xd5\x73\x57\x13\xfd\xa1\xe0\x26\x40\x35\xa7\x43\x5c\xa5\x54\x32\x64\x21\xc9\x4f\x63\xb9\xea\xd0\x6b\x25\x6a\x55\x2d\x68\xee\x35\x49\xa9\xac\xc0\x18\x3d\x54\x52\xac\xc9\xe4\xaa\x80\xb3\x73\x4c\xe0\xbb\x7d\x77\xb0\xf2\x48\xc9\x61\x2e\xfe\x7f\xb5\x35\xf0\x0b\x57\xb6\xd6\x68\xc7\xaf\x53\x4d\x25\x23\x93\x3f\xca\xa9\x49\xcf\xee\xfe\x5f\x64\xb8\xe1\xa7\x2c\x49\xa8\x5e\x07\x3e\x6d\xc4\xd9\x67\x7c\xd9\x09\x3b\x67\xb5\x47\x77\x07\xa5\x88\x52\x75\xcc\xea\xa8\xb5\x20\x66\xa2\x81\xb1\xda\x2a\xe9\x92\x4c\x8a\xf7\x35\x10\x7c\x12\xd0\xb2\x24\xf5\xc9\xa4\xed\x91\xb9\x58\xa7\xb1\x73\x0b\xd4\xa3\x61\xac\x92\x2a\xda\x31\x67\x0c\x65\x48\x5c\x2e\xa8\x9d\x06\xaf\x54\x82\xce\xa0\xc0\x17\xbc\xed\xc2\x4c\xdc\x62\x65\x63\x12\xf8\x92\x56\xc3\x43\xd7\x62\x77\x69\x54\x6d\xda\x54\x23\x65\x91\xce\x92\x69\xf3\xba\x08\xbe\x4f\x1f\x72\x8b\x09\x69\x59\x7c\x18\xee\xed\xdc\x40\x23\xcb\x97\x48\x26\x9b\x0d\xe4\x9d\x04\xb8\x56\x62\xc7\x1b\xf8\xaa\x36\x33\x88\x4f\x9a\xfd\x46\x7c\x52\x13\x8a\x2c\x95\xc7\xb5\x4c\x58\x90\x17\xf1\x21\x89\x91\xcf\x63\x3b\x86\xd3\xd1\x28\x5d\x9d\x41\xde\x51\x8c\xe1\xd9\xe8\xa7\x33\x48\xa8\x9e\x73\x39\x14\x38\xb3\xe3\x47\xbb\xb9\xce\x19\x1e\xfd\xe4\x42\x50\x08\xab\xd5\xa4\xe5\x61\x0c\xfc\xb4\x5e\xb3\x74\xea\x2e\x7f\x61\x5c\x31\xc9\xff\x0f\xa7\x4a\x33\xd4\xc8\xca\xa9\xb1\x9a\xa7\xf5\xcc\xd5\x16\x28\x4d\x3d\xcf\x5f\xc6\xa6\xbb\xad\x6e\x05\xdb\xc6\x13\x57\xc9\x05\xbe\x8d\xbb\xeb\x9f\x2c\xb5\x99\x39\x44\xb9\xe2\xc9\x41\x8e\x9f\x29\x17\xc8\x0e\x51\xce\x63\x57\x35\x1e\x24\x5d\x29\x4b\x45\x9b\x10\xf8\x4d\x94\xed\x92\x73\x57\x42\x3a\x5b\x5a\x59\x62\xb3\xe1\x33\xc0\x6b\xf0\x1c\x72\x04\x32\xcb\xe1\x10\xd8\x6e\x2b\x37\x32\x27\x48\x13\xd8\x6c\x00\x25\x83\xed\xf6\x4e\xfe\xa8\x00\xdd\x14\xc0\xe5\x4c\x11\xb8\x85\x3f\x4f\xc3\xe5\x81\xd5\xe8\xfa\x4f\x7f\xb3\xf1\x5e\xbb\x7d\xed\xdb\x6e\xd9\x64\xb3\xb9\xb7\xeb\x6f\xd9\x3e\xb5\xc0\x70\x90\x5a\x9f\x09\x9e\x14\xb9\x1f\xdd\x28\x24\x9b\x8d\xf7\xdc\x3a\x55\xe5\xe0\x16\xc1\x45\x90\x6e\x25\x97\x91\xba\x95\x9e\x87\xab\x4b\xed\x06\xac\x59\xea\x07\x7e\x7e\x12\xab\xb4\xb1\xcb\x20\x7b\x87\xfe\xc0\x4a\xac\xc1\x2f\x87\x33\xa5\x2c\xea\xfc\x2a\x16\xc3\xbb\xdf\xe5\xb6\xc7\x5b\x3b\xc4\x30\x61\xc3\x87\xdd\x37\xaf\x95\x82\x3b\xc4\x4e\x02\xae\x5a\xb8\x39\xb7\x71\x36\xcd\x1b\x37\xf3\x6d\xe5\xa7\xc5\x63\x61\x8a\xc7\x82\x4c\x2e\xb8\x7d\x95\x4d\xe1\x52\xab\x05\x46\xf6\xd6\x84\xdb\x4d\xb9\x7b\x4f\xcb\x0f\xe0\xff\xf7\x39\x7e\x9f\xc5\xc6\xe2\x12\xbd\x6f\x98\xa4\xde\x8c\xfb\x64\xf2\xcf\x7f\xc0\xe9\xe8\xe4\x09\x0c\xe1\x93\xa3\xc0\x5f\x30\x49\x7f\x87\x8d\xed\xc9\x77\x7a\xd9\x52\xc0\xbd\x7e\xd5\xbe\xf6\x07\x8d\x0a\xf8\x5e\xbf\xe7\x95\xd9\x52\x7f\xa9\x6f\xe4\xd7\xde\xc0\x43\x1a\xc5\x87\x79\x1c\x97\x8d\xb9\x19\x78\x91\x31\xfd\x5e\x94\x69\xa3\x74\xef\x7e\x2f\xef\xc6\x50\xf7\x06\x5e\x9e\x46\xfb\x9d\xb6\xec\xb0\xa8\xa6\x38\xca\xd8\xb9\xf3\x70\xbf\x57\xbc\x46\xbd\x66\x43\x0a\x7b\x9d\xc6\x0f\xc9\xd4\x98\xa8\x25\x7e\x47\xec\xc0\x8b\x04\x8f\xbe\xf5\xef\x12\x58\x97\xe6\x42\x45\x79\x3d\x07\xe1\x0e\xb8\xb5\xba\xdf\xab\xdd\xb7\xaf\xa0\x3d\x6d\xf5\xd9\xae\x24\xdf\x4d\x5d\x2b\x20\xd5\x0d\x84\x50\x7c\xc0\xe8\xd7\x15\x7b\x1d\x2d\xd7\x3b\x76\xc3\xc3\xef\x03\x0e\xda\x9d\x8d\x93\xe4\xf6\xee\x44\xdd\xeb\x63\x03\x2a\x16\x82\xda\x50\xf3\x2d\xb1\x4d\x44\xbf\x97\x97\x4c\x93\x1e\x1c\xe7\x52\xbc\x99\x56\x49\x5f\xaa\x9b\x01\x1c\x43\xaf\x2c\x8a\x7a\x5d\x43\xf6\x86\x9d\xcf\x2e\x7e\x91\x8a\x8a\x76\xa3\xe8\x32\x02\xbf\xf8\xca\xf9\xaf\x00\x00\x00\xff\xff\x71\x7c\x2c\x49\xf6\x14\x00\x00"

func dataNode_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataNode_handlerTemplate,
		"data/node_handler.template",
	)
}

func dataNode_handlerTemplate() (*asset, error) {
	bytes, err := dataNode_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/node_handler.template", size: 5366, mode: os.FileMode(420), modTime: time.Unix(1502336969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReport_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x51\x8f\xe3\x34\x10\x7e\x66\x7f\xc5\x60\x24\x9e\x48\x7c\x65\x11\xa0\xc3\x89\x84\x0e\x8e\x93\x38\xb8\xd5\xed\xbe\xf0\x74\x72\xe3\x69\x62\xd6\xb1\x8d\xed\x74\xb7\xaa\xfa\x83\xf8\x1b\xfc\x32\xe4\x3a\x49\x9b\x6c\xb7\xba\x05\x01\xe2\x5e\xda\xcc\xe7\xf9\x9c\x99\x6f\xe2\xd1\x98\x7d\xfc\xdd\x9b\x17\x37\xbf\x5c\x7d\x0f\x4d\x68\x55\x79\xc1\xe2\x1f\x28\xae\xeb\x82\xa0\x26\xe5\x05\x00\x6b\x90\x8b\xf8\x00\xc0\x82\x0c\x0a\xcb\xab\xce\x5a\x0c\xf0\x16\xad\x71\x81\xd1\x04\x26\x87\x16\x03\x87\xaa\xe1\xce\x63\x28\x48\x17\x56\xd9\xd7\xe4\x78\x49\xf3\x16\x0b\xb2\x96\x78\x17\xb9\x04\x2a\xa3\x03\xea\x50\x90\x3b\x29\x42\x53\x08\x5c\xcb\x0a\xb3\xbd\xf1\x19\x48\x2d\x83\xe4\x2a\xf3\x15\x57\x58\x2c\xf2\x67\xc3\x56\x4a\xea\x5b\x68\x1c\xae\x0a\xd2\x84\x60\xfd\x73\x4a\x5b\x7e\x5f\x09\x9d\x2f\x8d\x09\x3e\x38\x6e\xa3\x51\x99\x96\x8e\x00\xbd\xcc\x2f\xf3\x2f\x69\xe5\xfd\x01\xcb\x5b\xa9\xf3\xca\x7b\x02\x0e\x55\x41\x7c\xd8\x28\xf4\x0d\x62\x48\x89\xd3\x21\x73\xb6\x34\x62\xd3\xbf\x5b\xf3\x35\x54\x8a\x7b\x5f\x10\xcd\xd7\x4b\xee\x20\xfd\x65\x02\x57\xbc\x53\x81\x80\x33\x0a\xf7\x8b\xb2\xe6\x41\x1a\xdd\x47\x0d\xc0\x84\x1c\xb9\x31\x71\x2e\x35\xba\x6c\xa5\x3a\x29\x46\x9f\xa9\x57\xbf\x75\x8c\x03\xdd\x91\x4f\x0c\xa9\x0b\xc1\x68\x08\x1b\x8b\x05\x49\x06\x99\xd1\x82\xa9\x6b\x85\x50\x19\xa5\xb8\xf5\x28\x08\x08\x1e\x78\x0f\xc7\x10\x12\x3e\xc0\xdc\xd5\xb1\x68\x9f\x24\x36\x01\xee\x24\xcf\xf0\xde\x72\x2d\x50\x14\x64\xc5\x55\xf4\xdd\xa3\x31\x7a\x67\xd4\xf8\xaa\x49\x68\x00\xcc\x5b\xae\x87\x60\xbc\xcb\x8c\x56\x1b\x52\xde\xa4\x70\x0e\xc2\x30\x1a\xfd\xce\x50\x65\x65\x74\xb6\xdf\xfe\xdf\x72\x65\x34\x49\x39\xc1\xf8\x4c\xd7\xa5\xe3\x5a\x90\xf2\x53\xbd\xf4\xf6\x9b\xf3\xbf\xe9\xa8\x64\xd7\x5d\xdb\x72\xb7\x61\x94\x1f\xd5\x99\x0a\xb9\x9e\x95\x5d\x8a\x51\xd1\xc3\x87\x92\xaa\x34\x7c\x66\x63\xd5\x26\x21\x76\xea\x28\xc6\xc1\x55\xf3\x35\x29\x2f\x3e\xea\x8f\x4c\xc9\x78\x7f\x66\x28\x29\xa7\x8a\xd4\x6a\x63\x9b\x28\x0b\x8c\x4f\x59\x63\xda\xa1\xda\x8d\x14\x02\x75\x41\x82\xeb\x70\x14\x0d\x5e\x99\x16\x63\x42\x8c\x2a\x39\x95\xb0\x53\x8f\x64\x79\x64\x30\xaa\xf9\xf0\x78\xea\x58\x1c\x0e\x8d\x19\x53\x5b\x3a\xe4\xa2\x72\x5d\xbb\x3c\x3e\x2e\x4a\x3e\x5c\xcf\x64\xc0\x96\x4c\x32\x3e\x1d\xee\xfb\xb1\xb5\x11\x48\xb7\x5b\xc8\x5f\xfe\x26\x34\xec\x76\xa4\x3c\x32\x9e\xb2\x29\xf0\x2a\xc8\x35\x92\x72\xe8\x9d\x07\x1a\xa3\x66\x94\x8d\x35\x8b\xf2\xcd\x1a\x5d\xec\x93\x8c\x36\x8b\x11\xb7\x3d\x11\xcc\x0a\x8e\x42\x80\xbb\x46\x56\x0d\x38\xae\x81\x87\xfd\xc2\xb7\x01\x76\xbb\xe7\x8c\xda\x91\x1a\xf8\x32\xf6\x82\x14\x56\x32\xf6\xbf\xd9\xd2\x38\x81\x0e\x45\x6f\xfa\xe0\xa4\x1d\xad\xca\x68\x81\xda\x8f\x76\x63\xd6\x93\x46\xc4\x82\x2b\x59\x10\xe5\x8b\x86\xeb\x1a\x05\x30\x1a\xc4\x1e\x88\x41\x0c\x60\xd4\x28\xc2\x34\xb8\x87\xcc\xeb\x5b\x69\xed\x9c\x39\x80\x67\x99\x2f\xb9\x54\x73\x62\x8f\x9d\xe5\xdd\x98\xc0\xd5\x94\x96\xa0\x13\x2c\x46\xf7\x79\x1f\x0a\x73\x59\xbe\x36\xb5\x67\xb4\xb9\xfc\xeb\x5d\xdd\x99\xbb\xe9\xe9\x9d\xec\xa0\x32\xdf\x66\x8b\xd8\xb5\xb3\x56\x64\x8b\xa9\xe7\xb4\x67\x9c\xa6\x1e\xb8\x8b\x59\x5f\xde\x6e\x5d\xac\x08\xe4\xaf\x4d\xfd\xee\x27\xf4\x9e\xd7\xe8\x77\xbb\x69\xab\xb4\xe5\x76\x9b\x47\x29\xec\x9c\x8c\xca\xe3\x43\xef\x9f\x4d\x68\xa4\xae\xc1\xed\xbf\x4c\x14\xf9\x29\xa6\x16\x13\xe2\xbc\xf7\x9d\x68\x12\x17\x03\x57\xae\x20\x7f\x8b\xde\x74\xae\x42\xff\x6e\x2c\xf0\x51\x45\x12\xf6\x7f\xaf\xc9\x3c\xc7\x27\xd4\xe5\xe9\xea\x4e\xa9\x8f\x68\x7d\x38\xbf\x47\x62\xf7\xe0\x87\xa3\x76\x9f\xd0\x7f\x2f\x77\xdf\xf4\x26\x6a\xf7\xd8\x87\xa3\xf6\x3c\xc9\x7f\x5e\xed\xd9\x02\xb3\xfd\xe0\x36\xbe\xeb\x04\xd2\x38\xa0\xfd\xe3\xca\x98\x80\x6e\x3f\x99\xa5\xc7\xf3\xe3\xfc\x59\xa1\x5b\x91\x7d\x31\x1f\x95\x27\x93\xdb\x6c\x71\x36\xb7\x0d\x77\x9d\x5a\x86\xa6\x5b\xee\xaf\x37\xfe\xf6\x9e\xda\x34\x63\xfa\x34\x63\x92\xf2\x07\x19\x5e\x75\x4b\xb8\x72\xe6\x57\xac\xc2\xa3\x73\xda\x7c\x52\x7b\x8f\x6a\x3f\x88\xff\xd4\x0c\x7b\xd6\xff\x5c\xb6\x27\x73\xf5\x01\xd7\x98\xdf\x62\x6b\xf3\x95\xa4\xa4\xfc\xe3\x77\xf8\xfc\xd9\xe2\x2b\xc8\xe0\x3a\xae\xc0\x8f\xd8\xda\xbf\x33\x85\xa6\x9a\xa6\xeb\x5e\xba\xe5\x31\x9a\xae\xc2\x7f\x06\x00\x00\xff\xff\x28\x43\x86\x85\x1b\x0f\x00\x00"

func dataReport_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataReport_handlerTemplate,
		"data/report_handler.template",
	)
}

func dataReport_handlerTemplate() (*asset, error) {
	bytes, err := dataReport_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/report_handler.template", size: 3867, mode: os.FileMode(420), modTime: time.Unix(1502337070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index_handler.template": dataIndex_handlerTemplate,
	"data/node_handler.template": dataNode_handlerTemplate,
	"data/report_handler.template": dataReport_handlerTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index_handler.template": &bintree{dataIndex_handlerTemplate, map[string]*bintree{}},
		"node_handler.template": &bintree{dataNode_handlerTemplate, map[string]*bintree{}},
		"report_handler.template": &bintree{dataReport_handlerTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

