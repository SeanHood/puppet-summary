// Code generated by go-bindata.
// sources:
// data/index_handler.template
// data/node_handler.template
// data/report_handler.template
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndex_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\xff\x72\xdb\x36\xf2\xff\x5b\x7a\x8a\x2d\xd2\x7c\x2d\x4f\x4d\x52\xb2\xd3\xd8\x95\x49\xcd\x78\xe4\xd4\x49\xbf\x4e\xe2\xc4\x6e\x7b\x6d\x27\x73\x03\x11\x2b\x11\x0e\x08\xd0\x00\x24\x5b\xa7\xd1\x03\xdd\x6b\xdc\x93\xdd\xf0\xa7\x48\xfd\x70\xe3\xbb\x99\x9b\xb9\x8b\xff\xb0\x81\x05\x76\xb1\xf8\xec\x07\x8b\x25\xec\x7f\x73\xfe\x7e\x78\xf3\xdb\xd5\x2b\x88\x6c\x2c\x06\x6d\x3f\xfd\x03\x82\xca\x49\x40\x50\x92\x41\x1b\xc0\x8f\x90\xb2\xb4\x01\xe0\x5b\x6e\x05\x0e\xde\x29\x86\x70\xc9\x8d\xf5\xbd\x5c\x90\x0f\xc6\x68\x29\x84\x11\xd5\x06\x6d\x40\xa6\x76\xec\x9c\x90\xfa\x90\xa4\x31\x06\x64\xc6\xf1\x3e\x51\xda\x12\x08\x95\xb4\x28\x6d\x40\xee\x39\xb3\x51\xc0\x70\xc6\x43\x74\xb2\xce\x01\x70\xc9\x2d\xa7\xc2\x31\x21\x15\x18\xf4\xdc\x6e\x69\x4a\x70\xf9\x19\x22\x8d\xe3\x80\x44\xd6\x26\x7d\xcf\x8b\xe9\x43\xc8\xa4\x3b\x52\xca\x1a\xab\x69\x92\x76\x42\x15\x7b\x95\xc0\x3b\x72\x8f\xdc\x97\x5e\x68\xcc\x4a\xe6\xc6\x5c\xba\xa1\x31\x04\x34\x8a\x80\x18\x3b\x17\x68\x22\x44\x5b\xae\x63\x42\xcd\x13\x0b\x46\x87\xf9\x42\xa6\xef\x79\xa1\x62\xe8\xde\xde\x4d\x51\xcf\xb3\x15\xf2\xa6\xd3\x73\x7b\x87\xee\x8b\xcc\xe2\xad\x21\xc0\xa5\xc5\x89\xe6\x76\x1e\x10\x13\xd1\xa3\x93\x17\x8e\x9c\x9d\xd1\xee\x77\x2f\x3f\x4c\x7e\x08\xc5\xfd\x6f\xc3\x8b\x8b\xab\xe4\xfc\xc3\xe5\x2f\xc9\xe5\x3b\xd9\x1d\x7f\xa4\x1f\xdf\xdf\xbe\xbe\x33\xbd\x23\xfb\xe2\x62\x72\x7b\xf4\xea\x6f\xdf\x77\xff\x22\x2f\x3e\xdc\x85\x9e\x3e\x79\x1b\xc9\x8f\xe7\xbf\x13\x08\xb5\x32\x46\x69\x3e\xe1\x32\x20\x54\x2a\x39\x8f\xd5\xd4\x90\x81\xef\xe5\x7e\x3e\xe2\xf4\x97\xc1\x73\xec\xdd\xae\xa3\xb3\x7d\x2f\x37\xe1\xf7\x6f\x3e\xf0\x51\xf7\xf0\xf8\x6e\x36\xbf\xbd\x7e\x3b\x7e\x7d\xfb\xfe\x2d\xbd\xfc\x3c\x9e\xfe\xfa\xcb\xc3\xef\x0f\x3f\x5f\xc9\xe1\x4f\x67\xc7\xe2\x30\x1e\xfe\xfa\xee\x4d\x72\xf1\x43\x7c\x31\x3c\x3f\xb9\xbf\x78\xf7\x26\xbc\x3a\x3f\xbe\x79\xa0\xff\xd6\x5e\x42\x2a\x67\xd4\xdc\x9a\x6c\x03\xd4\x18\xb4\xa6\x50\x5a\x0d\x15\xae\xef\x30\x67\xe7\x09\x06\xc4\xe2\x83\xf5\x6e\xe9\x8c\xe6\xd2\x22\xe6\x00\xf7\x5c\x32\x75\xef\x2a\x29\x14\x65\x10\xc0\x78\x2a\x43\xcb\x95\x84\xce\x3e\x2c\xda\xc5\xa4\x30\xa2\x72\x82\xe9\x70\x17\x0e\x60\x2a\x6b\xfd\x03\x18\x53\x2e\x90\x05\xdd\x72\xf2\x62\xa1\xd3\x51\x70\x97\xcb\x4a\xc2\xc7\x80\x77\xe0\x5e\x5b\x6a\x11\x48\xae\x41\x60\xb9\x2c\x94\xd3\x75\xf3\xc6\x77\xd0\x83\xc5\x02\x50\x32\xd8\xa9\x5e\xac\x9e\xe9\xaf\x3c\x29\x5b\xa9\x85\x3f\x35\x51\x6d\x21\x33\x52\xdf\xd0\xaa\xbd\xc3\x10\x4a\xb6\x5c\xb6\xdb\xed\xd6\x8c\xea\xec\xec\x5b\x08\x40\xe2\x3d\x0c\xb3\x70\xfc\x74\xed\x0e\x53\x61\x87\x64\x63\x43\x25\x2d\xe5\x12\x35\x39\x68\xb7\x16\x85\x91\xd5\x0f\x95\x3c\xa6\x29\xdc\xaf\x24\x1d\x09\x64\x7d\x18\x53\x61\xf0\xa0\xdd\x6a\x31\x6a\x69\x1f\xfe\x68\xb7\x5a\x8b\x76\xab\xd5\x4a\xa3\xd8\x07\xc2\xd4\x74\x12\xc9\xa9\x4d\xcd\xb5\x5a\xc6\x52\x6d\xcf\xe4\x44\x60\x1f\x5e\x76\x33\x91\x55\x4a\xdc\xf0\x64\x98\x67\x9a\x3e\x90\x85\xc0\x09\x4a\x76\x83\x0f\x76\xd9\x87\xc5\x7c\x09\x0e\xf8\xc6\x6a\x25\x27\x83\x67\x09\xea\x10\xa5\x7d\x0e\xbe\x57\x88\x0a\xc3\x91\xba\x7f\x23\x2f\x33\xcd\x3e\x58\x3d\xcd\x5c\xca\x7c\xba\x52\x5c\x5a\x93\x7b\xd6\x6a\x2d\xe6\xfd\x15\x64\x69\x0e\x63\xf8\x70\x49\x47\x28\xfa\x40\x2a\xeb\xe4\x00\x56\x4e\xf4\x81\xfc\x5c\x43\xff\xa0\x32\x93\x33\xe0\x4b\x6d\xfc\x58\x72\x68\x65\xa0\xf2\xe2\x0b\x4d\x0c\x2b\x27\x52\x13\x9f\xda\xad\x56\xda\xf8\xd4\x6e\x2d\xf7\x4f\xdb\xad\x2c\x7c\xae\x46\xc9\x50\x77\x52\xc1\xb2\x20\x78\xfd\x94\xf9\x5e\x79\x55\xf8\x23\xc5\xe6\xc5\xc1\x93\x74\x06\xa1\xa0\xc6\x04\x44\xd2\xd9\x88\x6a\xc8\xff\x38\x0c\xc7\x74\x2a\x2c\x01\xad\x04\x66\x83\x7c\x92\x85\xbf\x3a\x8e\x3e\xe3\x95\x6e\x58\x72\xc7\x19\x8b\x29\x67\xd5\x9c\xe6\xac\xc2\x74\xea\x07\xea\xda\x9c\xd4\xa5\xa9\xb5\x4a\x16\x09\x20\xef\x90\x35\x35\xab\x26\x13\x81\x10\x2a\x21\x68\x62\x52\x30\xd2\x18\x17\xe2\xd4\x85\x5c\x5e\x8a\xa9\x9e\xa4\x37\xdd\xb3\x5c\x9b\x00\xd5\x9c\x3a\xf8\x90\x50\xc9\x90\x05\x24\x23\x6f\x21\x4d\xbd\xd7\x4a\x54\x4b\x35\x5c\x4b\xb3\x53\x42\x65\xe9\x8c\xd1\x8e\x92\x62\x4e\x06\x37\xb9\x3b\x2b\x60\x7c\x2f\x9d\xf7\x88\x2a\x0f\x95\x74\x32\xf3\xff\xa9\xa9\xbe\x97\x43\xd9\x90\xd1\x35\x5c\x47\x9a\x4a\x46\x06\xff\x27\x47\x26\x39\x7d\xfc\xf7\xd5\x34\x49\xd0\x3a\xd7\xd3\x38\xa6\x7a\xee\x7b\xb4\x16\x67\x8f\xf1\xd9\x5a\xd8\x39\xab\x10\x5d\x11\x25\x8f\x52\x49\xb3\x2a\x6a\x0d\x17\xa7\xa2\xe6\x63\x39\x55\xd2\x19\x19\xb4\x5b\x45\x9d\x31\xf0\x69\x51\x68\x78\x64\xd0\x44\x64\x22\xe6\x49\x94\xc2\x02\x55\xcb\x89\x54\x5c\x46\x3b\xe2\x8c\xa1\x0c\x48\x9a\x2a\x2a\xd0\xe0\xb5\x8a\x31\xdd\x90\xef\x09\xde\x84\x70\x2a\x76\xec\xb2\xd6\xf1\x3d\x49\xcb\xe6\xb6\x63\x41\x06\xe5\x95\xe3\x47\xbd\xbc\x44\xab\x40\x8c\x7a\xab\xc1\x12\xb5\xb5\x84\x0c\x59\x05\x14\x90\x08\xf9\x24\xb2\x7d\x38\xec\x76\x93\x87\x53\xc8\xaa\xb1\x3e\x9c\x74\x9f\x9f\x42\x4c\xf5\x84\x4b\x47\xe0\xd8\xf6\x7b\x35\x81\xce\x34\x7a\xdd\xe7\xe9\x56\xeb\xce\x27\x45\xc4\x7d\x2f\x59\xad\xbf\x01\xbc\x63\xe9\xc8\xd4\x8f\xb3\xe0\xe5\x0c\x1a\x5a\x3e\x4b\x11\xa4\xcd\x83\x68\xe9\x88\x14\xa1\x79\x46\x85\x20\x83\x33\x21\x36\x91\x2d\x42\xb8\x53\xb3\xb8\x78\x07\x79\xf2\x7c\xba\x7e\x99\xb6\x07\x45\xea\x7c\xba\x85\xd5\xc5\x3b\xa8\x6e\x81\xca\xca\xba\xb9\x9c\x26\xed\x2d\xa9\xd1\xd2\x91\x53\x14\xd3\x75\x1c\xbf\x71\x1c\x38\x13\x02\x1c\x67\xcb\xa1\x49\x61\xab\xeb\x27\x54\x22\x8c\x29\x43\xe0\x12\x4a\xdc\xeb\x24\xb5\xe9\x95\x5c\xaa\xfe\x35\xeb\xd5\x0d\x08\x84\xec\xb7\x33\x52\x9a\xa1\x46\x56\x74\x8d\xd5\x3c\xa9\x7a\xa1\x92\x0c\xa5\xa9\xfa\x91\x9a\xe1\x46\x2e\xb4\x7a\xb0\x56\x1a\xf8\x36\xca\x18\xed\x7b\x36\xda\x36\x96\xd5\x31\x3b\x07\x11\xe5\xe6\x98\xef\xad\x2f\xb3\x59\xa9\x65\xbe\xb4\x1b\x53\x76\x96\x6e\x05\x12\x2c\x35\xa1\xc9\x46\xa5\xb4\x5d\xbf\x51\xbb\x15\xb9\x56\x8e\x15\xd9\xac\xb4\xf2\x9f\x8c\x48\x45\x4a\x92\x8a\xa1\xb7\x58\xb8\x3f\xde\x31\xb9\x5c\x92\xcd\x9d\xb3\x41\x35\xea\x7b\x96\xed\x98\x90\x79\xf2\xe8\x8c\x33\xbb\x6d\x78\x1b\x7e\x79\x31\xd8\x98\x93\x46\x79\x23\xb7\x35\x29\x9a\x1f\xbf\xed\x2c\x2d\x01\xde\x46\xd4\x5d\xf4\xcc\x75\xbe\x16\x86\xc2\xa3\xb4\x5c\x77\x7b\x9d\xa6\xff\x65\x84\xfa\xd7\x49\x56\xa4\xe8\xed\x2c\xab\x8e\xe1\x53\x68\x56\x28\x7d\xcd\x3c\xab\xa5\xaf\x5d\x44\xcb\xd3\xd9\x57\x43\xb3\xea\x16\xdf\x4e\xb4\xda\x87\xf6\x53\xa8\x56\xa9\x7d\xcd\x64\x6b\x3c\x52\x6c\xd0\xed\x7f\x98\x61\x8d\xce\xd6\xd2\xfa\x11\x59\xa4\xc1\xab\x3a\x63\xa5\x2c\xea\xfc\x92\xcc\x9a\x3b\x3e\xa2\xeb\xdf\x14\x35\xff\x1a\x33\x84\x13\xb3\xea\x7d\x77\x8b\xbf\x3b\x34\x5e\xac\xb3\xae\xf9\x39\xb0\x19\xac\xfa\x67\x58\xf9\x0a\x68\x2c\xce\xd0\xfd\x8c\x71\xe2\x8e\xb9\x47\x06\xff\xf8\x3b\x1c\x76\x7b\xc7\xe0\xc0\x75\x3a\x02\xff\x8f\x71\xb2\xed\x43\x6b\xfd\x53\x6b\xf3\x93\xb2\x89\x78\x0e\x52\xd5\xff\xa2\x17\xc4\x6f\x3b\xe5\x9b\x61\x67\xbf\xf6\xc2\xf5\x6d\x67\xcf\x2d\x8e\xab\xfe\xa3\x22\xeb\xa7\xbd\x7d\x17\x69\x18\x6d\xd7\x49\xb5\x6c\xc4\xcd\xbe\x1b\x1a\xd3\xd9\x0b\xa7\xda\x28\xbd\x77\xb0\x97\x28\x2e\x2d\xea\xbd\x7d\x37\x3b\xc7\x9d\x26\x64\x3b\x4c\xd5\xcd\x51\xc6\x86\x29\xe6\x9d\xbd\xbc\xd0\xdf\xdb\x3f\x6d\x4e\x5d\x1e\x3c\xd9\xa6\xc6\x58\xcd\xf0\x4f\xcc\xee\xbb\xa1\xe0\xe1\xe7\xce\x63\x06\x99\x0a\xa7\x31\x4a\xeb\x0a\x15\x66\x8f\x1e\x10\xac\x1c\xb7\x56\x77\xf6\x2a\xf8\x36\x17\x68\x76\xeb\xc3\xcb\x55\x67\xd5\x6c\x3e\x5e\xe5\x6f\x56\xbe\x97\xff\x27\xe4\x9f\x01\x00\x00\xff\xff\x81\xd1\xec\x83\x1a\x19\x00\x00"

func dataIndex_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataIndex_handlerTemplate,
		"data/index_handler.template",
	)
}

func dataIndex_handlerTemplate() (*asset, error) {
	bytes, err := dataIndex_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index_handler.template", size: 6426, mode: os.FileMode(420), modTime: time.Unix(1501730296, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataNode_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xeb\x72\xdb\xb8\x15\xfe\x1d\x3f\xc5\x29\x9a\xad\xe4\xa9\x45\x4a\x76\x76\xed\x55\x48\xcd\x64\xe4\x5d\x27\xdb\x5c\x9c\xd8\xdd\xeb\xe4\x07\x44\x1c\x89\x50\x40\x80\x06\x40\xd9\x2a\x47\x0f\xd4\xd7\xe8\x93\x75\xc0\x9b\x48\x59\x72\x33\xed\x4c\xfd\xc3\x02\xce\x0d\xdf\xb9\xe0\xe0\x30\xf8\xd3\xe5\x87\xe9\xed\x6f\xd7\x3f\x40\x6c\x13\x31\x39\x0a\xdc\x0f\x08\x2a\x17\x21\x41\x49\x26\x47\x00\x41\x8c\x94\xb9\x05\x40\x60\xb9\x15\x38\xc9\x73\xef\xc7\x3b\x26\x37\x9b\xc0\x2f\x09\x25\x33\x41\x4b\x21\x8a\xa9\x36\x68\x43\x92\xd9\xf9\xe0\x82\xb4\x59\x92\x26\x18\x92\x15\xc7\xfb\x54\x69\x4b\x20\x52\xd2\xa2\xb4\x21\xb9\xe7\xcc\xc6\x21\xc3\x15\x8f\x70\x50\x6c\x4e\x80\x4b\x6e\x39\x15\x03\x13\x51\x81\xe1\xc8\x1b\xd6\xa6\x04\x97\x5f\x20\xd6\x38\x0f\x49\x6c\x6d\x3a\xf6\xfd\x84\x3e\x44\x4c\x7a\x33\xa5\xac\xb1\x9a\xa6\x6e\x13\xa9\xc4\x6f\x08\xfe\x99\x77\xe6\x7d\xe7\x47\xc6\x6c\x69\x5e\xc2\xa5\x17\x19\x43\x40\xa3\x08\x89\xb1\x6b\x81\x26\x46\xb4\xf5\x39\x26\xd2\x3c\xb5\x60\x74\x54\x1e\x64\xc6\xbe\x1f\x29\x86\xde\xf2\x2e\x43\xbd\x2e\x4e\x28\x97\x83\x91\x37\x3a\xf5\x5e\x14\x16\x97\x86\x00\x97\x16\x17\x9a\xdb\x75\x48\x4c\x4c\xcf\x2e\x5e\x0c\xe4\xea\x15\x1d\xfe\xf5\xbb\x8f\x8b\xef\x23\x71\xff\xdb\xf4\xea\xea\x3a\xbd\xfc\xf8\xf6\xe7\xf4\xed\x7b\x39\x9c\x7f\xa2\x9f\x3e\x2c\x5f\xdf\x99\xd1\x99\x7d\x71\xb5\x58\x9e\xfd\xf0\x8f\x6f\x87\xbf\xca\xab\x8f\x77\x91\xaf\x2f\xde\xc5\xf2\xd3\xe5\xef\x04\x22\xad\x8c\x51\x9a\x2f\xb8\x0c\x09\x95\x4a\xae\x13\x95\x19\x32\x09\xfc\x12\xe7\x13\xa0\xbf\x2e\x3c\xe7\xfe\x72\x37\x3a\xfb\x7d\xb9\x8d\xbe\x7d\xf3\x91\xcf\x86\xa7\xe7\x77\xab\xf5\xf2\xe6\xdd\xfc\xf5\xf2\xc3\x3b\xfa\xf6\xcb\x3c\xfb\xe5\xe7\x87\xdf\x1f\xfe\x7e\x2d\xa7\x3f\xbd\x3a\x17\xa7\xc9\xf4\x97\xf7\x6f\xd2\xab\xef\x93\xab\xe9\xe5\xc5\xfd\xd5\xfb\x37\xd1\xf5\xe5\xf9\xed\x03\xfd\x9f\x7c\x89\xa8\x5c\x51\xb3\x34\x85\x03\xd4\x18\xb4\xa6\x52\xda\xb2\x2a\xe8\x07\xcc\xd9\x75\x8a\x21\xb1\xf8\x60\xfd\x25\x5d\xd1\x92\x5a\xe5\x1c\xee\xb9\x64\xea\xde\x53\x52\x28\xca\x20\x84\x79\x26\x23\xcb\x95\x84\xfe\x31\xe4\xa5\x08\xc0\x8a\xea\xa2\xca\x2d\x84\x20\xf1\x1e\xa6\xc5\xc1\x3f\xdd\x78\x53\x47\xec\x93\x82\x37\x55\xd2\x52\x2e\x51\x93\x13\xc8\x8f\x9e\x41\x71\x4f\xc6\x6e\x05\xe0\x0e\x1f\x03\xf9\x94\x49\xcb\x13\x84\xbe\xc1\x48\x49\x66\x8e\xc9\xd1\x33\xd8\x9c\xd4\xc7\x00\xd0\x07\x6e\x7e\x1d\xe7\x5b\x02\x80\xc6\x15\x6a\x83\x6c\x0c\x60\x75\x86\x5b\xd6\xe6\xe4\xe8\xe8\x19\x30\x6a\xe9\x18\xfe\x28\x4e\x29\xcf\x82\xc2\xe1\x31\x10\xc1\x25\x92\x93\x8a\xe6\xe4\xae\x15\x97\xd6\x38\x69\xe8\xfe\xe5\xb9\xa6\x72\x81\xe0\xbd\x57\x0c\x0d\x6c\x36\x95\x12\x40\x0e\x00\xeb\x31\xe4\xb9\x57\x61\xdf\x6c\xa0\x83\xb8\x36\x80\x92\x35\x6a\x9f\x8b\x5f\xb7\xfb\x5c\x0b\x6e\x8e\x5f\xd6\xcb\x22\x58\x9e\x46\xc9\x50\xf7\x6b\xf2\xa6\xcc\x58\x2b\x7f\x81\x5f\x37\xa1\x60\xa6\xd8\xba\x4a\xa9\xa4\x2b\x88\x04\x35\x26\x24\x92\xae\x66\x54\x43\xf9\x33\x60\x38\xa7\x99\xb0\x04\xb4\x12\x58\x30\xf9\x82\xba\x44\xd6\x89\x86\x80\xf1\x46\x37\xaa\x73\x35\x98\x8b\x8c\xb3\x46\xa6\x2b\x55\x99\x76\x38\x50\xb7\x64\x1c\xa4\xcc\x5a\x25\xab\xd2\x2a\x37\x64\x47\xcd\xaa\xc5\x42\x20\x44\x4a\x08\x9a\x1a\x64\xa4\xc8\x41\x45\x76\x10\x4a\x7a\x4d\xa6\x7a\xe1\x7a\xe8\x9f\x4b\x6d\x02\x54\x73\x3a\xc0\x87\x94\x4a\x86\x2c\x24\x73\x2a\x9c\x6c\x41\x75\xe8\xb5\x12\xcd\x51\x1d\x68\xae\xee\x53\x2a\x6b\x30\x46\x0f\x94\x14\x6b\x32\xb9\x2d\xe1\x6c\x03\x13\xf8\x4e\xee\x09\x55\x1e\x29\x39\x28\xcc\xff\xbf\x44\x03\xbf\x0c\x65\x87\x46\x77\xe2\x3a\xd3\x54\x32\x32\xf9\x8b\x9c\x99\xf4\xe5\xd3\xff\xaf\xb3\x34\x45\x3b\xb8\xc9\x92\x84\xea\x75\xe0\xd3\x56\x9e\x7d\xc6\x57\x3b\x69\xe7\xac\x89\xe8\xb6\x50\xca\x2c\xd5\x65\xd6\x64\xad\x03\x31\x13\x2d\x8c\xb5\xa8\xa4\x2b\x32\x29\x6f\x44\x20\xf8\x24\xa0\xd5\x13\xe6\x93\x49\x37\x22\x0b\xb1\x4e\x63\x17\x16\x68\x56\x83\x58\x25\x75\xb6\x63\xce\x18\xca\x90\xb8\xdb\xdf\x04\x0d\x5e\xab\x04\x9d\x43\x81\x2f\x78\x37\x84\x99\x38\xe0\x65\x6b\x13\xf8\x92\xd6\xcb\x7d\xd7\x62\x7b\x69\x54\xe3\xda\x4c\x23\x65\x91\xce\x92\x59\xfb\xba\x08\xfe\x98\x3f\xe0\x16\x13\xd2\xf1\x78\x3f\xdc\xc3\xda\x40\x23\xcb\x57\x48\x26\x79\x0e\xc5\xe4\x01\x6e\xf4\xd8\xea\x06\xbe\x6a\xdc\x0c\xe2\x51\x7b\x3e\x89\x47\x9d\x1b\xef\x92\xba\xd3\x9f\xa1\x78\xfa\x43\x12\x23\x5f\xc4\x76\x0c\xa7\xc3\x61\xfa\xf0\x12\x8a\x31\x64\x0c\x17\xc3\x6f\x5e\x42\x42\xf5\x82\xcb\x81\xc0\xb9\x1d\x8f\x5a\x04\x5d\x68\x8c\x86\xdf\xb8\x4c\xb4\x63\x9b\x56\x05\x19\xf8\x69\x43\xb3\x74\xe6\x1a\x40\xe9\x60\xb9\x29\xfe\x0f\x66\x4a\x33\xd4\xc8\xaa\xad\xb1\x9a\xa7\xcd\xce\xbd\x0c\x28\x4d\xb3\x8f\xd5\xaa\xd3\x7d\x02\xab\x3b\x09\xb7\xf1\xc4\xb5\xed\xc0\xb7\xf1\x2e\xfd\xc6\x52\x9b\x99\x7d\x9c\x5b\x9e\xec\xd5\xf8\x91\x72\x81\x6c\x1f\x67\x1a\xbb\x27\x62\x2f\xeb\x56\x59\x2a\xba\x8c\xc0\x6f\xa3\xec\xbe\x2f\x9b\x4d\xdb\x97\x76\xa7\xc8\x73\x3e\x07\xbc\x03\xcf\x01\x47\x20\xf3\x02\x0d\x81\xcd\xa6\x8e\x22\x73\x76\x34\x81\x3c\x07\x94\x0c\x5a\xa6\xf6\xa8\x47\x25\xe4\xb6\x3e\x97\x73\x45\x60\xbf\x7a\xd1\x87\xab\x8a\xd5\xe8\x06\x56\x3f\xcf\xbd\x37\x4e\xac\x7b\xdd\x2d\x9b\xe4\xf9\xf3\xed\x40\xcc\x1e\x73\x4b\x08\x07\xb9\xaf\xec\x41\x56\x99\x81\x83\xec\x2a\x0d\x07\xf9\x45\x2e\x76\xb9\xbb\xd9\x28\x1f\xeb\x86\xe7\xca\xac\xee\x0b\xdb\x16\xf1\xa8\xa2\xf7\x50\x62\x0d\x7e\xb5\x9c\x2b\x65\x51\x17\xd7\xad\x5c\x3e\xfd\xf0\x1e\x78\x72\x23\x25\x06\x09\x6b\xbe\x22\xe0\x40\xa7\xee\x4a\xbf\x78\xaa\x1b\xef\x3e\x8e\xed\x56\x5c\xcf\x98\xc6\xe2\x0a\xbd\x2f\x98\xa4\xde\x9c\xfb\x64\xf2\xaf\x7f\xc2\xe9\x70\x74\x0e\x03\xb8\x71\x1c\xf8\x1b\x26\xe9\x7f\xdf\x6c\xbf\x72\x12\x85\xe7\xfd\x7a\xf8\xec\x1f\xb7\x46\xc0\xe7\xfd\x9e\x57\x35\x0f\xfd\x47\x53\xa3\x9f\x7b\xc7\x1e\xd2\x28\xde\xaf\xe3\xb4\x6c\xcc\xcd\xb1\xfb\xde\xe9\xf7\xa2\x4c\x1b\xa5\x7b\x27\xbd\xd4\x4d\x80\xa8\x7b\xc7\x5e\xd1\x55\xfa\xdd\x39\xee\x80\xa9\xb6\x39\xca\xd8\xd4\xc5\xb6\xdf\x2b\x1b\x74\x6f\x3b\xd7\x95\x7f\xbb\xb3\xe1\x57\xd8\xd4\x98\xa8\x15\xfe\x07\xb3\xc7\x5e\x24\x78\xf4\xa5\xff\x94\x41\xa6\xa2\x2c\x41\x69\x3d\xa1\xa2\x62\xc4\x81\x70\x0b\xdc\x5a\xdd\xef\x35\xe1\x7b\x7c\x40\x77\xdb\x66\xb7\x66\xd7\xed\x72\xe7\x53\xc3\x2f\x6b\xbe\x1c\x5c\xcb\x79\x35\xf0\xcb\xef\xeb\x7f\x07\x00\x00\xff\xff\xfc\xef\x99\xd0\x70\x0f\x00\x00"

func dataNode_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataNode_handlerTemplate,
		"data/node_handler.template",
	)
}

func dataNode_handlerTemplate() (*asset, error) {
	bytes, err := dataNode_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/node_handler.template", size: 3952, mode: os.FileMode(420), modTime: time.Unix(1501694402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataReport_handlerTemplate = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x5f\x8f\xe3\x34\x10\x7f\x66\x3f\xc5\x60\x24\x9e\x48\x7c\x65\x11\x9c\x16\x27\x12\x3a\x38\x21\x71\x70\xa7\xdb\x7d\xe1\xe9\xe4\xc6\xd3\xc4\x5a\xc7\x36\xb6\xd3\xbd\xaa\xea\x07\xe2\x6b\xf0\xc9\x90\xeb\x24\x4d\xb2\xbd\x8a\x3f\x12\x5a\xee\xa5\xf5\xfc\x32\x3f\x67\xe6\x37\xf1\x68\xcc\x3e\xfd\xfe\xf5\x8b\xbb\x5f\xdf\xfc\x00\x4d\x68\x55\x79\xc5\xe2\x1f\x28\xae\xeb\x82\xa0\x26\xe5\x15\x00\x6b\x90\x8b\xb8\x00\x60\x41\x06\x85\xe5\x9b\xce\x5a\x0c\xf0\x16\xad\x71\x81\xd1\x04\x26\x87\x16\x03\x87\xaa\xe1\xce\x63\x28\x48\x17\x36\xd9\x73\x32\x7d\xa4\x79\x8b\x05\xd9\x4a\x7c\x88\x5c\x02\x95\xd1\x01\x75\x28\xc8\x83\x14\xa1\x29\x04\x6e\x65\x85\xd9\xd1\xf8\x02\xa4\x96\x41\x72\x95\xf9\x8a\x2b\x2c\x56\xf9\xb3\x61\x2b\x25\xf5\x3d\x34\x0e\x37\x05\x69\x42\xb0\x37\x94\xb6\xfc\x7d\x25\x74\xbe\x36\x26\xf8\xe0\xb8\x8d\x46\x65\x5a\x3a\x02\xf4\x3a\xbf\xce\xbf\xa6\x95\xf7\x27\x2c\x6f\xa5\xce\x2b\xef\x09\x38\x54\x05\xf1\x61\xa7\xd0\x37\x88\x21\xe5\x4d\x87\xc4\xd9\xda\x88\x5d\xff\x6a\xcd\xb7\x50\x29\xee\x7d\x41\x34\xdf\xae\xb9\x83\xf4\x97\x09\xdc\xf0\x4e\x05\x02\xce\x28\x3c\x3e\x94\x35\x0f\xd2\xe8\x3e\x68\x00\x26\xe4\xc8\x8d\x79\x73\xa9\xd1\x65\x1b\xd5\x49\x31\xfa\xcc\xbd\xfa\xad\x63\x1c\xe8\x26\x3e\x31\xa4\x2e\x04\xa3\x21\xec\x2c\x16\x24\x19\x64\x41\x0b\xa6\xae\x15\x42\x65\x94\xe2\xd6\xa3\x20\x20\x78\xe0\x3d\x1c\x43\x48\xf8\x00\x73\x57\xc7\x9a\x7d\x96\xd8\x04\xb8\x93\x3c\xc3\xf7\x96\x6b\x81\xa2\x20\x1b\xae\xa2\xef\x11\x8d\xd1\x3b\xa3\xc6\x57\xcd\x42\x03\x60\xde\x72\x3d\x04\xe3\x5d\x66\xb4\xda\x91\xf2\x2e\x85\x73\x12\x86\xd1\xe8\x77\x81\x2a\x2b\xa3\xb3\xe3\xf6\xff\x95\x2b\xa3\x49\xca\x19\xc6\x17\xba\xae\x1d\xd7\x82\x94\x9f\xeb\xb5\xb7\xdf\x5e\xfe\x4d\x27\x25\xbb\xed\xda\x96\xbb\x1d\xa3\x7c\x52\x67\x2a\xe4\x76\x51\x76\x29\x46\x45\x4f\x1f\x4a\xaa\xd2\xf0\x99\x8d\x55\x9b\x85\xd8\xa9\x49\x8c\x83\xab\xe6\x5b\x52\x5e\x7d\xd2\x9f\x98\x92\xf1\xfe\xc8\x50\x52\xce\x15\xa9\xd5\xce\x36\x51\x16\x18\x57\x59\x63\xda\xa1\xda\x8d\x14\x02\x75\x41\x82\xeb\x70\x14\x0d\x7e\x34\x2d\xc6\x84\x18\x55\x72\x2e\x61\xa7\x3e\x90\xe5\xc4\x60\x54\xf3\x61\x79\xee\x58\x9c\x0e\x8d\x19\x53\x5b\x3b\xe4\xa2\x72\x5d\xbb\x9e\x1e\x17\x25\x1f\x3f\xcf\x64\xc0\x96\xcc\x32\x3e\x1f\xee\x5f\x63\x6b\x23\x90\xee\xf7\x90\xbf\xfc\x4d\x68\x38\x1c\x48\x39\x31\xfe\xce\xa6\xc0\xab\x20\xb7\x48\xca\xa1\x75\x9e\x68\x8c\x9a\x51\x36\xd6\xac\xca\xd7\x5b\x74\xb1\x4d\x32\xda\xac\x46\xdc\xf6\x44\x30\x1b\x98\x84\x00\xb0\x71\xa6\x3d\x22\xdf\x05\x38\x1c\x6e\x18\xb5\x23\x27\xf0\x75\x6c\x02\x29\x9e\x64\x1c\x7f\xb3\xb5\x71\x02\x1d\x8a\xde\xf4\xc1\x49\x3b\x5a\x95\xd1\x02\xb5\x1f\xed\xc6\x6c\x67\x1d\x88\x05\x57\xb2\x20\xca\x17\x0d\xd7\x35\x0a\x60\x34\x88\x23\x10\x83\x18\xc0\x28\x4e\x84\x69\x70\x8f\x99\xb7\xf7\xd2\xda\x25\x73\x00\x2f\x32\x5f\x72\xa9\x96\xc4\x1e\xbb\xc8\xbb\x33\x81\xab\x39\x2d\x41\x67\x58\x8c\x1e\xf3\x3e\x55\xe4\xba\x7c\x65\x6a\xcf\x68\x73\xfd\xcf\xdb\xb9\x33\x0f\xf3\x63\x3b\xdb\x41\x65\xbe\xcd\x56\xb1\x5d\x67\xad\xc8\x56\x73\xcf\x79\xb3\x38\x4f\x3d\x71\x57\x8b\x86\xbc\xdf\xbb\x58\x11\xc8\x5f\x99\xfa\xdd\xcf\xe8\x3d\xaf\xd1\x1f\x0e\xf3\x1e\x69\xcb\xfd\x3e\x8f\x52\xd8\x25\x19\x95\xc7\xc7\xde\xbf\x98\xd0\x48\x5d\x83\x3b\x7e\x92\x28\xf2\x73\x4c\x2d\x66\xc4\x65\xd3\x3b\xd3\x1d\x26\x8a\xa7\xa2\xfe\xdf\x35\x7f\x8b\xde\x74\xae\x42\xff\x2e\xe5\xf3\xf4\x75\xef\xcf\xef\xc7\x23\x7c\x9f\xd0\xd3\x57\xbe\xef\x7f\x1f\x8f\xf2\x7d\x42\x4f\x54\xf9\xe5\xd2\xf6\x43\xdd\xb8\xfb\x19\xa4\x71\x40\xfb\xe5\xc6\x98\x80\xee\x38\xb5\xa5\xe5\xe5\x51\xff\x03\xe5\xea\xd5\x7c\x4e\x2e\xcf\x86\x73\xef\xaf\x2e\xcd\x7f\xcb\x71\x7c\x3a\xfc\xc5\xfb\x92\xbf\xa1\xd4\x07\xdc\x62\x7e\x8f\xad\xcd\x37\x92\x92\xf2\x8f\xdf\xe1\xcb\x67\xab\x6f\x20\x83\xdb\xf8\x04\x7e\xc2\xd6\xfe\x9b\xf1\x2e\x09\x92\xee\x51\xe9\xfa\xc4\x68\xba\x62\xfe\x19\x00\x00\xff\xff\x4c\x3d\xab\xc4\x73\x0e\x00\x00"

func dataReport_handlerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_dataReport_handlerTemplate,
		"data/report_handler.template",
	)
}

func dataReport_handlerTemplate() (*asset, error) {
	bytes, err := dataReport_handlerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/report_handler.template", size: 3699, mode: os.FileMode(420), modTime: time.Unix(1501619188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index_handler.template": dataIndex_handlerTemplate,
	"data/node_handler.template": dataNode_handlerTemplate,
	"data/report_handler.template": dataReport_handlerTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index_handler.template": &bintree{dataIndex_handlerTemplate, map[string]*bintree{}},
		"node_handler.template": &bintree{dataNode_handlerTemplate, map[string]*bintree{}},
		"report_handler.template": &bintree{dataReport_handlerTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

